language: go_test.go
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, i := range lst {\n        if i < 0 {\n            if !largestNegativeSet\
    \ || i > largestNegative {\n                largestNegative = i\n            \
    \    largestNegativeSet = true\n            }\n        } else if i > 0 {\n   \
    \         if !smallestPositiveSet || i < smallestPositive {\n                smallestPositive\
    \ = i\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxtqc9ahl_test.go:51:76: undefined: None

    /tmp/tmpxtqc9ahl_test.go:52:79: undefined: None

    /tmp/tmpxtqc9ahl_test.go:56:60: undefined: None

    /tmp/tmpxtqc9ahl_test.go:57:61: undefined: None

    /tmp/tmpxtqc9ahl_test.go:58:78: undefined: None

    /tmp/tmpxtqc9ahl_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \    for _, n := range lst {\n        if n < 0 {\n            if !largestNegativeFound\
    \ || n > largestNegative {\n                largestNegative = n\n            \
    \    largestNegativeFound = true\n            }\n        } else if n > 0 {\n \
    \           if !smallestPositiveFound || n < smallestPositive {\n            \
    \    smallestPositive = n\n                smallestPositiveFound = true\n    \
    \        }\n        }\n    }\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeFound {\n        largestNegativeInterface\
    \ = largestNegative\n    }\n    if smallestPositiveFound {\n        smallestPositiveInterface\
    \ = smallestPositive\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplncil56o_test.go:52:76: undefined: None

    /tmp/tmplncil56o_test.go:53:79: undefined: None

    /tmp/tmplncil56o_test.go:57:60: undefined: None

    /tmp/tmplncil56o_test.go:58:61: undefined: None

    /tmp/tmplncil56o_test.go:59:78: undefined: None

    /tmp/tmplncil56o_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplt96wlmp_test.go:55:76: undefined: None

    /tmp/tmplt96wlmp_test.go:56:79: undefined: None

    /tmp/tmplt96wlmp_test.go:60:60: undefined: None

    /tmp/tmplt96wlmp_test.go:61:61: undefined: None

    /tmp/tmplt96wlmp_test.go:62:78: undefined: None

    /tmp/tmplt96wlmp_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int = 0\n    var smallestPositive int = 0\n    var largestNegativeFound bool\
    \ = false\n    var smallestPositiveFound bool = false\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeFound {\n            \
    \    largestNegative = v\n                largestNegativeFound = true\n      \
    \      } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    var largestNegativeInterface interface{}\n\
    \    var smallestPositiveInterface interface{}\n    if largestNegativeFound {\n\
    \        largestNegativeInterface = largestNegative\n    } else {\n        largestNegativeInterface\
    \ = nil\n    }\n    if smallestPositiveFound {\n        smallestPositiveInterface\
    \ = smallestPositive\n    } else {\n        smallestPositiveInterface = nil\n\
    \    }\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp989733v7_test.go:63:76: undefined: None

    /tmp/tmp989733v7_test.go:64:79: undefined: None

    /tmp/tmp989733v7_test.go:68:60: undefined: None

    /tmp/tmp989733v7_test.go:69:61: undefined: None

    /tmp/tmp989733v7_test.go:70:78: undefined: None

    /tmp/tmp989733v7_test.go:71:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeExists {\n                largestNegative = i\n\
    \                largestNegativeExists = true\n            } else if i > largestNegative\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if !smallestPositiveExists {\n                smallestPositive\
    \ = i\n                smallestPositiveExists = true\n            } else if i\
    \ < smallestPositive {\n                smallestPositive = i\n            }\n\
    \        }\n    }\n    if !largestNegativeExists {\n        largestNegative =\
    \ 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive = 0\n \
    \   }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvaecf_an_test.go:57:76: undefined: None

    /tmp/tmpvaecf_an_test.go:58:79: undefined: None

    /tmp/tmpvaecf_an_test.go:62:60: undefined: None

    /tmp/tmpvaecf_an_test.go:63:61: undefined: None

    /tmp/tmpvaecf_an_test.go:64:78: undefined: None

    /tmp/tmpvaecf_an_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n    for _, num := range lst {\n        if num <\
    \ 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = num\n                largestNegativeExists = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveExists {\n     \
    \           smallestPositive = num\n                smallestPositiveExists = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5z6v1i0b_test.go:57:76: undefined: None

    /tmp/tmp5z6v1i0b_test.go:58:79: undefined: None

    /tmp/tmp5z6v1i0b_test.go:62:60: undefined: None

    /tmp/tmp5z6v1i0b_test.go:63:61: undefined: None

    /tmp/tmp5z6v1i0b_test.go:64:78: undefined: None

    /tmp/tmp5z6v1i0b_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, n := range lst {\n        if n < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = n\n\
    \                largestNegativeFound = true\n            } else if n > largestNegative\
    \ {\n                largestNegative = n\n            }\n        } else if n >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = n\n                smallestPositiveFound = true\n            } else if n <\
    \ smallestPositive {\n                smallestPositive = n\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a9vjh66_test.go:57:76: undefined: None

    /tmp/tmp4a9vjh66_test.go:58:79: undefined: None

    /tmp/tmp4a9vjh66_test.go:62:60: undefined: None

    /tmp/tmp4a9vjh66_test.go:63:61: undefined: None

    /tmp/tmp4a9vjh66_test.go:64:78: undefined: None

    /tmp/tmp4a9vjh66_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeFound == false {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if smallestPositiveFound == false {\n    \
    \            smallestPositive = v\n                smallestPositiveFound = true\n\
    \            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if largestNegativeFound == false {\n\
    \        largestNegative = nil\n    }\n    if smallestPositiveFound == false {\n\
    \        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilbg0yz0_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpilbg0yz0_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpilbg0yz0_test.go:57:76: undefined: None

    /tmp/tmpilbg0yz0_test.go:58:79: undefined: None

    /tmp/tmpilbg0yz0_test.go:62:60: undefined: None

    /tmp/tmpilbg0yz0_test.go:63:61: undefined: None

    /tmp/tmpilbg0yz0_test.go:64:78: undefined: None

    /tmp/tmpilbg0yz0_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    var largestNegativeInterface, smallestPositiveInterface interface{}\n\
    \    if largestNegativeSet {\n        largestNegativeInterface = largestNegative\n\
    \    }\n    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    }\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3yr5wmt_test.go:52:76: undefined: None

    /tmp/tmpc3yr5wmt_test.go:53:79: undefined: None

    /tmp/tmpc3yr5wmt_test.go:57:60: undefined: None

    /tmp/tmpc3yr5wmt_test.go:58:61: undefined: None

    /tmp/tmpc3yr5wmt_test.go:59:78: undefined: None

    /tmp/tmpc3yr5wmt_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2nixrs4_test.go:58:76: undefined: None

    /tmp/tmpd2nixrs4_test.go:59:79: undefined: None

    /tmp/tmpd2nixrs4_test.go:63:60: undefined: None

    /tmp/tmpd2nixrs4_test.go:64:61: undefined: None

    /tmp/tmpd2nixrs4_test.go:65:78: undefined: None

    /tmp/tmpd2nixrs4_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, i := range lst {\n        if i < 0 {\n            if !largestNegativeSet\
    \ || i > largestNegative {\n                largestNegative = i\n            \
    \    largestNegativeSet = true\n            }\n        } else if i > 0 {\n   \
    \         if !smallestPositiveSet || i < smallestPositive {\n                smallestPositive\
    \ = i\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jw38353_test.go:54:76: undefined: None

    /tmp/tmp4jw38353_test.go:55:79: undefined: None

    /tmp/tmp4jw38353_test.go:59:60: undefined: None

    /tmp/tmp4jw38353_test.go:60:61: undefined: None

    /tmp/tmp4jw38353_test.go:61:78: undefined: None

    /tmp/tmp4jw38353_test.go:62:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeSet\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            }\n        } else\
    \ if v > 0 {\n            if smallestPositiveSet {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n\n    if largestNegativeSet {\n   \
    \     if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplc_dgn3i_test.go:67:76: undefined: None

    /tmp/tmplc_dgn3i_test.go:68:79: undefined: None

    /tmp/tmplc_dgn3i_test.go:72:60: undefined: None

    /tmp/tmplc_dgn3i_test.go:73:61: undefined: None

    /tmp/tmplc_dgn3i_test.go:74:78: undefined: None

    /tmp/tmplc_dgn3i_test.go:75:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65n_5z73_test.go:55:76: undefined: None

    /tmp/tmp65n_5z73_test.go:56:79: undefined: None

    /tmp/tmp65n_5z73_test.go:60:60: undefined: None

    /tmp/tmp65n_5z73_test.go:61:61: undefined: None

    /tmp/tmp65n_5z73_test.go:62:78: undefined: None

    /tmp/tmp65n_5z73_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = nil\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7zshm8s_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:57:76: undefined: None

    /tmp/tmpd7zshm8s_test.go:58:79: undefined: None

    /tmp/tmpd7zshm8s_test.go:62:60: undefined: None

    /tmp/tmpd7zshm8s_test.go:63:61: undefined: None

    /tmp/tmpd7zshm8s_test.go:64:78: undefined: None

    /tmp/tmpd7zshm8s_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkx2ydvoh_test.go:54:76: undefined: None

    /tmp/tmpkx2ydvoh_test.go:55:79: undefined: None

    /tmp/tmpkx2ydvoh_test.go:59:60: undefined: None

    /tmp/tmpkx2ydvoh_test.go:60:61: undefined: None

    /tmp/tmpkx2ydvoh_test.go:61:78: undefined: None

    /tmp/tmpkx2ydvoh_test.go:62:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65n_5z73_test.go:55:76: undefined: None

    /tmp/tmp65n_5z73_test.go:56:79: undefined: None

    /tmp/tmp65n_5z73_test.go:60:60: undefined: None

    /tmp/tmp65n_5z73_test.go:61:61: undefined: None

    /tmp/tmp65n_5z73_test.go:62:78: undefined: None

    /tmp/tmp65n_5z73_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    for _, i := range lst {\n        if i\
    \ < 0 {\n            if largestNegative < i {\n                largestNegative\
    \ = i\n            }\n        } else {\n            if smallestPositive > i ||\
    \ smallestPositive == 0 {\n                smallestPositive = i\n            }\n\
    \        }\n    }\n    if largestNegative == 0 {\n        largestNegative = nil\n\
    \    }\n    if smallestPositive == 0 {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ygd9wt5_test.go:34:27: cannot use nil as int value in assignment

    /tmp/tmp_ygd9wt5_test.go:37:28: cannot use nil as int value in assignment

    /tmp/tmp_ygd9wt5_test.go:49:76: undefined: None

    /tmp/tmp_ygd9wt5_test.go:50:79: undefined: None

    /tmp/tmp_ygd9wt5_test.go:54:60: undefined: None

    /tmp/tmp_ygd9wt5_test.go:55:61: undefined: None

    /tmp/tmp_ygd9wt5_test.go:56:78: undefined: None

    /tmp/tmp_ygd9wt5_test.go:57:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largest_negative,\
    \ smallest_positive int\n    var largest_negative_set, smallest_positive_set bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if largest_negative_set\
    \ {\n                if v > largest_negative {\n                    largest_negative\
    \ = v\n                }\n            } else {\n                largest_negative\
    \ = v\n                largest_negative_set = true\n            }\n        } else\
    \ if v > 0 {\n            if smallest_positive_set {\n                if v < smallest_positive\
    \ {\n                    smallest_positive = v\n                }\n          \
    \  } else {\n                smallest_positive = v\n                smallest_positive_set\
    \ = true\n            }\n        }\n    }\n    var largest_negative_interface,\
    \ smallest_positive_interface interface{}\n    if largest_negative_set {\n   \
    \     largest_negative_interface = largest_negative\n    } else {\n        largest_negative_interface\
    \ = nil\n    }\n    if smallest_positive_set {\n        smallest_positive_interface\
    \ = smallest_positive\n    } else {\n        smallest_positive_interface = nil\n\
    \    }\n    return []interface{}{largest_negative_interface, smallest_positive_interface}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp737vn2qs_test.go:64:76: undefined: None

    /tmp/tmp737vn2qs_test.go:65:79: undefined: None

    /tmp/tmp737vn2qs_test.go:69:60: undefined: None

    /tmp/tmp737vn2qs_test.go:70:61: undefined: None

    /tmp/tmp737vn2qs_test.go:71:78: undefined: None

    /tmp/tmp737vn2qs_test.go:72:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkx2ydvoh_test.go:54:76: undefined: None

    /tmp/tmpkx2ydvoh_test.go:55:79: undefined: None

    /tmp/tmpkx2ydvoh_test.go:59:60: undefined: None

    /tmp/tmpkx2ydvoh_test.go:60:61: undefined: None

    /tmp/tmpkx2ydvoh_test.go:61:78: undefined: None

    /tmp/tmpkx2ydvoh_test.go:62:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a,\
    \ b interface{}\n    for _, v := range lst {\n        if v < 0 {\n           \
    \ if a == nil {\n                a = v\n            } else if v > a.(int) {\n\
    \                a = v\n            }\n        } else if v > 0 {\n           \
    \ if b == nil {\n                b = v\n            } else if v < b.(int) {\n\
    \                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate :=\
    \ largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgb98uh67_test.go:46:76: undefined: None

    /tmp/tmpgb98uh67_test.go:47:79: undefined: None

    /tmp/tmpgb98uh67_test.go:51:60: undefined: None

    /tmp/tmpgb98uh67_test.go:52:61: undefined: None

    /tmp/tmpgb98uh67_test.go:53:78: undefined: None

    /tmp/tmpgb98uh67_test.go:54:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = nil\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7zshm8s_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:57:76: undefined: None

    /tmp/tmpd7zshm8s_test.go:58:79: undefined: None

    /tmp/tmpd7zshm8s_test.go:62:60: undefined: None

    /tmp/tmpd7zshm8s_test.go:63:61: undefined: None

    /tmp/tmpd7zshm8s_test.go:64:78: undefined: None

    /tmp/tmpd7zshm8s_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, value := range lst {\n        if value\
    \ < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = value\n                largestNegativeFound = true\n            } else if\
    \ value > largestNegative {\n                largestNegative = value\n       \
    \     }\n        } else if value > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = value\n                smallestPositiveFound\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n    if !largestNegativeFound {\n \
    \       largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn40vd6kb_test.go:57:76: undefined: None

    /tmp/tmpn40vd6kb_test.go:58:79: undefined: None

    /tmp/tmpn40vd6kb_test.go:62:60: undefined: None

    /tmp/tmpn40vd6kb_test.go:63:61: undefined: None

    /tmp/tmpn40vd6kb_test.go:64:78: undefined: None

    /tmp/tmpn40vd6kb_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largest_negative\
    \ int\n    var smallest_positive int\n    var largest_negative_found bool\n  \
    \  var smallest_positive_found bool\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            if !largest_negative_found {\n                largest_negative\
    \ = v\n                largest_negative_found = true\n            } else if v\
    \ > largest_negative {\n                largest_negative = v\n            }\n\
    \        } else if v > 0 {\n            if !smallest_positive_found {\n      \
    \          smallest_positive = v\n                smallest_positive_found = true\n\
    \            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if !largest_negative_found {\n   \
    \     largest_negative = nil\n    }\n    if !smallest_positive_found {\n     \
    \   smallest_positive = nil\n    }\n    return []interface{}{largest_negative,\
    \ smallest_positive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1xpyd18_test.go:42:28: cannot use nil as int value in assignment

    /tmp/tmpw1xpyd18_test.go:45:29: cannot use nil as int value in assignment

    /tmp/tmpw1xpyd18_test.go:57:76: undefined: None

    /tmp/tmpw1xpyd18_test.go:58:79: undefined: None

    /tmp/tmpw1xpyd18_test.go:62:60: undefined: None

    /tmp/tmpw1xpyd18_test.go:63:61: undefined: None

    /tmp/tmpw1xpyd18_test.go:64:78: undefined: None

    /tmp/tmpw1xpyd18_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, val := range lst {\n        if val <\
    \ 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = val\n                largestNegativeFound = true\n            } else if val\
    \ > largestNegative {\n                largestNegative = val\n            }\n\
    \        } else if val > 0 {\n            if !smallestPositiveFound {\n      \
    \          smallestPositive = val\n                smallestPositiveFound = true\n\
    \            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda_hnj3w_test.go:57:76: undefined: None

    /tmp/tmpda_hnj3w_test.go:58:79: undefined: None

    /tmp/tmpda_hnj3w_test.go:62:60: undefined: None

    /tmp/tmpda_hnj3w_test.go:63:61: undefined: None

    /tmp/tmpda_hnj3w_test.go:64:78: undefined: None

    /tmp/tmpda_hnj3w_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpld04wv8c_test.go:58:76: undefined: None

    /tmp/tmpld04wv8c_test.go:59:79: undefined: None

    /tmp/tmpld04wv8c_test.go:63:60: undefined: None

    /tmp/tmpld04wv8c_test.go:64:61: undefined: None

    /tmp/tmpld04wv8c_test.go:65:78: undefined: None

    /tmp/tmpld04wv8c_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, val := range lst {\n        if val < 0\
    \ {\n            if !largestNegativeSet {\n                largestNegative = val\n\
    \                largestNegativeSet = true\n            } else if val > largestNegative\
    \ {\n                largestNegative = val\n            }\n        } else if val\
    \ > 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = val\n                smallestPositiveSet = true\n            } else if val\
    \ < smallestPositive {\n                smallestPositive = val\n            }\n\
    \        }\n    }\n    if !largestNegativeSet {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n \
    \   return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0hnh9o5p_test.go:57:76: undefined: None

    /tmp/tmp0hnh9o5p_test.go:58:79: undefined: None

    /tmp/tmp0hnh9o5p_test.go:62:60: undefined: None

    /tmp/tmp0hnh9o5p_test.go:63:61: undefined: None

    /tmp/tmp0hnh9o5p_test.go:64:78: undefined: None

    /tmp/tmp0hnh9o5p_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = i\n\
    \                largestNegativeFound = true\n            } else if i > largestNegative\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = i\n                smallestPositiveFound = true\n            } else if i <\
    \ smallestPositive {\n                smallestPositive = i\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hv75emp_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:57:76: undefined: None

    /tmp/tmp2hv75emp_test.go:58:79: undefined: None

    /tmp/tmp2hv75emp_test.go:62:60: undefined: None

    /tmp/tmp2hv75emp_test.go:63:61: undefined: None

    /tmp/tmp2hv75emp_test.go:64:78: undefined: None

    /tmp/tmp2hv75emp_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkx2ydvoh_test.go:54:76: undefined: None

    /tmp/tmpkx2ydvoh_test.go:55:79: undefined: None

    /tmp/tmpkx2ydvoh_test.go:59:60: undefined: None

    /tmp/tmpkx2ydvoh_test.go:60:61: undefined: None

    /tmp/tmpkx2ydvoh_test.go:61:78: undefined: None

    /tmp/tmpkx2ydvoh_test.go:62:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeSet\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            }\n        } else\
    \ if v > 0 {\n            if smallestPositiveSet {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = nil\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = nil\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp775z6k_test.go:44:27: cannot use nil as int value in assignment

    /tmp/tmpxp775z6k_test.go:47:28: cannot use nil as int value in assignment

    /tmp/tmpxp775z6k_test.go:59:76: undefined: None

    /tmp/tmpxp775z6k_test.go:60:79: undefined: None

    /tmp/tmpxp775z6k_test.go:64:60: undefined: None

    /tmp/tmpxp775z6k_test.go:65:61: undefined: None

    /tmp/tmpxp775z6k_test.go:66:78: undefined: None

    /tmp/tmpxp775z6k_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = i\n\
    \                largestNegativeFound = true\n            } else if i > largestNegative\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = i\n                smallestPositiveFound = true\n            } else if i <\
    \ smallestPositive {\n                smallestPositive = i\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hv75emp_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:57:76: undefined: None

    /tmp/tmp2hv75emp_test.go:58:79: undefined: None

    /tmp/tmp2hv75emp_test.go:62:60: undefined: None

    /tmp/tmp2hv75emp_test.go:63:61: undefined: None

    /tmp/tmp2hv75emp_test.go:64:78: undefined: None

    /tmp/tmp2hv75emp_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, num := range lst {\n        if num <\
    \ 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = num\n                largestNegativeFound = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveFound {\n      \
    \          smallestPositive = num\n                smallestPositiveFound = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if !largestNegativeFound {\n   \
    \     largestNegative = nil\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = nil\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt5_1kykh_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpt5_1kykh_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpt5_1kykh_test.go:57:76: undefined: None

    /tmp/tmpt5_1kykh_test.go:58:79: undefined: None

    /tmp/tmpt5_1kykh_test.go:62:60: undefined: None

    /tmp/tmpt5_1kykh_test.go:63:61: undefined: None

    /tmp/tmpt5_1kykh_test.go:64:78: undefined: None

    /tmp/tmpt5_1kykh_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeSet\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            }\n        } else\
    \ if v > 0 {\n            if smallestPositiveSet {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeSet {\n        largestNegativeInterface =\
    \ largestNegative\n    } else {\n        largestNegativeInterface = nil\n    }\n\
    \    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppxggy5au_test.go:64:76: undefined: None

    /tmp/tmppxggy5au_test.go:65:79: undefined: None

    /tmp/tmppxggy5au_test.go:69:60: undefined: None

    /tmp/tmppxggy5au_test.go:70:61: undefined: None

    /tmp/tmppxggy5au_test.go:71:78: undefined: None

    /tmp/tmppxggy5au_test.go:72:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, num := range lst {\n        if num < 0 {\n            if !largestNegativeSet\
    \ || num > largestNegative {\n                largestNegative = num\n        \
    \        largestNegativeSet = true\n            }\n        } else if num > 0 {\n\
    \            if !smallestPositiveSet || num < smallestPositive {\n           \
    \     smallestPositive = num\n                smallestPositiveSet = true\n   \
    \         }\n        }\n    }\n    if !largestNegativeSet {\n        largestNegative\
    \ = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive = 0\n  \
    \  }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbjll380r_test.go:51:76: undefined: None

    /tmp/tmpbjll380r_test.go:52:79: undefined: None

    /tmp/tmpbjll380r_test.go:56:60: undefined: None

    /tmp/tmpbjll380r_test.go:57:61: undefined: None

    /tmp/tmpbjll380r_test.go:58:78: undefined: None

    /tmp/tmpbjll380r_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, num := range lst {\n        if num < 0\
    \ {\n            if !largestNegativeSet {\n                largestNegative = num\n\
    \                largestNegativeSet = true\n            } else if num > largestNegative\
    \ {\n                largestNegative = num\n            }\n        } else if num\
    \ > 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = num\n                smallestPositiveSet = true\n            } else if num\
    \ < smallestPositive {\n                smallestPositive = num\n            }\n\
    \        }\n    }\n    if !largestNegativeSet {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveSet {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ae4a0v7_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp6ae4a0v7_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp6ae4a0v7_test.go:57:76: undefined: None

    /tmp/tmp6ae4a0v7_test.go:58:79: undefined: None

    /tmp/tmp6ae4a0v7_test.go:62:60: undefined: None

    /tmp/tmp6ae4a0v7_test.go:63:61: undefined: None

    /tmp/tmp6ae4a0v7_test.go:64:78: undefined: None

    /tmp/tmp6ae4a0v7_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largest_negative\
    \ int = 0\n    var smallest_positive int = 0\n    var largest_negative_exists\
    \ bool = false\n    var smallest_positive_exists bool = false\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if largest_negative_exists {\n\
    \                if v > largest_negative {\n                    largest_negative\
    \ = v\n                }\n            } else {\n                largest_negative\
    \ = v\n                largest_negative_exists = true\n            }\n       \
    \ } else if v > 0 {\n            if smallest_positive_exists {\n             \
    \   if v < smallest_positive {\n                    smallest_positive = v\n  \
    \              }\n            } else {\n                smallest_positive = v\n\
    \                smallest_positive_exists = true\n            }\n        }\n \
    \   }\n    if !largest_negative_exists {\n        largest_negative = nil\n   \
    \ }\n    if !smallest_positive_exists {\n        smallest_positive = nil\n   \
    \ }\n    return []interface{}{largest_negative, smallest_positive}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj1rqvml_test.go:46:28: cannot use nil as int value in assignment

    /tmp/tmptj1rqvml_test.go:49:29: cannot use nil as int value in assignment

    /tmp/tmptj1rqvml_test.go:61:76: undefined: None

    /tmp/tmptj1rqvml_test.go:62:79: undefined: None

    /tmp/tmptj1rqvml_test.go:66:60: undefined: None

    /tmp/tmptj1rqvml_test.go:67:61: undefined: None

    /tmp/tmptj1rqvml_test.go:68:78: undefined: None

    /tmp/tmptj1rqvml_test.go:69:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, value := range lst {\n        if value\
    \ < 0 {\n            if largestNegativeFound == false {\n                largestNegative\
    \ = value\n                largestNegativeFound = true\n            } else if\
    \ value > largestNegative {\n                largestNegative = value\n       \
    \     }\n        } else if value > 0 {\n            if smallestPositiveFound ==\
    \ false {\n                smallestPositive = value\n                smallestPositiveFound\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n    if largestNegativeFound == false\
    \ {\n        largestNegative = 0\n    }\n    if smallestPositiveFound == false\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_cqvidud_test.go:57:76: undefined: None

    /tmp/tmp_cqvidud_test.go:58:79: undefined: None

    /tmp/tmp_cqvidud_test.go:62:60: undefined: None

    /tmp/tmp_cqvidud_test.go:63:61: undefined: None

    /tmp/tmp_cqvidud_test.go:64:78: undefined: None

    /tmp/tmp_cqvidud_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, i := range lst {\n        if i < 0 {\n            if !largestNegativeSet\
    \ || i > largestNegative {\n                largestNegative = i\n            \
    \    largestNegativeSet = true\n            }\n        } else if i > 0 {\n   \
    \         if !smallestPositiveSet || i < smallestPositive {\n                smallestPositive\
    \ = i\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    var largestNegativeInterface, smallestPositiveInterface interface{}\n\
    \    if largestNegativeSet {\n        largestNegativeInterface = largestNegative\n\
    \    } else {\n        largestNegativeInterface = nil\n    }\n    if smallestPositiveSet\
    \ {\n        smallestPositiveInterface = smallestPositive\n    } else {\n    \
    \    smallestPositiveInterface = nil\n    }\n\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph76gq2us_test.go:59:76: undefined: None

    /tmp/tmph76gq2us_test.go:60:79: undefined: None

    /tmp/tmph76gq2us_test.go:64:60: undefined: None

    /tmp/tmph76gq2us_test.go:65:61: undefined: None

    /tmp/tmph76gq2us_test.go:66:78: undefined: None

    /tmp/tmph76gq2us_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, n := range lst {\n        if n < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = n\n \
    \               largestNegativeSet = true\n            } else if n > largestNegative\
    \ {\n                largestNegative = n\n            }\n        } else if n >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = n\n                smallestPositiveSet = true\n            } else if n < smallestPositive\
    \ {\n                smallestPositive = n\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = nil\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgmkvd6ac_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpgmkvd6ac_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpgmkvd6ac_test.go:57:76: undefined: None

    /tmp/tmpgmkvd6ac_test.go:58:79: undefined: None

    /tmp/tmpgmkvd6ac_test.go:62:60: undefined: None

    /tmp/tmpgmkvd6ac_test.go:63:61: undefined: None

    /tmp/tmpgmkvd6ac_test.go:64:78: undefined: None

    /tmp/tmpgmkvd6ac_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = nil\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7zshm8s_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:57:76: undefined: None

    /tmp/tmpd7zshm8s_test.go:58:79: undefined: None

    /tmp/tmpd7zshm8s_test.go:62:60: undefined: None

    /tmp/tmpd7zshm8s_test.go:63:61: undefined: None

    /tmp/tmpd7zshm8s_test.go:64:78: undefined: None

    /tmp/tmpd7zshm8s_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = i\n\
    \                largestNegativeFound = true\n            } else if i > largestNegative\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = i\n                smallestPositiveFound = true\n            } else if i <\
    \ smallestPositive {\n                smallestPositive = i\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfd63en37_test.go:57:76: undefined: None

    /tmp/tmpfd63en37_test.go:58:79: undefined: None

    /tmp/tmpfd63en37_test.go:62:60: undefined: None

    /tmp/tmpfd63en37_test.go:63:61: undefined: None

    /tmp/tmpfd63en37_test.go:64:78: undefined: None

    /tmp/tmpfd63en37_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeSet\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            }\n        } else\
    \ if v > 0 {\n            if smallestPositiveSet {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwikxyzpy_test.go:59:76: undefined: None

    /tmp/tmpwikxyzpy_test.go:60:79: undefined: None

    /tmp/tmpwikxyzpy_test.go:64:60: undefined: None

    /tmp/tmpwikxyzpy_test.go:65:61: undefined: None

    /tmp/tmpwikxyzpy_test.go:66:78: undefined: None

    /tmp/tmpwikxyzpy_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    var largestNegativeInterface, smallestPositiveInterface interface{}\n\
    \    if largestNegativeSet {\n        largestNegativeInterface = largestNegative\n\
    \    }\n    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    }\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3yr5wmt_test.go:52:76: undefined: None

    /tmp/tmpc3yr5wmt_test.go:53:79: undefined: None

    /tmp/tmpc3yr5wmt_test.go:57:60: undefined: None

    /tmp/tmpc3yr5wmt_test.go:58:61: undefined: None

    /tmp/tmpc3yr5wmt_test.go:59:78: undefined: None

    /tmp/tmpc3yr5wmt_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a,\
    \ b interface{}\n    a = nil\n    b = nil\n    for _, v := range lst {\n     \
    \   if v < 0 {\n            if a == nil {\n                a = v\n           \
    \ } else if v > a {\n                a = v\n            }\n        } else if v\
    \ > 0 {\n            if b == nil {\n                b = v\n            } else\
    \ if v < b {\n                b = v\n            }\n        }\n    }\n    return\
    \ []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx818aj6a_test.go:27:27: invalid operation: v > a (operator > not defined
    on interface)

    /tmp/tmpx818aj6a_test.go:33:27: invalid operation: v < b (operator < not defined
    on interface)

    /tmp/tmpx818aj6a_test.go:48:76: undefined: None

    /tmp/tmpx818aj6a_test.go:49:79: undefined: None

    /tmp/tmpx818aj6a_test.go:53:60: undefined: None

    /tmp/tmpx818aj6a_test.go:54:61: undefined: None

    /tmp/tmpx818aj6a_test.go:55:78: undefined: None

    /tmp/tmpx818aj6a_test.go:56:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy5cr32ri_test.go:45:76: undefined: None

    /tmp/tmpy5cr32ri_test.go:46:79: undefined: None

    /tmp/tmpy5cr32ri_test.go:50:60: undefined: None

    /tmp/tmpy5cr32ri_test.go:51:61: undefined: None

    /tmp/tmpy5cr32ri_test.go:52:78: undefined: None

    /tmp/tmpy5cr32ri_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var foundNegative bool\n    var foundPositive\
    \ bool\n    for _, n := range lst {\n        if n < 0 {\n            if !foundNegative\
    \ || n > largestNegative {\n                largestNegative = n\n            \
    \    foundNegative = true\n            }\n        } else if n > 0 {\n        \
    \    if !foundPositive || n < smallestPositive {\n                smallestPositive\
    \ = n\n                foundPositive = true\n            }\n        }\n    }\n\
    \    if !foundNegative {\n        largestNegative = 0\n    }\n    if !foundPositive\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmp7vr24u_test.go:53:76: undefined: None

    /tmp/tmpmp7vr24u_test.go:54:79: undefined: None

    /tmp/tmpmp7vr24u_test.go:58:60: undefined: None

    /tmp/tmpmp7vr24u_test.go:59:61: undefined: None

    /tmp/tmpmp7vr24u_test.go:60:78: undefined: None

    /tmp/tmpmp7vr24u_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largest_negative\
    \ int\n    var smallest_positive int\n    var largest_negative_found bool\n  \
    \  var smallest_positive_found bool\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            if !largest_negative_found {\n                largest_negative\
    \ = v\n                largest_negative_found = true\n            } else if v\
    \ > largest_negative {\n                largest_negative = v\n            }\n\
    \        } else if v > 0 {\n            if !smallest_positive_found {\n      \
    \          smallest_positive = v\n                smallest_positive_found = true\n\
    \            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if !largest_negative_found {\n   \
    \     largest_negative = nil\n    }\n    if !smallest_positive_found {\n     \
    \   smallest_positive = nil\n    }\n    return []interface{}{largest_negative,\
    \ smallest_positive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1xpyd18_test.go:42:28: cannot use nil as int value in assignment

    /tmp/tmpw1xpyd18_test.go:45:29: cannot use nil as int value in assignment

    /tmp/tmpw1xpyd18_test.go:57:76: undefined: None

    /tmp/tmpw1xpyd18_test.go:58:79: undefined: None

    /tmp/tmpw1xpyd18_test.go:62:60: undefined: None

    /tmp/tmpw1xpyd18_test.go:63:61: undefined: None

    /tmp/tmpw1xpyd18_test.go:64:78: undefined: None

    /tmp/tmpw1xpyd18_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65n_5z73_test.go:55:76: undefined: None

    /tmp/tmp65n_5z73_test.go:56:79: undefined: None

    /tmp/tmp65n_5z73_test.go:60:60: undefined: None

    /tmp/tmp65n_5z73_test.go:61:61: undefined: None

    /tmp/tmp65n_5z73_test.go:62:78: undefined: None

    /tmp/tmp65n_5z73_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFlag bool\n    var\
    \ smallestPositiveFlag bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFlag {\n                largestNegative = v\n\
    \                largestNegativeFlag = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFlag {\n                smallestPositive\
    \ = v\n                smallestPositiveFlag = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFlag {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFlag {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplo5shg5m_test.go:57:76: undefined: None

    /tmp/tmplo5shg5m_test.go:58:79: undefined: None

    /tmp/tmplo5shg5m_test.go:62:60: undefined: None

    /tmp/tmplo5shg5m_test.go:63:61: undefined: None

    /tmp/tmplo5shg5m_test.go:64:78: undefined: None

    /tmp/tmplo5shg5m_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeFound == false {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if smallestPositiveFound == false {\n    \
    \            smallestPositive = v\n                smallestPositiveFound = true\n\
    \            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if largestNegativeFound == false {\n\
    \        largestNegative = nil\n    }\n    if smallestPositiveFound == false {\n\
    \        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpilbg0yz0_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpilbg0yz0_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpilbg0yz0_test.go:57:76: undefined: None

    /tmp/tmpilbg0yz0_test.go:58:79: undefined: None

    /tmp/tmpilbg0yz0_test.go:62:60: undefined: None

    /tmp/tmpilbg0yz0_test.go:63:61: undefined: None

    /tmp/tmpilbg0yz0_test.go:64:78: undefined: None

    /tmp/tmpilbg0yz0_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeExists {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            }\n        } else if v > 0 {\n            if smallestPositiveExists\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            }\n        }\n\
    \    }\n    if !largestNegativeExists {\n        largestNegative = 0\n    }\n\
    \    if !smallestPositiveExists {\n        smallestPositive = 0\n    }\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1564kwcy_test.go:61:76: undefined: None

    /tmp/tmp1564kwcy_test.go:62:79: undefined: None

    /tmp/tmp1564kwcy_test.go:66:60: undefined: None

    /tmp/tmp1564kwcy_test.go:67:61: undefined: None

    /tmp/tmp1564kwcy_test.go:68:78: undefined: None

    /tmp/tmp1564kwcy_test.go:69:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    var largestNegativeInterface, smallestPositiveInterface interface{}\n\
    \    if largestNegativeSet {\n        largestNegativeInterface = largestNegative\n\
    \    }\n    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    }\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3yr5wmt_test.go:52:76: undefined: None

    /tmp/tmpc3yr5wmt_test.go:53:79: undefined: None

    /tmp/tmpc3yr5wmt_test.go:57:60: undefined: None

    /tmp/tmpc3yr5wmt_test.go:58:61: undefined: None

    /tmp/tmpc3yr5wmt_test.go:59:78: undefined: None

    /tmp/tmpc3yr5wmt_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, val := range lst {\n        if val <\
    \ 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = val\n                largestNegativeFound = true\n            } else if val\
    \ > largestNegative {\n                largestNegative = val\n            }\n\
    \        } else if val > 0 {\n            if !smallestPositiveFound {\n      \
    \          smallestPositive = val\n                smallestPositiveFound = true\n\
    \            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda_hnj3w_test.go:57:76: undefined: None

    /tmp/tmpda_hnj3w_test.go:58:79: undefined: None

    /tmp/tmpda_hnj3w_test.go:62:60: undefined: None

    /tmp/tmpda_hnj3w_test.go:63:61: undefined: None

    /tmp/tmpda_hnj3w_test.go:64:78: undefined: None

    /tmp/tmpda_hnj3w_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = nil\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7zshm8s_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:57:76: undefined: None

    /tmp/tmpd7zshm8s_test.go:58:79: undefined: None

    /tmp/tmpd7zshm8s_test.go:62:60: undefined: None

    /tmp/tmpd7zshm8s_test.go:63:61: undefined: None

    /tmp/tmpd7zshm8s_test.go:64:78: undefined: None

    /tmp/tmpd7zshm8s_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = i\n\
    \                largestNegativeFound = true\n            } else if i > largestNegative\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = i\n                smallestPositiveFound = true\n            } else if i <\
    \ smallestPositive {\n                smallestPositive = i\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfd63en37_test.go:57:76: undefined: None

    /tmp/tmpfd63en37_test.go:58:79: undefined: None

    /tmp/tmpfd63en37_test.go:62:60: undefined: None

    /tmp/tmpfd63en37_test.go:63:61: undefined: None

    /tmp/tmpfd63en37_test.go:64:78: undefined: None

    /tmp/tmpfd63en37_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeExists {\n                largestNegative = v\n\
    \                largestNegativeExists = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveExists {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            } else if v\
    \ < smallestPositive {\n                smallestPositive = v\n            }\n\
    \        }\n    }\n    if !largestNegativeExists {\n        largestNegative =\
    \ 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive = 0\n \
    \   }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoh_3lr_5_test.go:57:76: undefined: None

    /tmp/tmpoh_3lr_5_test.go:58:79: undefined: None

    /tmp/tmpoh_3lr_5_test.go:62:60: undefined: None

    /tmp/tmpoh_3lr_5_test.go:63:61: undefined: None

    /tmp/tmpoh_3lr_5_test.go:64:78: undefined: None

    /tmp/tmpoh_3lr_5_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, n := range lst {\n        if n < 0 {\n            if !largestNegativeExists\
    \ || n > largestNegative {\n                largestNegative = n\n            \
    \    largestNegativeExists = true\n            }\n        } else if n > 0 {\n\
    \            if !smallestPositiveExists || n < smallestPositive {\n          \
    \      smallestPositive = n\n                smallestPositiveExists = true\n \
    \           }\n        }\n    }\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    }\n    if smallestPositiveExists {\n        smallestPositiveInterface\
    \ = smallestPositive\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcb8mw4e7_test.go:52:76: undefined: None

    /tmp/tmpcb8mw4e7_test.go:53:79: undefined: None

    /tmp/tmpcb8mw4e7_test.go:57:60: undefined: None

    /tmp/tmpcb8mw4e7_test.go:58:61: undefined: None

    /tmp/tmpcb8mw4e7_test.go:59:78: undefined: None

    /tmp/tmpcb8mw4e7_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = nil\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7zshm8s_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:57:76: undefined: None

    /tmp/tmpd7zshm8s_test.go:58:79: undefined: None

    /tmp/tmpd7zshm8s_test.go:62:60: undefined: None

    /tmp/tmpd7zshm8s_test.go:63:61: undefined: None

    /tmp/tmpd7zshm8s_test.go:64:78: undefined: None

    /tmp/tmpd7zshm8s_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, num := range lst {\n        if num <\
    \ 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = num\n                largestNegativeFound = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveFound {\n      \
    \          smallestPositive = num\n                smallestPositiveFound = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppt5p3rpa_test.go:57:76: undefined: None

    /tmp/tmppt5p3rpa_test.go:58:79: undefined: None

    /tmp/tmppt5p3rpa_test.go:62:60: undefined: None

    /tmp/tmppt5p3rpa_test.go:63:61: undefined: None

    /tmp/tmppt5p3rpa_test.go:64:78: undefined: None

    /tmp/tmppt5p3rpa_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = nil\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7zshm8s_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:57:76: undefined: None

    /tmp/tmpd7zshm8s_test.go:58:79: undefined: None

    /tmp/tmpd7zshm8s_test.go:62:60: undefined: None

    /tmp/tmpd7zshm8s_test.go:63:61: undefined: None

    /tmp/tmpd7zshm8s_test.go:64:78: undefined: None

    /tmp/tmpd7zshm8s_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65n_5z73_test.go:55:76: undefined: None

    /tmp/tmp65n_5z73_test.go:56:79: undefined: None

    /tmp/tmp65n_5z73_test.go:60:60: undefined: None

    /tmp/tmp65n_5z73_test.go:61:61: undefined: None

    /tmp/tmp65n_5z73_test.go:62:78: undefined: None

    /tmp/tmp65n_5z73_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, num := range lst {\n        if num <\
    \ 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = num\n                largestNegativeFound = true\n            } else if num\
    \ > largestNegative {\n                largestNegative = num\n            }\n\
    \        } else if num > 0 {\n            if !smallestPositiveFound {\n      \
    \          smallestPositive = num\n                smallestPositiveFound = true\n\
    \            } else if num < smallestPositive {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    if !largestNegativeFound {\n   \
    \     largestNegative = nil\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = nil\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt5_1kykh_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpt5_1kykh_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpt5_1kykh_test.go:57:76: undefined: None

    /tmp/tmpt5_1kykh_test.go:58:79: undefined: None

    /tmp/tmpt5_1kykh_test.go:62:60: undefined: None

    /tmp/tmpt5_1kykh_test.go:63:61: undefined: None

    /tmp/tmpt5_1kykh_test.go:64:78: undefined: None

    /tmp/tmpt5_1kykh_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var a,\
    \ b interface{}\n    a = nil\n    b = nil\n    for _, v := range lst {\n     \
    \   if v < 0 {\n            if a == nil {\n                a = v\n           \
    \ } else if v > a.(int) {\n                a = v\n            }\n        } else\
    \ if v > 0 {\n            if b == nil {\n                b = v\n            }\
    \ else if v < b.(int) {\n                b = v\n            }\n        }\n   \
    \ }\n    return []interface{}{a, b}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdeg1x18q_test.go:48:76: undefined: None

    /tmp/tmpdeg1x18q_test.go:49:79: undefined: None

    /tmp/tmpdeg1x18q_test.go:53:60: undefined: None

    /tmp/tmpdeg1x18q_test.go:54:61: undefined: None

    /tmp/tmpdeg1x18q_test.go:55:78: undefined: None

    /tmp/tmpdeg1x18q_test.go:56:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65n_5z73_test.go:55:76: undefined: None

    /tmp/tmp65n_5z73_test.go:56:79: undefined: None

    /tmp/tmp65n_5z73_test.go:60:60: undefined: None

    /tmp/tmp65n_5z73_test.go:61:61: undefined: None

    /tmp/tmp65n_5z73_test.go:62:78: undefined: None

    /tmp/tmp65n_5z73_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, val := range lst {\n        if val < 0 {\n            if !largestNegativeSet\
    \ || val > largestNegative {\n                largestNegative = val\n        \
    \        largestNegativeSet = true\n            }\n        } else if val > 0 {\n\
    \            if !smallestPositiveSet || val < smallestPositive {\n           \
    \     smallestPositive = val\n                smallestPositiveSet = true\n   \
    \         }\n        }\n    }\n    if !largestNegativeSet {\n        largestNegative\
    \ = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive = 0\n  \
    \  }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ibjkam2_test.go:51:76: undefined: None

    /tmp/tmp0ibjkam2_test.go:52:79: undefined: None

    /tmp/tmp0ibjkam2_test.go:56:60: undefined: None

    /tmp/tmp0ibjkam2_test.go:57:61: undefined: None

    /tmp/tmp0ibjkam2_test.go:58:78: undefined: None

    /tmp/tmp0ibjkam2_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largest_negative,\
    \ smallest_positive int\n    var largest_negative_set, smallest_positive_set bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largest_negative_set\
    \ {\n                largest_negative = v\n                largest_negative_set\
    \ = true\n            } else if v > largest_negative {\n                largest_negative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallest_positive_set\
    \ {\n                smallest_positive = v\n                smallest_positive_set\
    \ = true\n            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if !largest_negative_set {\n     \
    \   largest_negative = 0\n    }\n    if !smallest_positive_set {\n        smallest_positive\
    \ = 0\n    }\n    return []interface{}{largest_negative, smallest_positive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfw3nz62z_test.go:55:76: undefined: None

    /tmp/tmpfw3nz62z_test.go:56:79: undefined: None

    /tmp/tmpfw3nz62z_test.go:60:60: undefined: None

    /tmp/tmpfw3nz62z_test.go:61:61: undefined: None

    /tmp/tmpfw3nz62z_test.go:62:78: undefined: None

    /tmp/tmpfw3nz62z_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65n_5z73_test.go:55:76: undefined: None

    /tmp/tmp65n_5z73_test.go:56:79: undefined: None

    /tmp/tmp65n_5z73_test.go:60:60: undefined: None

    /tmp/tmp65n_5z73_test.go:61:61: undefined: None

    /tmp/tmp65n_5z73_test.go:62:78: undefined: None

    /tmp/tmp65n_5z73_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = nil\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = nil\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7zshm8s_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpd7zshm8s_test.go:57:76: undefined: None

    /tmp/tmpd7zshm8s_test.go:58:79: undefined: None

    /tmp/tmpd7zshm8s_test.go:62:60: undefined: None

    /tmp/tmpd7zshm8s_test.go:63:61: undefined: None

    /tmp/tmpd7zshm8s_test.go:64:78: undefined: None

    /tmp/tmpd7zshm8s_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largest_negative\
    \ int\n    var smallest_positive int\n    var largest_negative_found bool\n  \
    \  var smallest_positive_found bool\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            if !largest_negative_found {\n                largest_negative\
    \ = v\n                largest_negative_found = true\n            } else if v\
    \ > largest_negative {\n                largest_negative = v\n            }\n\
    \        } else if v > 0 {\n            if !smallest_positive_found {\n      \
    \          smallest_positive = v\n                smallest_positive_found = true\n\
    \            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if !largest_negative_found {\n   \
    \     largest_negative = nil\n    }\n    if !smallest_positive_found {\n     \
    \   smallest_positive = nil\n    }\n    return []interface{}{largest_negative,\
    \ smallest_positive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1xpyd18_test.go:42:28: cannot use nil as int value in assignment

    /tmp/tmpw1xpyd18_test.go:45:29: cannot use nil as int value in assignment

    /tmp/tmpw1xpyd18_test.go:57:76: undefined: None

    /tmp/tmpw1xpyd18_test.go:58:79: undefined: None

    /tmp/tmpw1xpyd18_test.go:62:60: undefined: None

    /tmp/tmpw1xpyd18_test.go:63:61: undefined: None

    /tmp/tmpw1xpyd18_test.go:64:78: undefined: None

    /tmp/tmpw1xpyd18_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, val := range lst {\n        if val <\
    \ 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = val\n                largestNegativeFound = true\n            } else if val\
    \ > largestNegative {\n                largestNegative = val\n            }\n\
    \        } else if val > 0 {\n            if !smallestPositiveFound {\n      \
    \          smallestPositive = val\n                smallestPositiveFound = true\n\
    \            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda_hnj3w_test.go:57:76: undefined: None

    /tmp/tmpda_hnj3w_test.go:58:79: undefined: None

    /tmp/tmpda_hnj3w_test.go:62:60: undefined: None

    /tmp/tmpda_hnj3w_test.go:63:61: undefined: None

    /tmp/tmpda_hnj3w_test.go:64:78: undefined: None

    /tmp/tmpda_hnj3w_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    var largestNegativeInterface, smallestPositiveInterface\
    \ interface{}\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n    if smallestPositiveExists {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5swwo_na_test.go:63:76: undefined: None

    /tmp/tmp5swwo_na_test.go:64:79: undefined: None

    /tmp/tmp5swwo_na_test.go:68:60: undefined: None

    /tmp/tmp5swwo_na_test.go:69:61: undefined: None

    /tmp/tmp5swwo_na_test.go:70:78: undefined: None

    /tmp/tmp5swwo_na_test.go:71:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeFound == false {\n                largestNegative\
    \ = v\n                largestNegativeFound = true\n            } else if v >\
    \ largestNegative {\n                largestNegative = v\n            }\n    \
    \    } else if v > 0 {\n            if smallestPositiveFound == false {\n    \
    \            smallestPositive = v\n                smallestPositiveFound = true\n\
    \            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    var largestNegativeInterface interface{}\n\
    \    var smallestPositiveInterface interface{}\n    if largestNegativeFound {\n\
    \        largestNegativeInterface = largestNegative\n    } else {\n        largestNegativeInterface\
    \ = nil\n    }\n    if smallestPositiveFound {\n        smallestPositiveInterface\
    \ = smallestPositive\n    } else {\n        smallestPositiveInterface = nil\n\
    \    }\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_sxf6mo_test.go:63:76: undefined: None

    /tmp/tmp7_sxf6mo_test.go:64:79: undefined: None

    /tmp/tmp7_sxf6mo_test.go:68:60: undefined: None

    /tmp/tmp7_sxf6mo_test.go:69:61: undefined: None

    /tmp/tmp7_sxf6mo_test.go:70:78: undefined: None

    /tmp/tmp7_sxf6mo_test.go:71:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, value := range lst {\n        if value\
    \ < 0 {\n            if largestNegativeFound == false {\n                largestNegative\
    \ = value\n                largestNegativeFound = true\n            } else if\
    \ value > largestNegative {\n                largestNegative = value\n       \
    \     }\n        } else if value > 0 {\n            if smallestPositiveFound ==\
    \ false {\n                smallestPositive = value\n                smallestPositiveFound\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n    if largestNegativeFound == false\
    \ {\n        largestNegative = 0\n    }\n    if smallestPositiveFound == false\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_cqvidud_test.go:57:76: undefined: None

    /tmp/tmp_cqvidud_test.go:58:79: undefined: None

    /tmp/tmp_cqvidud_test.go:62:60: undefined: None

    /tmp/tmp_cqvidud_test.go:63:61: undefined: None

    /tmp/tmp_cqvidud_test.go:64:78: undefined: None

    /tmp/tmp_cqvidud_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplt96wlmp_test.go:55:76: undefined: None

    /tmp/tmplt96wlmp_test.go:56:79: undefined: None

    /tmp/tmplt96wlmp_test.go:60:60: undefined: None

    /tmp/tmplt96wlmp_test.go:61:61: undefined: None

    /tmp/tmplt96wlmp_test.go:62:78: undefined: None

    /tmp/tmplt96wlmp_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, num := range lst {\n        if num < 0 {\n            if !largestNegativeSet\
    \ || num > largestNegative {\n                largestNegative = num\n        \
    \        largestNegativeSet = true\n            }\n        } else if num > 0 {\n\
    \            if !smallestPositiveSet || num < smallestPositive {\n           \
    \     smallestPositive = num\n                smallestPositiveSet = true\n   \
    \         }\n        }\n    }\n    if !largestNegativeSet {\n        largestNegative\
    \ = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive = 0\n  \
    \  }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbjll380r_test.go:51:76: undefined: None

    /tmp/tmpbjll380r_test.go:52:79: undefined: None

    /tmp/tmpbjll380r_test.go:56:60: undefined: None

    /tmp/tmpbjll380r_test.go:57:61: undefined: None

    /tmp/tmpbjll380r_test.go:58:78: undefined: None

    /tmp/tmpbjll380r_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, value := range lst {\n        if value\
    \ < 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = value\n                largestNegativeFound = true\n            } else if\
    \ value > largestNegative {\n                largestNegative = value\n       \
    \     }\n        } else if value > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = value\n                smallestPositiveFound\
    \ = true\n            } else if value < smallestPositive {\n                smallestPositive\
    \ = value\n            }\n        }\n    }\n    if !largestNegativeFound {\n \
    \       largestNegative = nil\n    }\n    if !smallestPositiveFound {\n      \
    \  smallestPositive = nil\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphe1yxnlh_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmphe1yxnlh_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmphe1yxnlh_test.go:57:76: undefined: None

    /tmp/tmphe1yxnlh_test.go:58:79: undefined: None

    /tmp/tmphe1yxnlh_test.go:62:60: undefined: None

    /tmp/tmphe1yxnlh_test.go:63:61: undefined: None

    /tmp/tmphe1yxnlh_test.go:64:78: undefined: None

    /tmp/tmphe1yxnlh_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    var largestNegativeInterface, smallestPositiveInterface interface{}\n\
    \    if largestNegativeSet {\n        largestNegativeInterface = largestNegative\n\
    \    }\n    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    }\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3yr5wmt_test.go:52:76: undefined: None

    /tmp/tmpc3yr5wmt_test.go:53:79: undefined: None

    /tmp/tmpc3yr5wmt_test.go:57:60: undefined: None

    /tmp/tmpc3yr5wmt_test.go:58:61: undefined: None

    /tmp/tmpc3yr5wmt_test.go:59:78: undefined: None

    /tmp/tmpc3yr5wmt_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \    for _, num := range lst {\n        if num < 0 {\n            if largestNegativeFound\
    \ {\n                if num > largestNegative {\n                    largestNegative\
    \ = num\n                }\n            } else {\n                largestNegative\
    \ = num\n                largestNegativeFound = true\n            }\n        }\
    \ else if num > 0 {\n            if smallestPositiveFound {\n                if\
    \ num < smallestPositive {\n                    smallestPositive = num\n     \
    \           }\n            } else {\n                smallestPositive = num\n\
    \                smallestPositiveFound = true\n            }\n        }\n    }\n\
    \    if !largestNegativeFound {\n        largestNegative = 0\n    }\n    if !smallestPositiveFound\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnit6i3gh_test.go:59:76: undefined: None

    /tmp/tmpnit6i3gh_test.go:60:79: undefined: None

    /tmp/tmpnit6i3gh_test.go:64:60: undefined: None

    /tmp/tmpnit6i3gh_test.go:65:61: undefined: None

    /tmp/tmpnit6i3gh_test.go:66:78: undefined: None

    /tmp/tmpnit6i3gh_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeSet {\n                if v > largestNegative {\n\
    \                    largestNegative = v\n                }\n            } else\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if smallestPositiveSet\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnw9n7xxl_test.go:61:76: undefined: None

    /tmp/tmpnw9n7xxl_test.go:62:79: undefined: None

    /tmp/tmpnw9n7xxl_test.go:66:60: undefined: None

    /tmp/tmpnw9n7xxl_test.go:67:61: undefined: None

    /tmp/tmpnw9n7xxl_test.go:68:78: undefined: None

    /tmp/tmpnw9n7xxl_test.go:69:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n    if largestNegativeSet {\n        largestNegativeInterface =\
    \ largestNegative\n    } else {\n        largestNegativeInterface = nil\n    }\n\
    \    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe1rkc_98_test.go:63:76: undefined: None

    /tmp/tmpe1rkc_98_test.go:64:79: undefined: None

    /tmp/tmpe1rkc_98_test.go:68:60: undefined: None

    /tmp/tmpe1rkc_98_test.go:69:61: undefined: None

    /tmp/tmpe1rkc_98_test.go:70:78: undefined: None

    /tmp/tmpe1rkc_98_test.go:71:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuv72hbsw_test.go:51:76: undefined: None

    /tmp/tmpuv72hbsw_test.go:52:79: undefined: None

    /tmp/tmpuv72hbsw_test.go:56:60: undefined: None

    /tmp/tmpuv72hbsw_test.go:57:61: undefined: None

    /tmp/tmpuv72hbsw_test.go:58:78: undefined: None

    /tmp/tmpuv72hbsw_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largest_negative,\
    \ smallest_positive int\n    var largest_negative_set, smallest_positive_set bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largest_negative_set\
    \ {\n                largest_negative = v\n                largest_negative_set\
    \ = true\n            } else if v > largest_negative {\n                largest_negative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallest_positive_set\
    \ {\n                smallest_positive = v\n                smallest_positive_set\
    \ = true\n            } else if v < smallest_positive {\n                smallest_positive\
    \ = v\n            }\n        }\n    }\n    if !largest_negative_set {\n     \
    \   largest_negative = 0\n    }\n    if !smallest_positive_set {\n        smallest_positive\
    \ = 0\n    }\n    return []interface{}{largest_negative, smallest_positive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfw3nz62z_test.go:55:76: undefined: None

    /tmp/tmpfw3nz62z_test.go:56:79: undefined: None

    /tmp/tmpfw3nz62z_test.go:60:60: undefined: None

    /tmp/tmpfw3nz62z_test.go:61:61: undefined: None

    /tmp/tmpfw3nz62z_test.go:62:78: undefined: None

    /tmp/tmpfw3nz62z_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, val := range lst {\n        if val <\
    \ 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = val\n                largestNegativeFound = true\n            } else if val\
    \ > largestNegative {\n                largestNegative = val\n            }\n\
    \        } else if val > 0 {\n            if !smallestPositiveFound {\n      \
    \          smallestPositive = val\n                smallestPositiveFound = true\n\
    \            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda_hnj3w_test.go:57:76: undefined: None

    /tmp/tmpda_hnj3w_test.go:58:79: undefined: None

    /tmp/tmpda_hnj3w_test.go:62:60: undefined: None

    /tmp/tmpda_hnj3w_test.go:63:61: undefined: None

    /tmp/tmpda_hnj3w_test.go:64:78: undefined: None

    /tmp/tmpda_hnj3w_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeSet\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            }\n        } else\
    \ if v > 0 {\n            if smallestPositiveSet {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = nil\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = nil\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxp775z6k_test.go:44:27: cannot use nil as int value in assignment

    /tmp/tmpxp775z6k_test.go:47:28: cannot use nil as int value in assignment

    /tmp/tmpxp775z6k_test.go:59:76: undefined: None

    /tmp/tmpxp775z6k_test.go:60:79: undefined: None

    /tmp/tmpxp775z6k_test.go:64:60: undefined: None

    /tmp/tmpxp775z6k_test.go:65:61: undefined: None

    /tmp/tmpxp775z6k_test.go:66:78: undefined: None

    /tmp/tmpxp775z6k_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplt96wlmp_test.go:55:76: undefined: None

    /tmp/tmplt96wlmp_test.go:56:79: undefined: None

    /tmp/tmplt96wlmp_test.go:60:60: undefined: None

    /tmp/tmplt96wlmp_test.go:61:61: undefined: None

    /tmp/tmplt96wlmp_test.go:62:78: undefined: None

    /tmp/tmplt96wlmp_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplt96wlmp_test.go:55:76: undefined: None

    /tmp/tmplt96wlmp_test.go:56:79: undefined: None

    /tmp/tmplt96wlmp_test.go:60:60: undefined: None

    /tmp/tmplt96wlmp_test.go:61:61: undefined: None

    /tmp/tmplt96wlmp_test.go:62:78: undefined: None

    /tmp/tmplt96wlmp_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n \
    \   if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n\n    return\
    \ []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkx2ydvoh_test.go:54:76: undefined: None

    /tmp/tmpkx2ydvoh_test.go:55:79: undefined: None

    /tmp/tmpkx2ydvoh_test.go:59:60: undefined: None

    /tmp/tmpkx2ydvoh_test.go:60:61: undefined: None

    /tmp/tmpkx2ydvoh_test.go:61:78: undefined: None

    /tmp/tmpkx2ydvoh_test.go:62:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = i\n\
    \                largestNegativeFound = true\n            } else if i > largestNegative\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = i\n                smallestPositiveFound = true\n            } else if i <\
    \ smallestPositive {\n                smallestPositive = i\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hv75emp_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:57:76: undefined: None

    /tmp/tmp2hv75emp_test.go:58:79: undefined: None

    /tmp/tmp2hv75emp_test.go:62:60: undefined: None

    /tmp/tmp2hv75emp_test.go:63:61: undefined: None

    /tmp/tmp2hv75emp_test.go:64:78: undefined: None

    /tmp/tmp2hv75emp_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFlag bool\n    var\
    \ smallestPositiveFlag bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFlag {\n                largestNegative = v\n\
    \                largestNegativeFlag = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFlag {\n                smallestPositive\
    \ = v\n                smallestPositiveFlag = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFlag {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFlag {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmimjtu8o_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmpmimjtu8o_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmpmimjtu8o_test.go:57:76: undefined: None

    /tmp/tmpmimjtu8o_test.go:58:79: undefined: None

    /tmp/tmpmimjtu8o_test.go:62:60: undefined: None

    /tmp/tmpmimjtu8o_test.go:63:61: undefined: None

    /tmp/tmpmimjtu8o_test.go:64:78: undefined: None

    /tmp/tmpmimjtu8o_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largest,\
    \ smallest int\n    var largest_set, smallest_set bool\n    for _, num := range\
    \ lst {\n        if num < 0 {\n            if !largest_set || num > largest {\n\
    \                largest = num\n                largest_set = true\n         \
    \   }\n        } else if num > 0 {\n            if !smallest_set || num < smallest\
    \ {\n                smallest = num\n                smallest_set = true\n   \
    \         }\n        }\n    }\n    var result []interface{}\n    if largest_set\
    \ {\n        result = append(result, largest)\n    } else {\n        result =\
    \ append(result, nil)\n    }\n    if smallest_set {\n        result = append(result,\
    \ smallest)\n    } else {\n        result = append(result, nil)\n    }\n    return\
    \ result\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6l4hfj7n_test.go:56:76: undefined: None

    /tmp/tmp6l4hfj7n_test.go:57:79: undefined: None

    /tmp/tmp6l4hfj7n_test.go:61:60: undefined: None

    /tmp/tmp6l4hfj7n_test.go:62:61: undefined: None

    /tmp/tmp6l4hfj7n_test.go:63:78: undefined: None

    /tmp/tmp6l4hfj7n_test.go:64:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeExists {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            }\n        } else if v > 0 {\n            if smallestPositiveExists\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            }\n        }\n\
    \    }\n    var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n    if smallestPositiveExists {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptawoz_eb_test.go:67:76: undefined: None

    /tmp/tmptawoz_eb_test.go:68:79: undefined: None

    /tmp/tmptawoz_eb_test.go:72:60: undefined: None

    /tmp/tmptawoz_eb_test.go:73:61: undefined: None

    /tmp/tmptawoz_eb_test.go:74:78: undefined: None

    /tmp/tmptawoz_eb_test.go:75:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeExists {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            }\n        } else if v > 0 {\n            if smallestPositiveExists\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            }\n        }\n\
    \    }\n    var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n    if largestNegativeExists {\n        largestNegativeInterface\
    \ = largestNegative\n    } else {\n        largestNegativeInterface = nil\n  \
    \  }\n    if smallestPositiveExists {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T)\
    \ {\n  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptawoz_eb_test.go:67:76: undefined: None

    /tmp/tmptawoz_eb_test.go:68:79: undefined: None

    /tmp/tmptawoz_eb_test.go:72:60: undefined: None

    /tmp/tmptawoz_eb_test.go:73:61: undefined: None

    /tmp/tmptawoz_eb_test.go:74:78: undefined: None

    /tmp/tmptawoz_eb_test.go:75:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if largestNegativeSet\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            }\n        } else\
    \ if v > 0 {\n            if smallestPositiveSet {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwikxyzpy_test.go:59:76: undefined: None

    /tmp/tmpwikxyzpy_test.go:60:79: undefined: None

    /tmp/tmpwikxyzpy_test.go:64:60: undefined: None

    /tmp/tmpwikxyzpy_test.go:65:61: undefined: None

    /tmp/tmpwikxyzpy_test.go:66:78: undefined: None

    /tmp/tmpwikxyzpy_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = i\n\
    \                largestNegativeFound = true\n            } else if i > largestNegative\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = i\n                smallestPositiveFound = true\n            } else if i <\
    \ smallestPositive {\n                smallestPositive = i\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hv75emp_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:57:76: undefined: None

    /tmp/tmp2hv75emp_test.go:58:79: undefined: None

    /tmp/tmp2hv75emp_test.go:62:60: undefined: None

    /tmp/tmp2hv75emp_test.go:63:61: undefined: None

    /tmp/tmp2hv75emp_test.go:64:78: undefined: None

    /tmp/tmp2hv75emp_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeExists {\n                largestNegative = v\n\
    \                largestNegativeExists = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveExists {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            } else if v\
    \ < smallestPositive {\n                smallestPositive = v\n            }\n\
    \        }\n    }\n    if !largestNegativeExists {\n        largestNegative =\
    \ 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive = 0\n \
    \   }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoh_3lr_5_test.go:57:76: undefined: None

    /tmp/tmpoh_3lr_5_test.go:58:79: undefined: None

    /tmp/tmpoh_3lr_5_test.go:62:60: undefined: None

    /tmp/tmpoh_3lr_5_test.go:63:61: undefined: None

    /tmp/tmpoh_3lr_5_test.go:64:78: undefined: None

    /tmp/tmpoh_3lr_5_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = i\n\
    \                largestNegativeFound = true\n            } else if i > largestNegative\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = i\n                smallestPositiveFound = true\n            } else if i <\
    \ smallestPositive {\n                smallestPositive = i\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hv75emp_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp2hv75emp_test.go:57:76: undefined: None

    /tmp/tmp2hv75emp_test.go:58:79: undefined: None

    /tmp/tmp2hv75emp_test.go:62:60: undefined: None

    /tmp/tmp2hv75emp_test.go:63:61: undefined: None

    /tmp/tmp2hv75emp_test.go:64:78: undefined: None

    /tmp/tmp2hv75emp_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeFound {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            }\n        }\n\
    \    }\n    if largestNegativeFound {\n        if smallestPositiveFound {\n  \
    \          return []interface{}{largestNegative, smallestPositive}\n        }\
    \ else {\n            return []interface{}{largestNegative, nil}\n        }\n\
    \    } else {\n        if smallestPositiveFound {\n            return []interface{}{nil,\
    \ smallestPositive}\n        } else {\n            return []interface{}{nil, nil}\n\
    \        }\n    }\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n \
    \ candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmperelqo2b_test.go:67:76: undefined: None

    /tmp/tmperelqo2b_test.go:68:79: undefined: None

    /tmp/tmperelqo2b_test.go:72:60: undefined: None

    /tmp/tmperelqo2b_test.go:73:61: undefined: None

    /tmp/tmperelqo2b_test.go:74:78: undefined: None

    /tmp/tmperelqo2b_test.go:75:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeExists {\n                if v > largestNegative\
    \ {\n                    largestNegative = v\n                }\n            }\
    \ else {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            }\n        } else if v > 0 {\n            if smallestPositiveExists\
    \ {\n                if v < smallestPositive {\n                    smallestPositive\
    \ = v\n                }\n            } else {\n                smallestPositive\
    \ = v\n                smallestPositiveExists = true\n            }\n        }\n\
    \    }\n    if !largestNegativeExists {\n        largestNegative = nil\n    }\n\
    \    if !smallestPositiveExists {\n        smallestPositive = nil\n    }\n   \
    \ return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkevudb1h_test.go:46:27: cannot use nil as int value in assignment

    /tmp/tmpkevudb1h_test.go:49:28: cannot use nil as int value in assignment

    /tmp/tmpkevudb1h_test.go:61:76: undefined: None

    /tmp/tmpkevudb1h_test.go:62:79: undefined: None

    /tmp/tmpkevudb1h_test.go:66:60: undefined: None

    /tmp/tmpkevudb1h_test.go:67:61: undefined: None

    /tmp/tmpkevudb1h_test.go:68:78: undefined: None

    /tmp/tmpkevudb1h_test.go:69:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_alux0e_test.go:57:76: undefined: None

    /tmp/tmp9_alux0e_test.go:58:79: undefined: None

    /tmp/tmp9_alux0e_test.go:62:60: undefined: None

    /tmp/tmp9_alux0e_test.go:63:61: undefined: None

    /tmp/tmp9_alux0e_test.go:64:78: undefined: None

    /tmp/tmp9_alux0e_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, num := range lst {\n        if num < 0 {\n            if !largestNegativeSet\
    \ || num > largestNegative {\n                largestNegative = num\n        \
    \        largestNegativeSet = true\n            }\n        } else if num > 0 {\n\
    \            if !smallestPositiveSet || num < smallestPositive {\n           \
    \     smallestPositive = num\n                smallestPositiveSet = true\n   \
    \         }\n        }\n    }\n    if !largestNegativeSet {\n        largestNegative\
    \ = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive = 0\n  \
    \  }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbjll380r_test.go:51:76: undefined: None

    /tmp/tmpbjll380r_test.go:52:79: undefined: None

    /tmp/tmpbjll380r_test.go:56:60: undefined: None

    /tmp/tmpbjll380r_test.go:57:61: undefined: None

    /tmp/tmpbjll380r_test.go:58:78: undefined: None

    /tmp/tmpbjll380r_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = nil\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = nil\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_n35xdz_test.go:42:27: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:45:28: cannot use nil as int value in assignment

    /tmp/tmp5_n35xdz_test.go:57:76: undefined: None

    /tmp/tmp5_n35xdz_test.go:58:79: undefined: None

    /tmp/tmp5_n35xdz_test.go:62:60: undefined: None

    /tmp/tmp5_n35xdz_test.go:63:61: undefined: None

    /tmp/tmp5_n35xdz_test.go:64:78: undefined: None

    /tmp/tmp5_n35xdz_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n\
    \  candidate := largest_smallest_integers\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n  \
    \   { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lclzt1h_test.go:51:76: undefined: None

    /tmp/tmp9lclzt1h_test.go:52:79: undefined: None

    /tmp/tmp9lclzt1h_test.go:56:60: undefined: None

    /tmp/tmp9lclzt1h_test.go:57:61: undefined: None

    /tmp/tmp9lclzt1h_test.go:58:78: undefined: None

    /tmp/tmp9lclzt1h_test.go:59:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeExists bool\n    var\
    \ smallestPositiveExists bool\n    for _, val := range lst {\n        if val <\
    \ 0 {\n            if !largestNegativeExists {\n                largestNegative\
    \ = val\n                largestNegativeExists = true\n            } else if val\
    \ > largestNegative {\n                largestNegative = val\n            }\n\
    \        } else if val > 0 {\n            if !smallestPositiveExists {\n     \
    \           smallestPositive = val\n                smallestPositiveExists = true\n\
    \            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpucq27kd__test.go:57:76: undefined: None

    /tmp/tmpucq27kd__test.go:58:79: undefined: None

    /tmp/tmpucq27kd__test.go:62:60: undefined: None

    /tmp/tmpucq27kd__test.go:63:61: undefined: None

    /tmp/tmpucq27kd__test.go:64:78: undefined: None

    /tmp/tmpucq27kd__test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeFound, smallestPositiveFound bool\n\
    \n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpld04wv8c_test.go:58:76: undefined: None

    /tmp/tmpld04wv8c_test.go:59:79: undefined: None

    /tmp/tmpld04wv8c_test.go:63:60: undefined: None

    /tmp/tmpld04wv8c_test.go:64:61: undefined: None

    /tmp/tmpld04wv8c_test.go:65:78: undefined: None

    /tmp/tmpld04wv8c_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, val := range lst {\n        if val <\
    \ 0 {\n            if !largestNegativeFound {\n                largestNegative\
    \ = val\n                largestNegativeFound = true\n            } else if val\
    \ > largestNegative {\n                largestNegative = val\n            }\n\
    \        } else if val > 0 {\n            if !smallestPositiveFound {\n      \
    \          smallestPositive = val\n                smallestPositiveFound = true\n\
    \            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n    if !largestNegativeFound {\n   \
    \     largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda_hnj3w_test.go:57:76: undefined: None

    /tmp/tmpda_hnj3w_test.go:58:79: undefined: None

    /tmp/tmpda_hnj3w_test.go:62:60: undefined: None

    /tmp/tmpda_hnj3w_test.go:63:61: undefined: None

    /tmp/tmpda_hnj3w_test.go:64:78: undefined: None

    /tmp/tmpda_hnj3w_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n\
    \nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplt96wlmp_test.go:55:76: undefined: None

    /tmp/tmplt96wlmp_test.go:56:79: undefined: None

    /tmp/tmplt96wlmp_test.go:60:60: undefined: None

    /tmp/tmplt96wlmp_test.go:61:61: undefined: None

    /tmp/tmplt96wlmp_test.go:62:78: undefined: None

    /tmp/tmplt96wlmp_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyotq8afw_test.go:57:76: undefined: None

    /tmp/tmpyotq8afw_test.go:58:79: undefined: None

    /tmp/tmpyotq8afw_test.go:62:60: undefined: None

    /tmp/tmpyotq8afw_test.go:63:61: undefined: None

    /tmp/tmpyotq8afw_test.go:64:78: undefined: None

    /tmp/tmpyotq8afw_test.go:65:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074258
