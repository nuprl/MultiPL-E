name: HumanEval_116_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // In this Kata, you have to sort a list of non-negative integers according to\n\
  // number of ones in their binary representation in ascending order.\n// For similar\
  \ number of ones, sort based on decimal value.\n// It must be implemented like this:\n\
  // >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2,\
  \ -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0,\
  \ 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2,\
  \ 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
  \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
  \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
  \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
  \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
  \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // your code here\n    return arr\n}\n", "    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    // sort by number of ones\n    for i := 0; i < len(arr); i++\
    \ {\n        for j := i + 1; j < len(arr); j++ {\n            if count_ones(arr[i])\
    \ > count_ones(arr[j]) {\n                arr[i], arr[j] = arr[j], arr[i]\n  \
    \          }\n        }\n    }\n    // sort by decimal value\n    for i := 0;\
    \ i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n         \
    \   if count_ones(arr[i]) == count_ones(arr[j]) && arr[i] > arr[j] {\n       \
    \         arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n \
    \   return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    var ones []int\n    var zeros []int\n\
    \    for _, v := range arr {\n        if v < 0 {\n            continue\n     \
    \   }\n        if v == 0 {\n            zeros = append(zeros, v)\n           \
    \ continue\n        }\n        ones = append(ones, v)\n    }\n    var result []int\n\
    \    for _, v := range ones {\n        result = append(result, v)\n    }\n   \
    \ for _, v := range zeros {\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n", "    // your code here\n    return arr\n}\n", "    // your code\
    \ here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n", " \
    \   var result []int\n    var temp []int\n    var temp_one_count int\n    var\
    \ temp_decimal int\n    var temp_index int\n    var temp_index_one_count int\n\
    \    var temp_index_decimal int\n    var temp_index_value int\n    var temp_value\
    \ int\n    var temp_one_count_value int\n    var temp_decimal_value int\n    var\
    \ temp_one_count_index int\n    var temp_decimal_index int\n    var temp_one_count_index_value\
    \ int\n    var temp_decimal_index_value int\n    var temp_one_count_index_one_count\
    \ int\n    var temp_decimal_index_one_count int\n    var temp_one_count_index_decimal\
    \ int\n    var temp_decimal_index_decimal int\n    var temp_one_count_index_one_count_value\
    \ int\n    var temp_decimal_index_one_count_value int\n    var temp_one_count_index_decimal_value\
    \ int\n    var temp_decimal_index_decimal_value int\n    var temp_one_count_index_one_count_index\
    \ int\n    var temp_decimal_index_one_count_index int\n    var temp_one_count_index_decimal_index\
    \ int\n    var temp_decimal_index_decimal_index int\n    var temp_one_count_index_one_count_index_value\
    \ int\n    var temp_decimal_index_one_count_index_value int\n    var temp_one_count_index_decimal_index_value\
    \ int\n    var temp_decimal_index_decimal_index_value int\n    var temp_one_count_index_one_count_index_one_count\
    \ int\n    var temp_decimal_index_one_count_index_one_count int\n    var temp_one_count_index_decimal_index_one_count\
    \ int\n    var temp_decimal_index_decimal_index_one_count int\n    var temp_one_count_index_one_count_index_decimal\
    \ int\n    var temp_decimal_index_one_count_index_", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    return arr\n}\n", "    for i := 0; i <\
    \ len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if\
    \ arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n       \
    \     }\n        }\n    }\n    return arr\n}\n", "    for i := 0; i < len(arr);\
    \ i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] >\
    \ arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n \
    \       }\n    }\n    return arr\n}\n", "    return arr\n}\n", "    // your code\
    \ here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n", " \
    \   // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j <\
    \ len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n", " \
    \   // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    var ones []int\n    var zeros []int\n    for _, v\
    \ := range arr {\n        if v < 0 {\n            continue\n        }\n      \
    \  if v == 0 {\n            zeros = append(zeros, v)\n            continue\n \
    \       }\n        ones = append(ones, v)\n    }\n    ones = sort_ones(ones)\n\
    \    return append(ones, zeros...)\n}\n", "    // your code here\n    return arr\n\
    }\n", "    // your code here\n    return arr\n}\n", "    // your code here\n \
    \   return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    var arr_ones []int\n    var arr_zeros\
    \ []int\n    for _, v := range arr {\n        if v < 0 {\n            continue\n\
    \        }\n        if v == 0 {\n            arr_zeros = append(arr_zeros, v)\n\
    \            continue\n        }\n        arr_ones = append(arr_ones, v)\n   \
    \ }\n    arr_ones = sort_array_ones(arr_ones)\n    arr_zeros = sort_array_zeros(arr_zeros)\n\
    \    return append(arr_ones, arr_zeros...)\n}\n", "    // your code here\n   \
    \ return arr\n}\n", "    // your code here\n    return arr\n}\n", "    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    return arr\n}\n",
  "    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    if len(arr) <= 1 {\n        return arr\n\
    \    }\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n    for\
    \ _, v := range arr[1:] {\n        if v < pivot {\n            left = append(left,\
    \ v)\n        } else {\n            right = append(right, v)\n        }\n    }\n\
    \    return append(sort_array(left), append([]int{pivot}, sort_array(right)...)...)\n\
    }\n", "    // your code here\n    return arr\n}\n", "    // your code here\n \
    \   return arr\n}\n", "    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    var sorted []int\n    var ones []int\n    var zeros []int\n\
    \    for _, v := range arr {\n        if v < 0 {\n            sorted = append(sorted,\
    \ v)\n        } else if v == 0 {\n            zeros = append(zeros, v)\n     \
    \   } else {\n            ones = append(ones, v)\n        }\n    }\n    sorted\
    \ = append(sorted, zeros...)\n    sorted = append(sorted, ones...)\n    return\
    \ sorted\n}\n", "    return arr\n}\n", "    // your code here\n    return arr\n\
    }\n", "    // your code here\n    return arr\n}\n", "    return arr\n}\n", " \
    \   // your code here\n    return arr\n}\n", "    // TODO: Implement me!\n   \
    \ return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    return arr\n}\n", "    for i := 0; i <\
    \ len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if\
    \ count_ones(arr[i]) > count_ones(arr[j]) {\n                arr[i], arr[j] =\
    \ arr[j], arr[i]\n            } else if count_ones(arr[i]) == count_ones(arr[j])\
    \ {\n                if arr[i] > arr[j] {\n                    arr[i], arr[j]\
    \ = arr[j], arr[i]\n                }\n            }\n        }\n    }\n    return\
    \ arr\n}\n", "    return arr\n}\n", "    var ones = make(map[int]int)\n    for\
    \ _, v := range arr {\n        ones[v] = count_ones(v)\n    }\n    fmt.Println(ones)\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    if len(arr)\
    \ == 0 {\n        return arr\n    }\n    var res []int\n    var one_counts []int\n\
    \    for _, v := range arr {\n        one_counts = append(one_counts, count_ones(v))\n\
    \    }\n    var min_one_count int\n    var min_one_count_index int\n    for i\
    \ := 0; i < len(arr); i++ {\n        min_one_count = one_counts[0]\n        min_one_count_index\
    \ = 0\n        for j := 0; j < len(one_counts); j++ {\n            if one_counts[j]\
    \ < min_one_count {\n                min_one_count = one_counts[j]\n         \
    \       min_one_count_index = j\n            }\n        }\n        res = append(res,\
    \ arr[min_one_count_index])\n        one_counts = append(one_counts[:min_one_count_index],\
    \ one_counts[min_one_count_index+1:]...)\n        arr = append(arr[:min_one_count_index],\
    \ arr[min_one_count_index+1:]...)\n    }\n    return res\n}\n", "    // your code\
    \ here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n", " \
    \   for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++\
    \ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            }\n        }\n    }\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    return arr\n}\n", "    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // Write\
    \ your code here\n    return arr\n}\n", "    // your code here\n    return arr\n\
    }\n", "    // your code here\n    return arr\n}\n", "    // your code here\n \
    \   return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    return\
    \ arr\n}\n", "    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // sort.Ints(arr)\n    // return arr\n    return arr\n}\n", "    // your code\
    \ here\n    return arr\n}\n", "    var sorted []int\n    for _, v := range arr\
    \ {\n        sorted = append(sorted, v)\n    }\n    for i := 0; i < len(sorted);\
    \ i++ {\n        for j := i + 1; j < len(sorted); j++ {\n            if count_ones(sorted[i])\
    \ > count_ones(sorted[j]) {\n                sorted[i], sorted[j] = sorted[j],\
    \ sorted[i]\n            } else if count_ones(sorted[i]) == count_ones(sorted[j])\
    \ {\n                if sorted[i] > sorted[j] {\n                    sorted[i],\
    \ sorted[j] = sorted[j], sorted[i]\n                }\n            }\n       \
    \ }\n    }\n    return sorted\n}\n", "    // your code here\n    return arr\n\
    }\n", "    // your code here\n    return arr\n}\n", "    // your code here\n \
    \   return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    if len(arr) <= 1 {\n        return arr\n    }\n    pivot := arr[0]\n    left\
    \ := make([]int, 0)\n    right := make([]int, 0)\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < pivot {\n            left = append(left, arr[i])\n\
    \        } else {\n            right = append(right, arr[i])\n        }\n    }\n\
    \    left = sort_array(left)\n    right = sort_array(right)\n    left = append(left,\
    \ pivot)\n    left = append(left, right...)\n    return left\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    return\
    \ arr\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n      \
    \      if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    if len(arr) <= 1 {\n        return arr\n    }\n  \
    \  pivot := arr[0]\n    left := make([]int, 0)\n    right := make([]int, 0)\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n          \
    \  left = append(left, arr[i])\n        } else {\n            right = append(right,\
    \ arr[i])\n        }\n    }\n    return append(sort_array(left), append([]int{pivot},\
    \ sort_array(right)...)...)\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    if len(arr) <= 1 {\n        return arr\n    }\n    pivot :=\
    \ arr[0]\n    left := []int{}\n    right := []int{}\n    for _, v := range arr[1:]\
    \ {\n        if v < pivot {\n            left = append(left, v)\n        } else\
    \ {\n            right = append(right, v)\n        }\n    }\n    return append(sort_array(left),\
    \ append([]int{pivot}, sort_array(right)...)...)\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n    var (\n \
    \       ones = make(map[int]int)\n        zeros = make(map[int]int)\n        zeros_arr\
    \ = make([]int, 0)\n        ones_arr = make([]int, 0)\n    )\n    for _, v :=\
    \ range arr {\n        if v < 0 {\n            continue\n        }\n        if\
    \ v == 0 {\n            zeros[v] = v\n            zeros_arr = append(zeros_arr,\
    \ v)\n            continue\n        }\n        ones[v] = v\n        ones_arr =\
    \ append(ones_arr, v)\n    }\n    if len(ones) == 0 {\n        return zeros_arr\n\
    \    }\n    if len(zeros) == 0 {\n        return ones_arr\n    }\n    return append(zeros_arr,\
    \ ones_arr...)\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // Write your code here\n   \
    \ return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    for i := 0; i < len(arr); i++\
    \ {\n        for j := i + 1; j < len(arr); j++ {\n            if count_ones(arr[i])\
    \ > count_ones(arr[j]) {\n                arr[i], arr[j] = arr[j], arr[i]\n  \
    \          } else if count_ones(arr[i]) == count_ones(arr[j]) {\n            \
    \    if arr[i] > arr[j] {\n                    arr[i], arr[j] = arr[j], arr[i]\n\
    \                }\n            }\n        }\n    }\n    return arr\n}\n", " \
    \   return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
