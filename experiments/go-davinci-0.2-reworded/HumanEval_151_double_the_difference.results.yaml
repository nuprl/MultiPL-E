language: go_test.go
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph_t88jzv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmzuq0xb_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, x := range lst {\n        if x\
    \ > 0 && x == float64(int(x)) {\n            if int(x) % 2 == 1 {\n          \
    \      sum += int(x) * int(x)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpn2ayja3d_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpn2ayja3d_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpn2ayja3d_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n            \
    \    sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp4558c8ai_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && int(num) == num {\n            if num % 2 == 1 {\n         \
    \       sum += int(num) * int(num)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg7wolb7a_test.go:22:35: invalid operation: int(num) == num (mismatched
    types int and float64)

    /tmp/tmpg7wolb7a_test.go:23:16: invalid operation: operator % not defined on num
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n          \
    \      sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoi6nc99r_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmzuq0xb_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if num % 2 == 1 {\n     \
    \           sum += int(num * num)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkje6q57k_test.go:23:16: invalid operation: operator % not defined on num
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if num % 2 == 1 {\n     \
    \           sum += int(num) * int(num)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp216gv55v_test.go:23:16: invalid operation: operator % not defined on num
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            sum += int(v) * int(v)\n        }\n\
    \    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjigck8ua_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpjigck8ua_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpjigck8ua_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpjigck8ua_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, x := range lst {\n       \
    \ if x > 0 && x == float64(int(x)) {\n            if int(x) % 2 == 1 {\n     \
    \           sum += int(x) * int(x)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpswvkhyy5_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpswvkhyy5_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpswvkhyy5_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if num\
    \ > 0 && num == float64(int(num)) {\n            if num % 2 == 1 {\n         \
    \       sum += int(num) * int(num)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbx80snmo_test.go:23:16: invalid operation: operator % not defined on num
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1\
    \ {\n                sum += int(num) * int(num)\n            }\n        }\n  \
    \  }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpsqsf8ovc_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, v := range lst {\n        if\
    \ v > 0 && v == float64(int(v)) {\n            result += int(v) * int(v)\n   \
    \     }\n    }\n    return result * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpiwspr4gs_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpiwspr4gs_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpiwspr4gs_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpiwspr4gs_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmzuq0xb_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n          \
    \      sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoi6nc99r_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if num\
    \ > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n    \
    \            sum += int(num) * int(num)\n            }\n        }\n    }\n   \
    \ return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpafu4lu36_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpafu4lu36_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpafu4lu36_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1\
    \ {\n                sum += int(num) * int(num)\n            }\n        }\n  \
    \  }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpsqsf8ovc_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1\
    \ {\n                sum += int(num) * int(num)\n            }\n        }\n  \
    \  }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpsqsf8ovc_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ int(num) % 2 == 1 {\n            sum += int(num) * int(num)\n        }\n   \
    \ }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpnyjzagvw_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpnyjzagvw_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpnyjzagvw_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if num\
    \ > 0 && int(num) == num {\n            if int(num) % 2 == 1 {\n             \
    \   sum += int(num) * int(num)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lo9s0mv_test.go:22:35: invalid operation: int(num) == num (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1\
    \ {\n                sum += int(num) * int(num)\n            }\n        }\n  \
    \  }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpsqsf8ovc_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, n := range lst {\n        if n\
    \ > 0 && n == float64(int(n)) {\n            if int(n) % 2 == 1 {\n          \
    \      sum += int(n) * int(n)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpymiajqnh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpymiajqnh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpymiajqnh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            sum += int(num) * int(num)\n\
    \        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpp79ycrm0_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpp79ycrm0_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpp79ycrm0_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmzuq0xb_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, x := range lst {\n        if x\
    \ > 0 && x == float64(int(x)) {\n            if int(x) % 2 == 1 {\n          \
    \      sum += int(x) * int(x)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpn2ayja3d_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpn2ayja3d_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpn2ayja3d_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpp79ycrm0_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpp79ycrm0_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpp79ycrm0_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            sum += int(num) * int(num)\n\
    \        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, i := range lst {\n       \
    \ if i < 0 {\n            continue\n        }\n        if i != float64(int(i))\
    \ {\n            continue\n        }\n        if int(i) % 2 == 0 {\n         \
    \   continue\n        }\n        sum += int(i * i)\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp6lff97xt_test.go:55: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp6lff97xt_test.go:55:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp6lff97xt_test.go:55: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmzuq0xb_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmzuq0xb_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n}\n\n\
    func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuotkq8f1_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, val := range lst {\n        if\
    \ val > 0 && val == float64(int(val)) {\n            if val % 2 == 1 {\n     \
    \           sum += int(val) * int(val)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp739g7o5w_test.go:23:16: invalid operation: operator % not defined on val
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            sum += int(num) * int(num)\n\
    \        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if num\
    \ > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n    \
    \            sum += int(num) * int(num)\n            }\n        }\n    }\n   \
    \ return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpafu4lu36_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpafu4lu36_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpafu4lu36_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n            \
    \    sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp4558c8ai_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n            \
    \    sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp4558c8ai_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if num\
    \ > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n    \
    \            sum += int(num) * int(num)\n            }\n        }\n    }\n   \
    \ return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpafu4lu36_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpafu4lu36_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpafu4lu36_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int = 0\n    for _, v := range lst {\n    \
    \    if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n  \
    \              result += int(v) * int(v)\n            }\n        }\n    }\n  \
    \  return result * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpfj5rc1hk_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpfj5rc1hk_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpfj5rc1hk_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n            \
    \    sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum *\
    \ 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp4558c8ai_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp4558c8ai_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, v := range lst {\n        if\
    \ v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n        \
    \        result += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ result * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp8h3e2ct3_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp8h3e2ct3_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp8h3e2ct3_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v >= 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n    \
    \            sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp8akjmgdq_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp8akjmgdq_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp8akjmgdq_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n                sum\
    \ += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n}\n\nfunc\
    \ TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjpfnk8v8_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, n := range lst {\n        if n\
    \ > 0 && n == float64(int(n)) {\n            if int(n) % 2 == 1 {\n          \
    \      sum += int(n) * int(n)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpymiajqnh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpymiajqnh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpymiajqnh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if int(v)\
    \ % 2 == 1 {\n            sum += int(v) * int(v)\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpdfzyzqk7_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpdfzyzqk7_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpdfzyzqk7_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n}\n\n\
    func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuotkq8f1_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            sum += int(num) * int(num)\n\
    \        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n}\n\n\
    func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuotkq8f1_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            sum += int(num) * int(num)\n\
    \        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var result int\n    for _, v := range lst {\n        if\
    \ v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n        \
    \        result += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ result * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp8h3e2ct3_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp8h3e2ct3_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp8h3e2ct3_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph_t88jzv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n}\n\n\
    func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuotkq8f1_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && int(num) == num {\n            if int(num) % 2 == 1 {\n         \
    \       sum += int(num) * int(num)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcx_c62v_test.go:22:35: invalid operation: int(num) == num (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            sum += int(num) * int(num)\n\
    \        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num < 0 {\n            continue\n        }\n        if int(num) % 2 == 0 {\n\
    \            continue\n        }\n        sum += int(num) * int(num)\n    }\n\
    \    return sum\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num < 0 {\n            continue\n        }\n        if num != float64(int(num))\
    \ {\n            continue\n        }\n        if int(num) % 2 == 0 {\n       \
    \     continue\n        }\n        sum += int(num) * int(num)\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpemfpamyl_test.go:55: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpemfpamyl_test.go:55:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpemfpamyl_test.go:55: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            sum += int(num) * int(num)\n\
    \        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmp5yly07fa_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmp5yly07fa_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmph_t88jzv_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmph_t88jzv_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDouble_The_Difference(t\
    \ *testing.T) {\n  candidate := double_the_difference\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpjbfuciwl_test.go:43:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpjbfuciwl_test.go:43: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if int(num) % 2 == 1 {\n            sum += int(num) * int(num)\n        }\n\
    \    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpbfech2je_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpbfech2je_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpbfech2je_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmzuq0xb_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    var sum\
    \ int\n    for _, v := range lst {\n        if v > 0 && v == float64(int(v)) {\n\
    \            if v % 2 == 1 {\n                sum += int(v * v)\n            }\n\
    \        }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_x0osqk_test.go:26:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n                sum\
    \ += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n}\n\nfunc\
    \ TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjpfnk8v8_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, v := range lst {\n        if v >\
    \ 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n                sum\
    \ += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n}\n\
    \nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycjbtqzu_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            sum += int(v) * int(v)\n   \
    \     }\n    }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpro4557zs_test.go:48: expected '%!s(int=25)', got '%!s(int=82)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__4 (0.00s)\n        tmpro4557zs_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=128)'\n    --- FAIL: TestDouble_The_Difference/test_num__5\
    \ (0.00s)\n        tmpro4557zs_test.go:48: expected '%!s(int=34)', got '%!s(int=68)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__6 (0.00s)\n        tmpro4557zs_test.go:48:\
    \ expected '%!s(int=165)', got '%!s(int=330)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if num % 2 == 1 {\n     \
    \           sum += int(num) * int(num)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp216gv55v_test.go:23:16: invalid operation: operator % not defined on num
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    sum := 0\n    for _, num := range lst {\n        if num\
    \ > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n    \
    \            sum += int(num) * int(num)\n            }\n        }\n    }\n   \
    \ return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpafu4lu36_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpafu4lu36_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpafu4lu36_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1\
    \ {\n                sum += int(num) * int(num)\n            }\n        }\n  \
    \  }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpsqsf8ovc_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpp79ycrm0_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpp79ycrm0_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpp79ycrm0_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, i := range lst {\n       \
    \ if i > 0 && i == float64(int(i)) {\n            if int(i) % 2 == 1 {\n     \
    \           sum += int(i) * int(i)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpi7u39alq_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpi7u39alq_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpi7u39alq_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1\
    \ {\n                sum += int(num) * int(num)\n            }\n        }\n  \
    \  }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpsqsf8ovc_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, n := range lst {\n        if n\
    \ > 0 && n == float64(int(n)) {\n            if int(n) % 2 == 1 {\n          \
    \      sum += int(n) * int(n)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpymiajqnh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpymiajqnh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpymiajqnh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 != 0 {\n               \
    \ sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kqld8nt_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, num := range lst {\n     \
    \   if num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1\
    \ {\n                sum += int(num) * int(num)\n            }\n        }\n  \
    \  }\n    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n\
    \  candidate := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpsqsf8ovc_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpsqsf8ovc_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n}\n\n\
    func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuotkq8f1_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, x := range lst {\n        if x\
    \ > 0 && x == float64(int(x)) {\n            if int(x) % 2 == 1 {\n          \
    \      sum += int(x) * int(x)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpn2ayja3d_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpn2ayja3d_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpn2ayja3d_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n          \
    \      sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpu7l0hd3z_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpu7l0hd3z_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if int(v)\
    \ % 2 == 1 {\n            sum += int(v) * int(v)\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpdfzyzqk7_test.go:48: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpdfzyzqk7_test.go:48:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpdfzyzqk7_test.go:48: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int = 0\n    for _, v := range lst {\n       \
    \ if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n     \
    \           sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate :=\
    \ double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpkgkmdbqh_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpkgkmdbqh_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, num := range lst {\n        if\
    \ num > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n\
    \                sum += int(num) * int(num)\n            }\n        }\n    }\n\
    \    return sum * 2\n}\n\nfunc TestDouble_The_Difference(t *testing.T) {\n  candidate\
    \ := double_the_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{}),\
    \ expected: 0 },\n     { actual: candidate([]float64{5.0, 4.0}), expected: 25\
    \ },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n   \
    \  { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected: 0 },\n     {\
    \ actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual: candidate([]float64{-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=25)', got '%!s(int=50)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmp55urvzz2_test.go:50:\
    \ expected '%!s(int=34)', got '%!s(int=68)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmp55urvzz2_test.go:50: expected '%!s(int=165)', got '%!s(int=330)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
- exit_code: 2
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    var sum int\n    for _, v := range lst {\n        if v\
    \ > 0 && v == float64(int(v)) {\n            if v % 2 == 1 {\n               \
    \ sum += int(v * v)\n            }\n        }\n    }\n    return sum * 2\n}\n\n\
    func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n\
    \     { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual:\
    \ candidate([]float64{0.1, 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0,\
    \ -20.0, -30.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0,\
    \ 8.0}), expected: 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected:\
    \ 34 },\n     { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuotkq8f1_test.go:23:16: invalid operation: operator % not defined on v
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073155
- exit_code: 1
  program: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
    \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
    // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst\
    \ []float64) int {\n    return 0\n}\n\nfunc TestDouble_The_Difference(t *testing.T)\
    \ {\n  candidate := double_the_difference\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{}), expected: 0 },\n     { actual: candidate([]float64{5.0,\
    \ 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1, 0.2, 0.3}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected: 0 },\n\
    \     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n     { actual:\
    \ candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}),\
    \ expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDouble_The_Difference (0.00s)\n    --- FAIL: TestDouble_The_Difference/test_num__1\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=25)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDouble_The_Difference/test_num__5 (0.00s)\n        tmpmdxdosfj_test.go:42:\
    \ expected '%!s(int=34)', got '%!s(int=0)'\n    --- FAIL: TestDouble_The_Difference/test_num__6\
    \ (0.00s)\n        tmpmdxdosfj_test.go:42: expected '%!s(int=165)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073153
