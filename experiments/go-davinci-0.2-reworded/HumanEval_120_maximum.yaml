name: HumanEval_120_maximum
language: go_test.go
prompt: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a list arr of integers and a positive integer k, return a sorted list \n// of\
  \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
  \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4},\
  \ 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1},\
  \ 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the range of\
  \ [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
  // 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n"
tests: "func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
  \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n     {\
  \ actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n \
  \    { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
  \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
  \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8, 0},\
  \ 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
  \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
  \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4}, 2),\
  \ expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2), expected:\
  \ []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243, -400, 0},\
  \ 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                for l := k\
    \ - 1; l > j; l-- {\n                    result[l] = result[l - 1]\n         \
    \       }\n                result[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k >= len(arr) {\n        return arr\n    }\n    // sort.Ints(arr)\n  \
    \  // return arr[len(arr)-k:]\n    return quickSelect(arr, 0, len(arr)-1, k)\n\
    }\n", "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n  \
    \      return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n   \
    \ }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n\
    \            if v > max {\n                max = v\n            }\n        }\n\
    \        return []int{max}\n    }\n    // k > 1\n    result := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > result[j] {\n                for l := k - 1; l > j; l-- {\n              \
    \      result[l] = result[l - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        return []int{max}\n    }\n    if k ==\
    \ len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n        return\
    \ []int{}\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n    \
    \    for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n         \
    \       result[j] = arr[i]\n                break\n            }\n        }\n\
    \    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var max []int\n \
    \   for i := 0; i < k; i++ {\n        max = append(max, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > max[j] {\n                max[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return max\n}\n", "    if k == 0 {\n   \
    \     return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    // k > 1\n    // sort arr\n    for i := 0;\
    \ i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n         \
    \   if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n  \
    \          }\n        }\n    }\n    return arr[len(arr) - k:]\n}\n", "    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        max := arr[0]\n        for _, v := range arr {\n            if\
    \ v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    // k < len(arr)\n    max := make([]int, k)\n    for i\
    \ := 0; i < k; i++ {\n        max[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        min := max[0]\n        minIndex := 0\n        for j := 1; j <\
    \ k; j++ {\n            if max[j] < min {\n                min = max[j]\n    \
    \            minIndex = j\n            }\n        }\n        if arr[i] > min {\n\
    \            max[minIndex] = arr[i]\n        }\n    }\n    return max\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n     \
    \   return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n     \
    \   return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > res[j] {\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    // TODO: implement\n    return []int{}\n}\n", "    if len(arr) == 0 {\n   \
    \     return []int{}\n    }\n    if k > len(arr) {\n        k = len(arr)\n   \
    \ }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] =\
    \ arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    // k > 1\n    arr = quickSort(arr)\n\
    \    return arr[len(arr)-k:]\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var max []int\n\
    \    for i := 0; i < k; i++ {\n        max = append(max, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > max[0] {\n            max[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if max[j] >\
    \ max[j-1] {\n                    max[j], max[j-1] = max[j-1], max[j]\n      \
    \          } else {\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return max\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n    // Build\
    \ a max heap.\n    for i := len(arr) / 2 - 1; i >= 0; i-- {\n        heapify(arr,\
    \ i, len(arr))\n    }\n    // Pop k times.\n    for i := 0; i < k; i++ {\n   \
    \     arr[0], arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[0]\n        heapify(arr,\
    \ 0, len(arr) - 1 - i)\n    }\n    return arr[len(arr) - k:]\n}\n", "    if len(arr)\
    \ == 0 {\n        return arr\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    var result []int\n  \
    \  for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    // TODO: implement\n\
    \    return []int{}\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n\
    \    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n    \
    \    return arr\n    }\n    if k > len(arr) {\n        return arr\n    }\n   \
    \ var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                res[j] = arr[i]\n         \
    \       break\n            }\n        }\n    }\n    return res\n}\n", "    if\
    \ len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v :=\
    \ range arr {\n            if v > max {\n                max = v\n           \
    \ }\n        }\n        return []int{max}\n    }\n    if k >= len(arr) {\n   \
    \     return arr\n    }\n    // k < len(arr)\n    // use quick sort\n    // partition\n\
    \    i := 0\n    j := len(arr) - 1\n    pivot := arr[0]\n    for i < j {\n   \
    \     for i < j && arr[j] <= pivot {\n            j--\n        }\n        arr[i]\
    \ = arr[j]\n        for i < j && arr[i] >= pivot {\n            i++\n        }\n\
    \        arr[j] = arr[i]\n    }\n    arr[i] = pivot\n    // partition end\n  \
    \  if i == k - 1 {\n        return arr[:k]\n    }\n    if i > k - 1 {\n      \
    \  return maximum(arr[:i], k)\n    }\n    // i < k - 1\n    return maximum(arr[i+1:],\
    \ k-i-1)\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        max := arr[0]\n        for _, v := range arr {\n            if\
    \ v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    //\
    \ sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr[len(arr)\
    \ - k:]\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   if arr[i] > result[0] {\n            result[0] = arr[i]\n            for j\
    \ := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n         \
    \           result[j], result[j-1] = result[j-1], result[j]\n                }\
    \ else {\n                    break\n                }\n            }\n      \
    \  }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        return []int{}\n    }\n    var result []int\n    for i := 0; i <\
    \ k; i++ {\n        result = append(result, arr[i])\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] >\
    \ result[j] {\n                result[j] = arr[i]\n                break\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n   \
    \     return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    // k < len(arr)\n    max := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        max[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        for j := 0; j < k; j++ {\n            if arr[i] > max[j] {\n        \
    \        for m := k - 1; m > j; m-- {\n                    max[m] = max[m - 1]\n\
    \                }\n                max[j] = arr[i]\n                break\n \
    \           }\n        }\n    }\n    return max\n}\n", "    var result []int\n\
    \    for _, v := range arr {\n        if len(result) < k {\n            result\
    \ = append(result, v)\n        } else {\n            for i, r := range result\
    \ {\n                if v > r {\n                    result = append(result, 0)\n\
    \                    copy(result[i+1:], result[i:])\n                    result[i]\
    \ = v\n                    break\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for i := 0; i < k; i++ {\n        max := arr[0]\n   \
    \     maxIndex := 0\n        for j := 1; j < len(arr); j++ {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxIndex = j\n      \
    \      }\n        }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n", "    // Write your code\
    \ here\n    return []int{}\n}\n", "    if k == 0 {\n        return []int{}\n \
    \   }\n    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n  \
    \      max := arr[0]\n        for _, v := range arr {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    // k > 1\n    var res []int\n    for i := 0; i < k; i++ {\n      \
    \  res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n   \
    \     if arr[i] > res[0] {\n            res[0] = arr[i]\n            for j :=\
    \ 1; j < k; j++ {\n                if res[j] > res[j-1] {\n                  \
    \  res[j], res[j-1] = res[j-1], res[j]\n                } else {\n           \
    \         break\n                }\n            }\n        }\n    }\n    return\
    \ res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        return []int{max}\n    }\n    if k ==\
    \ len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n        return\
    \ []int{}\n    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n  \
    \      res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if\
    \ arr[i] > res[0] {\n            res[0] = arr[i]\n            for j := 1; j <\
    \ k; j++ {\n                if res[j] > res[j-1] {\n                    res[j],\
    \ res[j-1] = res[j-1], res[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return res\n}\n", " \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n\
    \    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n  \
    \          res[0] = arr[i]\n            for j := 1; j < k; j++ {\n           \
    \     if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res = append(res[:j],\
    \ append([]int{arr[i]}, res[j:]...)...)\n                res = res[:k]\n     \
    \           break\n            }\n        }\n    }\n    return res\n}\n", "  \
    \  if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // k > 1\n    for i := 0; i < k; i++ {\n \
    \       for j := len(arr) - 1; j > i; j-- {\n            if arr[j] > arr[j - 1]\
    \ {\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n            }\n\
    \        }\n    }\n    return arr[:k]\n}\n", "    if len(arr) == 0 {\n       \
    \ return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if\
    \ k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n         \
    \   if v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n    //\
    \ \u53D6\u524Dk\u4E2A\u6570\uFF0C\u6784\u5EFA\u6700\u5C0F\u5806\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i\
    \ := k / 2 - 1; i >= 0; i-- {\n        minHeapify(heap, i, k)\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0]\
    \ = arr[i]\n            minHeapify(heap, 0, k)\n        }\n    }\n    return heap\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    var max []int\n    for i := 0; i < k; i++ {\n\
    \        max = append(max, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > max[0] {\n            max[0] = arr[i]\n            for j\
    \ := 1; j < k; j++ {\n                if max[j] > max[j-1] {\n               \
    \     max[j], max[j-1] = max[j-1], max[j]\n                } else {\n        \
    \            break\n                }\n            }\n        }\n    }\n    return\
    \ max\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0\
    \ {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    var result []int\n\
    \    for _, v := range arr {\n        if len(result) < k {\n            result\
    \ = append(result, v)\n            continue\n        }\n        for i, r := range\
    \ result {\n            if v > r {\n                result = append(result[:i],\
    \ append([]int{v}, result[i:]...)...)\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    // Use a max heap to store the k\
    \ largest elements.\n    // The heap is initialized with the first k elements\
    \ of the array.\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n  \
    \      heap[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i-- {\n      \
    \  heapify(heap, i, k)\n    }\n    // For each remaining element, compare it with\
    \ the root of the heap.\n    // If it is larger, replace the root with the element\
    \ and heapify.\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0]\
    \ {\n            heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n\
    \    }\n    return heap\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n    \
    \    max := arr[0]\n        for _, v := range arr {\n            if v > max {\n\
    \                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        return []int{}\n    }\n    // k < len(arr)\n    // 1. sort the array\n\
    \    // 2. return the last k elements\n    for i := 0; i < len(arr); i++ {\n \
    \       for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n \
    \   }\n    return arr[len(arr) - k:]\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    result := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i <\
    \ len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j]\
    \ {\n                for m := k - 1; m > j; m-- {\n                    result[m]\
    \ = result[m - 1]\n                }\n                result[j] = arr[i]\n   \
    \             break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for m := k - 1; m > j; m-- {\n                    res[m] = res[m\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j-1] > result[j] {\n                    result[j-1], result[j]\
    \ = result[j], result[j-1]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > result[0] {\n            result[0] = arr[i]\n           \
    \ for j := 1; j < k; j++ {\n                if result[j] < result[j-1] {\n   \
    \                 result[j], result[j-1] = result[j-1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    // Use a min heap\
    \ to store the k largest elements.\n    // The heap will be sorted in ascending\
    \ order.\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i]\
    \ = arr[i]\n    }\n    heapify(heap)\n    for i := k; i < len(arr); i++ {\n  \
    \      if arr[i] > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap)\n\
    \        }\n    }\n    return heap\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n \
    \       max := arr[0]\n        for _, v := range arr {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    // k > 1\n    // sort.Ints(arr)\n    // return arr[len(arr)-k:]\n\
    \    // heap\n    heap := make([]int, k)\n    for i, v := range arr {\n      \
    \  if i < k {\n            heap[i] = v\n        } else {\n            if v > heap[0]\
    \ {\n                heap[0] = v\n            }\n        }\n        if i >= k\
    \ {\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n", " \
    \   if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    if k == 1 {\n        max :=\
    \ arr[0]\n        for _, v := range arr {\n            if v > max {\n        \
    \        max = v\n            }\n        }\n        return []int{max}\n    }\n\
    \    // k > 1\n    // \u5148\u6392\u5E8F\uFF0C\u7136\u540E\u53D6\u524Dk\u4E2A\n\
    \    // \u5FEB\u6392\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n  \
    \      max1, max2 := arr[0], arr[1]\n        if max1 < max2 {\n            max1,\
    \ max2 = max2, max1\n        }\n        for _, v := range arr[2:] {\n        \
    \    if v > max1 {\n                max2 = max1\n                max1 = v\n  \
    \          } else if v > max2 {\n                max2 = v\n            }\n   \
    \     }\n        return []int{max1, max2}\n    }\n    if k == 3 {\n        max1,\
    \ max2, max3 := arr[0], arr[1], arr[2]\n        if max1 < max2 {\n           \
    \ max1, max2 = max2, max1\n        }\n        if max1 < max3 {\n            max1,\
    \ max3 = max3, max1\n        }\n        if max2 < max3 {\n            max2, max3\
    \ = max3, max2\n        }\n        for _, v := range arr[3:] {\n            if\
    \ v > max1 {\n                max3 = max2\n                max2 = max1\n     \
    \           max1 = v\n            } else if v > max2 {\n                max3 =\
    \ max2\n                max2 = v\n            } else if v > max3 {\n         \
    \       max3 = v\n            }\n        }\n        return []int{max1, max2, max3}\n\
    \    }\n    if k == 4 {\n        max1, max2, max3, max4 := arr[0], arr[1], arr[2],\
    \ arr[3]\n        if max1 < max2 {\n            max1, max2 = max2, max1\n    \
    \    }\n        if max1 < max3 {\n            max1, max3 = max3, max1\n      \
    \  }\n        if max1 < max4 {", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var max []int\n \
    \   for i := 0; i < k; i++ {\n        max = append(max, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > max[j] {\n                max[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return max\n}\n", "    if k == 0 {\n   \
    \     return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == 2 {\n        max1, max2 := arr[0],\
    \ arr[1]\n        if max1 < max2 {\n            max1, max2 = max2, max1\n    \
    \    }\n        for _, v := range arr[2:] {\n            if v > max1 {\n     \
    \           max2 = max1\n                max1 = v\n            } else if v > max2\
    \ {\n                max2 = v\n            }\n        }\n        return []int{max1,\
    \ max2}\n    }\n    return arr\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        min := result[0]\n        minIndex\
    \ := 0\n        for j := 1; j < k; j++ {\n            if result[j] < min {\n \
    \               min = result[j]\n                minIndex = j\n            }\n\
    \        }\n        if arr[i] > min {\n            result[minIndex] = arr[i]\n\
    \        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   // Use a slice to store the maximum k numbers.\n    // The slice is sorted\
    \ in ascending order.\n    // The slice is initialized with the first k numbers\
    \ in arr.\n    max := make([]int, k)\n    for i := 0; i < k; i++ {\n        max[i]\
    \ = arr[i]\n    }\n    // Sort the slice in ascending order.\n    for i := 0;\
    \ i < k; i++ {\n        for j := i + 1; j < k; j++ {\n            if max[i] >\
    \ max[j] {\n                max[i], max[j] = max[j], max[i]\n            }\n \
    \       }\n    }\n    // Iterate the rest of arr.\n    // If the current number\
    \ is greater than the minimum number in max,\n    // replace the minimum number\
    \ in max with the current number.\n    // Sort the slice in ascending order.\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > max[0] {\n         \
    \   max[0] = arr[i]\n            for j := 0; j < k; j++ {\n                for\
    \ l := j + 1; l < k; l++ {\n                    if max[j] > max[l] {\n       \
    \                 max[j], max[l] = max[l], max[j]\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return max\n}\n", "    if\
    \ len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    var res []int\n    for i :=\
    \ 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n\
    \            for j := 1; j < k; j++ {\n                if res[j] > res[j-1] {\n\
    \                    res[j], res[j-1] = res[j-1], res[j]\n                } else\
    \ {\n                    break\n                }\n            }\n        }\n\
    \    }\n    return res\n}\n", "    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n        max\
    \ := arr[0]\n        for _, v := range arr {\n            if v > max {\n     \
    \           max = v\n            }\n        }\n        return []int{max}\n   \
    \ }\n    for i := 0; i < k; i++ {\n        for j := i + 1; j < len(arr); j++ {\n\
    \            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n    return arr[:k]\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for m := k - 1; m > j; m-- {\n       \
    \             result[m] = result[m - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j-1]\
    \ {\n                    result[j], result[j-1] = result[j-1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                result[j] =\
    \ arr[i]\n                break\n            }\n        }\n    }\n    return result\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n\
    \        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for _, v := range arr {\n        if len(res) < k {\n            res = append(res,\
    \ v)\n            continue\n        }\n        if v > res[0] {\n            res\
    \ = append(res, v)\n            res = res[1:]\n        }\n    }\n    return res\n\
    }\n", "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n  \
    \      return []int{}\n    }\n    if k == len(arr) {\n        return arr\n   \
    \ }\n    if k > len(arr) {\n        return []int{}\n    }\n    var result []int\n\
    \    for _, v := range arr {\n        if len(result) < k {\n            result\
    \ = append(result, v)\n            continue\n        }\n        if v > result[0]\
    \ {\n            result[0] = v\n        }\n        for i := 1; i < len(result);\
    \ i++ {\n            if result[i] < result[i-1] {\n                result[i],\
    \ result[i-1] = result[i-1], result[i]\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    // k < len(arr)\n    // k > 1\n    // k <\
    \ len(arr) - 1\n    // k > 2\n    // k < len(arr) - 2\n    // k > 3\n    // k\
    \ < len(arr) - 3\n    // k > 4\n    // k < len(arr) - 4\n    // k > 5\n    //\
    \ k < len(arr) - 5\n    // k > 6\n    // k < len(arr) - 6\n    // k > 7\n    //\
    \ k < len(arr) - 7\n    // k > 8\n    // k < len(arr) - 8\n    // k > 9\n    //\
    \ k < len(arr) - 9\n    // k > 10\n    // k < len(arr) - 10\n    // k > 11\n \
    \   // k < len(arr) - 11\n    // k > 12\n    // k < len(arr) - 12\n    // k >\
    \ 13\n    // k < len(arr) - 13\n    // k > 14\n    // k < len(arr) - 14\n    //\
    \ k > 15\n    // k < len(arr) - 15\n    // k > 16\n    // k < len(arr) - 16\n\
    \    // k > 17\n    // k < len(arr) - 17\n    // k > 18\n    // k < len(arr) -\
    \ 18\n    // k > 19\n    // k < len(arr) - 19\n    // k > 20\n    // k < len(arr)\
    \ - 20\n    // k > 21\n    // k < len(arr) - 21\n    // k > 22\n    // k < len(arr)\
    \ - 22\n    // k > 23\n    // k < len(arr) - 23\n    // k", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for _, v := range arr {\n        if len(result)\
    \ < k {\n            result = append(result, v)\n        } else {\n          \
    \  for i, v2 := range result {\n                if v > v2 {\n                \
    \    result = append(result[:i], append([]int{v}, result[i:]...)...)\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n    if k ==\
    \ 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    res :=\
    \ make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n         \
    \   res[0] = arr[i]\n            for j := 1; j < k; j++ {\n                if\
    \ res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1], res[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    var result []int\n  \
    \  if len(arr) == 0 {\n        return result\n    }\n    if k == 0 {\n       \
    \ return result\n    }\n    if k >= len(arr) {\n        return arr\n    }\n  \
    \  result = make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] =\
    \ arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                for t := k -\
    \ 1; t > j; t-- {\n                    result[t] = result[t - 1]\n           \
    \     }\n                result[j] = arr[i]\n                break\n         \
    \   }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n\
    \        for j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n    \
    \            max = arr[j]\n                maxIndex = j\n            }\n     \
    \   }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n  \
    \      return []int{}\n    }\n    var result []int\n    for _, v := range arr\
    \ {\n        if len(result) < k {\n            result = append(result, v)\n  \
    \          continue\n        }\n        if v > result[0] {\n            result[0]\
    \ = v\n        }\n        for i := 1; i < len(result); i++ {\n            if result[i]\
    \ < result[i-1] {\n                result[i], result[i-1] = result[i-1], result[i]\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                result[j] =\
    \ arr[i]\n                break\n            }\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n\
    \    // sort the array\n    // return the first k elements\n    return arr[:k]\n\
    }\n", "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n  \
    \      return []int{}\n    }\n    if k == len(arr) {\n        return arr\n   \
    \ }\n    var max []int\n    for i := 0; i < k; i++ {\n        max = append(max,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > max[0]\
    \ {\n            max[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if max[j] < max[j-1] {\n                    max[j], max[j-1] = max[j-1],\
    \ max[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return max\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    // k <\
    \ len(arr)\n    // find the maximum k numbers in arr\n    // use a min heap to\
    \ store the k numbers\n    // the first k numbers are the initial values of the\
    \ heap\n    // for the rest numbers, if it is larger than the root of the heap,\n\
    \    // pop the root and push the number into the heap\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    heapify(heap)\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n        \
    \    heap[0] = arr[i]\n            heapify(heap)\n        }\n    }\n    return\
    \ heap\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        return []int{max}\n    }\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    var result []int\n    for i := 0;\
    \ i < k; i++ {\n        max := arr[0]\n        index := 0\n        for j, v :=\
    \ range arr {\n            if v > max {\n                max = v\n           \
    \     index = j\n            }\n        }\n        result = append(result, max)\n\
    \        arr = append(arr[:index], arr[index+1:]...)\n    }\n    return result\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    // k > 1\n    //\
    \ 1. sort the arr\n    // 2. return the first k elements\n    for i := 0; i <\
    \ len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if\
    \ arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n       \
    \     }\n        }\n    }\n    return arr[:k]\n}\n", "    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    if k > len(arr) {\n        return []int{}\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result[j] = arr[i]\n        \
    \        break\n            }\n        }\n    }\n    return result\n}\n", "  \
    \  if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n     \
    \           for m := k - 1; m > j; m-- {\n                    result[m] = result[m\
    \ - 1]\n                }\n                result[j] = arr[i]\n              \
    \  break\n            }\n        }\n    }\n    return result\n}\n", "    // TODO:\
    \ implement\n    return []int{}\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    var result []int\n    for i := 0;\
    \ i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for i := k;\
    \ i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > result[j] {\n                result[j] = arr[i]\n                break\n \
    \           }\n        }\n    }\n    return result\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    if k == 0 {\n        return []int{}\n    }\n \
    \   if k == len(arr) {\n        return arr\n    }\n    var res []int\n    for\
    \ i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n\
    \            for j := 1; j < k; j++ {\n                if res[j] > res[j-1] {\n\
    \                    res[j], res[j-1] = res[j-1], res[j]\n                } else\
    \ {\n                    break\n                }\n            }\n        }\n\
    \    }\n    return res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n    \
    \    max := arr[0]\n        for _, v := range arr {\n            if v > max {\n\
    \                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result[j] = arr[i]\n        \
    \        break\n            }\n        }\n    }\n    return result\n}\n", "  \
    \  if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    return maximum(arr[1:],\
    \ k-1)\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n       \
    \ max1, max2 := arr[0], arr[1]\n        if max1 < max2 {\n            max1, max2\
    \ = max2, max1\n        }\n        for _, v := range arr[2:] {\n            if\
    \ v > max1 {\n                max2 = max1\n                max1 = v\n        \
    \    } else if v > max2 {\n                max2 = v\n            }\n        }\n\
    \        return []int{max1, max2}\n    }\n    return arr\n}\n", "    if k == 0\
    \ {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    if k == 1 {\n\
    \        max := arr[0]\n        for _, v := range arr {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    // k > 1\n    // sort arr\n    for i := 0; i < len(arr) - 1; i++ {\n\
    \        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n \
    \   }\n    return arr[len(arr) - k:]\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > result[0] {\n            result[0] = arr[i]\n           \
    \ for j := 1; j < k; j++ {\n                if result[j] < result[j-1] {\n   \
    \                 result[j], result[j-1] = result[j-1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    // initialize the\
    \ result array\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n \
    \       result[i] = arr[i]\n    }\n    // sort the result array\n    for i :=\
    \ 0; i < k; i++ {\n        for j := i + 1; j < k; j++ {\n            if result[i]\
    \ < result[j] {\n                result[i], result[j] = result[j], result[i]\n\
    \            }\n        }\n    }\n    // compare the rest of the array with the\
    \ result array\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k;\
    \ j++ {\n            if arr[i] > result[j] {\n                result[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    // k < len(arr)\n\
    \    // use quick sort\n    // pivot: arr[0]\n    // left: arr[1:]\n    // right:\
    \ arr[1:]\n    left := []int{}\n    right := []int{}\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < arr[0] {\n            left = append(left, arr[i])\n\
    \        } else {\n            right = append(right, arr[i])\n        }\n    }\n\
    \    if len(left) == k - 1 {\n        return append(maximum(left, k - 1), arr[0])\n\
    \    } else if len(left) > k - 1 {\n        return maximum(left, k)\n    } else\
    \ {\n        return maximum(right, k - len(left) - 1)\n    }\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result[j] = arr[i]\n        \
    \        break\n            }\n        }\n    }\n    return result\n}\n", "  \
    \  if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    // k > 1\n    res :=\
    \ make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > res[j] {\n                for m := k - 1; m > j; m-- {\n \
    \                   res[m] = res[m - 1]\n                }\n                res[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ res\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0\
    \ {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return arr\n    }\n    // sort.Ints(arr)\n\
    \    // return arr[len(arr)-k:]\n    // heap.Init(arr)\n    // return arr[len(arr)-k:]\n\
    \    return arr\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    var res []int\n    for i :=\
    \ 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] >\
    \ res[j] {\n                res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n\
    \                res = res[:k]\n                break\n            }\n       \
    \ }\n    }\n    return res\n}\n", "    if k == 0 {\n        return []int{}\n \
    \   }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        return []int{}\n    }\n    // find the max k numbers in arr\n   \
    \ var result []int\n    for i := 0; i < k; i++ {\n        max := arr[0]\n    \
    \    maxIndex := 0\n        for j := 1; j < len(arr); j++ {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxIndex = j\n      \
    \      }\n        }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n", "    if k == 0 {\n   \
    \     return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    return maximum(arr[1:], k)\n}\n", "    if\
    \ len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n\
    \            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n      \
    \          if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    // build a max\
    \ heap\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i]\
    \ = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap,\
    \ i, k)\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0]\
    \ {\n            heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n\
    \    }\n    return heap\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n\
    \        return arr\n    }\n    result := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    result := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > result[j] {\n                for l := k - 1; l > j; l-- {\n              \
    \      result[l] = result[l - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n\
    \        max1, max2 := arr[0], arr[1]\n        if max1 < max2 {\n            max1,\
    \ max2 = max2, max1\n        }\n        for _, v := range arr[2:] {\n        \
    \    if v > max1 {\n                max2 = max1\n                max1 = v\n  \
    \          } else if v > max2 {\n                max2 = v\n            }\n   \
    \     }\n        return []int{max1, max2}\n    }\n    if k == 3 {\n        max1,\
    \ max2, max3 := arr[0], arr[1], arr[2]\n        if max1 < max2 {\n           \
    \ max1, max2 = max2, max1\n        }\n        if max1 < max3 {\n            max1,\
    \ max3 = max3, max1\n        }\n        if max2 < max3 {\n            max2, max3\
    \ = max3, max2\n        }\n        for _, v := range arr[3:] {\n            if\
    \ v > max1 {\n                max3 = max2\n                max2 = max1\n     \
    \           max1 = v\n            } else if v > max2 {\n                max3 =\
    \ max2\n                max2 = v\n            } else if v > max3 {\n         \
    \       max3 = v\n            }\n        }\n        return []int{max1, max2, max3}\n\
    \    }\n    if k == 4 {\n        max1, max2, max3, max4 := arr[0], arr[1], arr[2],\
    \ arr[3]\n        if max1 < max2 {\n            max1, max2 = max2, max1\n    \
    \    }\n        if max1 < max3 {\n            max1, max3 = max3, max1\n      \
    \  }\n        if max1 < max4 {", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n      \
    \  res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n   \
    \     for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n           \
    \     res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n          \
    \      res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n\
    \    if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max\
    \ := arr[0]\n        for _, v := range arr {\n            if v > max {\n     \
    \           max = v\n            }\n        }\n        return []int{max}\n   \
    \ }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n\
    \        return []int{}\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        max := arr[0]\n        for _, v := range arr {\n            if v\
    \ > max {\n                max = v\n            }\n        }\n        result =\
    \ append(result, max)\n        for i, v := range arr {\n            if v == max\
    \ {\n                arr = append(arr[:i], arr[i+1:]...)\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    // TODO:\n   \
    \ return []int{}\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        panic(\"k is larger than\
    \ the length of arr\")\n    }\n    if k == 1 {\n        max := arr[0]\n      \
    \  for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    // k > 1\n  \
    \  // 1. find the max k numbers in the first k elements\n    maxK := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        maxK[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        if arr[i] > maxK[0] {\n            maxK[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if maxK[j] <\
    \ maxK[j-1] {\n                    maxK[j], maxK[j-1] = maxK[j-1], maxK[j]\n \
    \               } else {\n                    break\n                }\n     \
    \       }\n        }\n    }\n    return maxK\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                for m := k - 1; m > j; m-- {\n          \
    \          res[m] = res[m - 1]\n                }\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for _, v := range arr {\n        if len(result)\
    \ < k {\n            result = append(result, v)\n        } else {\n          \
    \  if v > result[0] {\n                result = append(result, v)\n          \
    \      result = result[1:]\n            }\n        }\n    }\n    return result\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n  \
    \  }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        max := arr[0]\n        for _, v := range arr {\n            if\
    \ v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if\
    \ k > len(arr) {\n        return []int{}\n    }\n    var result []int\n    for\
    \ i := 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n       \
    \ for j := 0; j < len(arr); j++ {\n            if arr[j] > max {\n           \
    \     max = arr[j]\n                maxIndex = j\n            }\n        }\n \
    \       result = append(result, max)\n        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n\
    \    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var max []int\n \
    \   for i := 0; i < k; i++ {\n        max = append(max, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > max[0] {\n            max[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if max[j] >\
    \ max[j-1] {\n                    max[j], max[j-1] = max[j-1], max[j]\n      \
    \          } else {\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return max\n}\n", "    if len(arr) == 0 {\n      \
    \  return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n   \
    \ if k >= len(arr) {\n        return arr\n    }\n    var result []int\n    for\
    \ i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result[j] = arr[i]\n        \
    \        break\n            }\n        }\n    }\n    return result\n}\n", "  \
    \  var result []int\n    if k == 0 {\n        return result\n    }\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n\
    \        for j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n    \
    \            max = arr[j]\n                maxIndex = j\n            }\n     \
    \   }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for l := k - 1; l > j; l-- {\n       \
    \             result[l] = result[l - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        return []int{}\n    }\n    var result []int\n    for i := 0; i <\
    \ k; i++ {\n        result = append(result, arr[i])\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0] =\
    \ arr[i]\n            for j := 1; j < k; j++ {\n                if result[j] >\
    \ result[j-1] {\n                    result[j], result[j-1] = result[j-1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j-1] {\n                    result[j], result[j-1] = result[j-1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n \
    \   if k == len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n   \
    \     return []int{}\n    }\n    // heapify\n    for i := k/2 - 1; i >= 0; i--\
    \ {\n        heapify(arr, k, i)\n    }\n    // insert\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[0] {\n            arr[0] = arr[i]\n         \
    \   heapify(arr, k, 0)\n        }\n    }\n    return arr[:k]\n}\n", "    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var max []int\n    for i := 0; i < k; i++ {\n        max = append(max,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > max[j] {\n                max[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return max\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   var res []int\n    for i := 0; i < k; i++ {\n        max := arr[0]\n     \
    \   maxIndex := 0\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxIndex = j\n      \
    \      }\n        }\n        res = append(res, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return res\n}\n", "    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    var result []int\n  \
    \  for i := 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n  \
    \      for j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n      \
    \          max = arr[j]\n                maxIndex = j\n            }\n       \
    \ }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n  \
    \      return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n       \
    \ for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n\
    \        max := arr[0]\n        min := arr[0]\n        for _, v := range arr {\n\
    \            if v > max {\n                max = v\n            }\n          \
    \  if v < min {\n                min = v\n            }\n        }\n        return\
    \ []int{min, max}\n    }\n    return []int{}\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k >= len(arr) {\n        return arr\n    }\n    // sort the array\n  \
    \  for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++\
    \ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            }\n        }\n    }\n    return arr[:k]\n}\n", "    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return nil\n    }\n    if k == 1\
    \ {\n        max := arr[0]\n        for _, v := range arr {\n            if v\
    \ > max {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                for m := k\
    \ - 1; m > j; m-- {\n                    result[m] = result[m - 1]\n         \
    \       }\n                result[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n    \
    \    return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n \
    \   if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n    \
    \        if v > max {\n                max = v\n            }\n        }\n   \
    \     return []int{max}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    // k > 1\n    // k < len(arr)\n    // k > 0\n    // k < len(arr)\n\
    \    // k > 1\n    // k < len(arr)\n    // k > 0\n    // k < len(arr)\n    //\
    \ k > 1\n    // k < len(arr)\n    // k > 0\n    // k < len(arr)\n    // k > 1\n\
    \    // k < len(arr)\n    // k > 0\n    // k < len(arr)\n    // k > 1\n    //\
    \ k < len(arr)\n    // k > 0\n    // k < len(arr)\n    // k > 1\n    // k < len(arr)\n\
    \    // k > 0\n    // k < len(arr)\n    // k > 1\n    // k < len(arr)\n    //\
    \ k > 0\n    // k < len(arr)\n    // k > 1\n    // k < len(arr)\n    // k > 0\n\
    \    // k < len(arr)\n    // k > 1\n    // k < len(arr)\n    // k > 0\n    //\
    \ k < len(arr)\n    // k > 1\n    // k < len(arr)\n    // k > 0\n    // k < len(arr)\n\
    \    // k > 1\n    // k < len(arr)\n    // k > 0\n    // k < len(arr)\n    //\
    \ k > 1\n    // k < len(arr)\n    // k > 0\n    // k < len(arr)\n    // k > 1\n\
    \    // k < len(arr)\n    // k > 0\n    // k < len(arr)\n    // k > 1\n    //\
    \ k < len(arr", "    if len(arr) == 0 {\n        return arr\n    }\n    if k ==\
    \ 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > res[j] {\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                for m := k\
    \ - 1; m > j; m-- {\n                    result[m] = result[m - 1]\n         \
    \       }\n                result[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    if k == 0 {\n        return []int{}\n    }\n \
    \   if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n        max\
    \ := arr[0]\n        for _, v := range arr {\n            if v > max {\n     \
    \           max = v\n            }\n        }\n        return []int{max}\n   \
    \ }\n    if k > len(arr) {\n        return arr\n    }\n    // k < len(arr)\n \
    \   res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                for m := k - 1; m > j; m--\
    \ {\n                    res[m] = res[m - 1]\n                }\n            \
    \    res[j] = arr[i]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n\
    \    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n    \
    \    return arr\n    }\n    // Quick select\n    // https://en.wikipedia.org/wiki/Quickselect\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-3-worst-case-linear-time/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-4-best-approach/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-using-min-heap/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-using-max-heap/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-using-stl/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-using-partial-sorting/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-using-order-statistics/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-using-randomized-partition/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-using-quicksort/\n\
    \    // https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-using-heap-sort/\n\
    \    // https://www.geeksforgeeks.org/kth-", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n       \
    \ max1, max2 := arr[0], arr[1]\n        if max1 < max2 {\n            max1, max2\
    \ = max2, max1\n        }\n        for _, v := range arr[2:] {\n            if\
    \ v > max1 {\n                max2 = max1\n                max1 = v\n        \
    \    } else if v > max2 {\n                max2 = v\n            }\n        }\n\
    \        return []int{max1, max2}\n    }\n    return arr\n}\n", "    if k == 0\
    \ {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n      \
    \  res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n   \
    \     res = insert(res, arr[i])\n    }\n    return res\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    res :=\
    \ make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > res[j] {\n                for m := k - 1; m > j; m-- {\n \
    \                   res[m] = res[m - 1]\n                }\n                res[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n          \
    \      result[j] = arr[i]\n                break\n            }\n        }\n \
    \   }\n    return result\n}\n", "    if len(arr) == 0 {\n        return arr\n\
    \    }\n    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n  \
    \  }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    // TODO: implement\n    return\
    \ []int{}\n}\n", "    // TODO\n    return []int{}\n}\n", "    if k == 0 {\n  \
    \      return []int{}\n    }\n    if k == len(arr) {\n        return arr\n   \
    \ }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for l := k - 1; l > j; l-- {\n       \
    \             result[l] = result[l - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j-1] {\n                    result[j], result[j-1] = result[j-1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    if k > len(arr) {\n        return []int{}\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if res[j] >\
    \ res[j-1] {\n                    res[j], res[j-1] = res[j-1], res[j]\n      \
    \          } else {\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        max := arr[0]\n        maxIndex\
    \ := 0\n        for j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n\
    \                max = arr[j]\n                maxIndex = j\n            }\n \
    \       }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n  \
    \      return []int{}\n    }\n    // heapify\n    for i := k / 2 - 1; i >= 0;\
    \ i-- {\n        heapify(arr, k, i)\n    }\n    // insert\n    for i := k; i <\
    \ len(arr); i++ {\n        if arr[i] > arr[0] {\n            arr[0] = arr[i]\n\
    \            heapify(arr, k, 0)\n        }\n    }\n    return arr[:k]\n}\n", " \
    \   if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n\
    \            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n      \
    \          if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    max := arr[0]\n    for _, v := range arr {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    return append([]int{max}, maximum(arr[1:],\
    \ k-1)...)\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ len(arr) {\n        return arr\n    }\n    var res []int\n    for i := 0; i\
    \ < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n         \
    \   for j := 1; j < k; j++ {\n                if res[j] > res[j-1] {\n       \
    \             res[j], res[j-1] = res[j-1], res[j]\n                } else {\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n\
    \    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n    \
    \    return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > result[0] {\n            result[0] = arr[i]\n           \
    \ for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n   \
    \                 result[j], result[j-1] = result[j-1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    if k == 1 {\n        max :=\
    \ arr[0]\n        for _, v := range arr {\n            if v > max {\n        \
    \        max = v\n            }\n        }\n        return []int{max}\n    }\n\
    \    var result []int\n    for _, v := range arr {\n        if len(result) < k\
    \ {\n            result = append(result, v)\n            continue\n        }\n\
    \        min := result[0]\n        for _, vv := range result {\n            if\
    \ vv < min {\n                min = vv\n            }\n        }\n        if v\
    \ > min {\n            for i, vv := range result {\n                if vv == min\
    \ {\n                    result[i] = v\n                    break\n          \
    \      }\n            }\n        }\n    }\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    // TODO:\n    return\
    \ []int{}\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ len(arr) {\n        return arr\n    }\n    result := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i <\
    \ len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n\
    \            for j := 1; j < k; j++ {\n                if result[j] < result[j-1]\
    \ {\n                    result[j], result[j-1] = result[j-1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n \
    \   if k == len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n   \
    \     return []int{}\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        max := arr[0]\n        maxIndex := 0\n        for j := 0; j < len(arr);\
    \ j++ {\n            if arr[j] > max {\n                max = arr[j]\n       \
    \         maxIndex = j\n            }\n        }\n        result = append(result,\
    \ max)\n        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n    }\n   \
    \ return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n\
    \    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n    \
    \    return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n \
    \       result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result[j] = arr[i]\n                break\n            }\n  \
    \      }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j-1]\
    \ {\n                    result[j], result[j-1] = result[j-1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n \
    \   result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                result[j] =\
    \ arr[i]\n                break\n            }\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k > len(arr)\
    \ {\n        k = len(arr)\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    // sort\n    for i := 0; i < len(arr);\
    \ i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] >\
    \ arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n \
    \       }\n    }\n    return arr[len(arr) - k:]\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k >= len(arr) {\n        return arr\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for m := k - 1; m > j; m-- {\n       \
    \             result[m] = result[m - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n \
    \       max := arr[0]\n        for _, v := range arr {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k > len(arr) {\n        return arr\n    }\n    if k < len(arr)\
    \ {\n        // \u5148\u6392\u5E8F\n        for i := 0; i < len(arr); i++ {\n\
    \            for j := i + 1; j < len(arr); j++ {\n                if arr[i] >\
    \ arr[j] {\n                    arr[i], arr[j] = arr[j], arr[i]\n            \
    \    }\n            }\n        }\n        return arr[:k]\n    }\n    return arr\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        min := result[0]\n\
    \        minIndex := 0\n        for j := 1; j < k; j++ {\n            if result[j]\
    \ < min {\n                min = result[j]\n                minIndex = j\n   \
    \         }\n        }\n        if arr[i] > min {\n            result[minIndex]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j-1] {\n                    result[j-1], result[j] = result[j], result[j-1]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == 2 {\n        max := arr[0]\n    \
    \    max2 := arr[1]\n        if max2 > max {\n            max, max2 = max2, max\n\
    \        }\n        for _, v := range arr[2:] {\n            if v > max {\n  \
    \              max2 = max\n                max = v\n            } else if v >\
    \ max2 {\n                max2 = v\n            }\n        }\n        return []int{max,\
    \ max2}\n    }\n    if k == 3 {\n        max := arr[0]\n        max2 := arr[1]\n\
    \        max3 := arr[2]\n        if max2 > max {\n            max, max2 = max2,\
    \ max\n        }\n        if max3 > max {\n            max, max2, max3 = max3,\
    \ max, max2\n        } else if max3 > max2 {\n            max2, max3 = max3, max2\n\
    \        }\n        for _, v := range arr[3:] {\n            if v > max {\n  \
    \              max3 = max2\n                max2 = max\n                max =\
    \ v\n            } else if v > max2 {\n                max3 = max2\n         \
    \       max2 = v\n            } else if v > max3 {\n                max3 = v\n\
    \            }\n        }\n        return []int{max, max2, max3}\n    }\n    return\
    \ arr\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0\
    \ {\n        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
