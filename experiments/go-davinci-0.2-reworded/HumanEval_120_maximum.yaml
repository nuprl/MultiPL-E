name: HumanEval_120_maximum
language: go_test.go
prompt: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a list arr of integers and a positive integer k, return a sorted list \n// of\
  \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
  \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4},\
  \ 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1},\
  \ 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the range of\
  \ [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n\
  // 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n"
tests: "func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
  \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n     {\
  \ actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n \
  \    { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
  \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
  \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8, 0},\
  \ 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
  \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
  \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4}, 2),\
  \ expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2), expected:\
  \ []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243, -400, 0},\
  \ 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                for l := k\
    \ - 1; l > j; l-- {\n                    result[l] = result[l - 1]\n         \
    \       }\n                result[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k >= len(arr) {\n        return arr\n    }\n    // sort.Ints(arr)\n  \
    \  // return arr[len(arr)-k:]\n    return quickSelect(arr, 0, len(arr)-1, k)\n\
    }\n", "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n  \
    \      return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n   \
    \ }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n\
    \            if v > max {\n                max = v\n            }\n        }\n\
    \        return []int{max}\n    }\n    // k > 1\n    result := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > result[j] {\n                for l := k - 1; l > j; l-- {\n              \
    \      result[l] = result[l - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        return []int{max}\n    }\n    if k ==\
    \ len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n        return\
    \ []int{}\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n    \
    \    for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n         \
    \       result[j] = arr[i]\n                break\n            }\n        }\n\
    \    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var max []int\n \
    \   for i := 0; i < k; i++ {\n        max = append(max, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > max[j] {\n                max[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return max\n}\n", "    if k == 0 {\n   \
    \     return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    // k > 1\n    // sort arr\n    for i := 0;\
    \ i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n         \
    \   if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n  \
    \          }\n        }\n    }\n    return arr[len(arr) - k:]\n}\n", "    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        max := arr[0]\n        for _, v := range arr {\n            if\
    \ v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    // k < len(arr)\n    max := make([]int, k)\n    for i\
    \ := 0; i < k; i++ {\n        max[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        min := max[0]\n        minIndex := 0\n        for j := 1; j <\
    \ k; j++ {\n            if max[j] < min {\n                min = max[j]\n    \
    \            minIndex = j\n            }\n        }\n        if arr[i] > min {\n\
    \            max[minIndex] = arr[i]\n        }\n    }\n    return max\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n     \
    \   return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n     \
    \   return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > res[j] {\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    // TODO: implement\n    return []int{}\n}\n", "    if len(arr) == 0 {\n   \
    \     return []int{}\n    }\n    if k > len(arr) {\n        k = len(arr)\n   \
    \ }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] =\
    \ arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    // k > 1\n    arr = quickSort(arr)\n\
    \    return arr[len(arr)-k:]\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var max []int\n\
    \    for i := 0; i < k; i++ {\n        max = append(max, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > max[0] {\n            max[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if max[j] >\
    \ max[j-1] {\n                    max[j], max[j-1] = max[j-1], max[j]\n      \
    \          } else {\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return max\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n    // Build\
    \ a max heap.\n    for i := len(arr) / 2 - 1; i >= 0; i-- {\n        heapify(arr,\
    \ i, len(arr))\n    }\n    // Pop k times.\n    for i := 0; i < k; i++ {\n   \
    \     arr[0], arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[0]\n        heapify(arr,\
    \ 0, len(arr) - 1 - i)\n    }\n    return arr[len(arr) - k:]\n}\n", "    if len(arr)\
    \ == 0 {\n        return arr\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    var result []int\n  \
    \  for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    // TODO: implement\n\
    \    return []int{}\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n\
    \    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n    \
    \    return arr\n    }\n    if k > len(arr) {\n        return arr\n    }\n   \
    \ var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                res[j] = arr[i]\n         \
    \       break\n            }\n        }\n    }\n    return res\n}\n", "    if\
    \ len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v :=\
    \ range arr {\n            if v > max {\n                max = v\n           \
    \ }\n        }\n        return []int{max}\n    }\n    if k >= len(arr) {\n   \
    \     return arr\n    }\n    // k < len(arr)\n    // use quick sort\n    // partition\n\
    \    i := 0\n    j := len(arr) - 1\n    pivot := arr[0]\n    for i < j {\n   \
    \     for i < j && arr[j] <= pivot {\n            j--\n        }\n        arr[i]\
    \ = arr[j]\n        for i < j && arr[i] >= pivot {\n            i++\n        }\n\
    \        arr[j] = arr[i]\n    }\n    arr[i] = pivot\n    // partition end\n  \
    \  if i == k - 1 {\n        return arr[:k]\n    }\n    if i > k - 1 {\n      \
    \  return maximum(arr[:i], k)\n    }\n    // i < k - 1\n    return maximum(arr[i+1:],\
    \ k-i-1)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
