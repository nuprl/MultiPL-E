name: HumanEval_100_make_a_pile
language: go_test.go
prompt: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a positive integer n, you have to make a pile of n levels of stones.\n\
  // The first level has n stones.\n// The number of stones in the next level is:\n\
  // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
  // Return the number of stones in each level in a list, where element at index\n\
  // i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
  // []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n"
tests: "func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual:\
  \ candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected:\
  \ []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8,\
  \ 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14,\
  \ 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []int\n    for i := n; i > 0; i-- {\n        if i %\
    \ 2 == 0 {\n            result = append(result, i + 1)\n        } else {\n   \
    \         result = append(result, i + 2)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n\
    \            result = append(result, n)\n        } else {\n            if result[i-1]\
    \ % 2 == 0 {\n                result = append(result, result[i-1]+2)\n       \
    \     } else {\n                result = append(result, result[i-1]+1)\n     \
    \       }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := 0; i < n; i++ {\n        result = append(result, n + 2*i)\n    }\n\
    \    return result\n}\n", "    var result []int\n    for i := 0; i < n; i++ {\n\
    \        if i == 0 {\n            result = append(result, n)\n        } else {\n\
    \            if result[i-1] % 2 == 0 {\n                result = append(result,\
    \ result[i-1]+2)\n            } else {\n                result = append(result,\
    \ result[i-1]+1)\n            }\n        }\n    }\n    return result\n}\n", " \
    \   var res []int\n    for i := 0; i < n; i++ {\n        if i == 0 {\n       \
    \     res = append(res, n)\n        } else {\n            if res[i-1] % 2 == 0\
    \ {\n                res = append(res, res[i-1]+2)\n            } else {\n   \
    \             res = append(res, res[i-1]+1)\n            }\n        }\n    }\n\
    \    return res\n}\n", "    var result []int\n    for i := 0; i < n; i++ {\n \
    \       result = append(result, n)\n        if n % 2 == 0 {\n            n +=\
    \ 1\n        } else {\n            n += 2\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n", "    var result []int\n    for i := n; i\
    \ > 0; i-- {\n        result = append(result, i)\n    }\n    return result\n}\n",
  "    var result []int\n    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n \
    \           result = append(result, i + 1)\n        } else {\n            result\
    \ = append(result, i + 2)\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := 0; i < n; i++ {\n        if i == 0 {\n            result = append(result,\
    \ n)\n        } else {\n            if result[i-1] % 2 == 0 {\n              \
    \  result = append(result, result[i-1]+2)\n            } else {\n            \
    \    result = append(result, result[i-1]+1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for i := 0; i < n; i++ {\n\
    \        if i == 0 {\n            result = append(result, n)\n        } else {\n\
    \            if result[i-1] % 2 == 0 {\n                result = append(result,\
    \ result[i-1]+2)\n            } else {\n                result = append(result,\
    \ result[i-1]+1)\n            }\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    for i := n; i > 0; i-- {\n        result = append(result,\
    \ i)\n    }\n    return result\n}\n", "    var result []int\n    for i := 0; i\
    \ < n; i++ {\n        if i == 0 {\n            result = append(result, n)\n  \
    \      } else {\n            if result[i-1] % 2 == 0 {\n                result\
    \ = append(result, result[i-1]+2)\n            } else {\n                result\
    \ = append(result, result[i-1]+1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var res []int\n    for i := 0; i < n; i++ {\n        res\
    \ = append(res, n + 2*i)\n    }\n    return res\n}\n", "    var result []int\n\
    \    for i := 0; i < n; i++ {\n        if i == 0 {\n            result = append(result,\
    \ n)\n        } else {\n            if result[i-1] % 2 == 0 {\n              \
    \  result = append(result, result[i-1]+2)\n            } else {\n            \
    \    result = append(result, result[i-1]+1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for i := n; i > 0; i-- {\n\
    \        if i % 2 == 0 {\n            result = append(result, i + 1)\n       \
    \ } else {\n            result = append(result, i + 2)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []int\n    for i := 0; i < n; i++ {\n \
    \       if i == 0 {\n            result = append(result, n)\n        } else {\n\
    \            if result[i-1] % 2 == 0 {\n                result = append(result,\
    \ result[i-1]+2)\n            } else {\n                result = append(result,\
    \ result[i-1]+1)\n            }\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    for i := 0; i < n; i++ {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n += 1\n        } else {\n        \
    \    n += 2\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for i := n; i > 0; i-- {\n        if i % 2 == 0 {\n            result = append(result,\
    \ i + 1)\n        } else {\n            result = append(result, i + 2)\n     \
    \   }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
