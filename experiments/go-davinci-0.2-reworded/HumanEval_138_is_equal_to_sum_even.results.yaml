language: go_test.go
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8_c8dqi7_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8_c8dqi7_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8_c8dqi7_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8_c8dqi7_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    if\
    \ n == 2 {\n        return false\n    }\n\n    return is_equal_to_sum_even(n -\
    \ 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpcjf7fbz3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpcjf7fbz3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpcjf7fbz3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpcjf7fbz3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Write your code here\n\
    \    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n % 4 == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp02wkimtr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp02wkimtr_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Write your code here\n\
    \    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpl24382xs_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 4 {\n        return false\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp11o84x2k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Write your code here\n\
    \    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 4 {\n        return false\n    }\n\n   \
    \ return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmp11o84x2k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpl24382xs_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n % 4 == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp02wkimtr_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp02wkimtr_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 2 {\n        return false\n    }\n    if n\
    \ == 4 {\n        return true\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpoph0awgs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpoph0awgs_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    for i := 0; i <= n; i += 2 {\n        for j := 0;\
    \ j <= n; j += 2 {\n            for k := 0; k <= n; k += 2 {\n               \
    \ for l := 0; l <= n; l += 2 {\n                    if i + j + k + l == n {\n\
    \                        return true\n                    }\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpeh6wfejx_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpeh6wfejx_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i\
    \ := 2; i <= n; i += 2 {\n        if is_equal_to_sum_even(n - i) {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplkq8lffw_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplkq8lffw_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 4 {\n        return false\n    }\n\n   \
    \ if n == 6 {\n        return false\n    }\n\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return false\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    for i := 2; i <= n / 2; i += 2 {\n        for j :=\
    \ 2; j <= n / 2; j += 2 {\n            for k := 2; k <= n / 2; k += 2 {\n    \
    \            for l := 2; l <= n / 2; l += 2 {\n                    if i + j +\
    \ k + l == n {\n                        return true\n                    }\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i\
    \ := 2; i <= n; i += 2 {\n        if is_equal_to_sum_even(n - i) {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplkq8lffw_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplkq8lffw_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Write your code here\n\
    \    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 2 {\n        return false\n    }\n\n   \
    \ if n == 4 {\n        return true\n    }\n\n    return is_equal_to_sum_even(n\
    \ - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplue_moqm_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplue_moqm_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Write your code here\n\
    \    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 4 {\n        return\
    \ false\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpvmppughp_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpvmppughp_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    for i := 2; i <= n / 2; i += 2 {\n        if is_equal_to_sum_even(n\
    \ - i) {\n            return true\n        }\n    }\n\n    return false\n}\n\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpf0lru392_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpf0lru392_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpf0lru392_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpf0lru392_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    for\
    \ i := 2; i <= n; i += 2 {\n        if is_equal_to_sum_even(n - i) {\n       \
    \     return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpv8r5vzz2_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpv8r5vzz2_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n < 8 {\n        return false\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    for\
    \ i := 2; i <= n; i += 2 {\n        if is_equal_to_sum_even(n - i) {\n       \
    \     return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpv8r5vzz2_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpv8r5vzz2_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n < 8 {\n        return false\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n < 8 {\n        return false\n    }\n\n    if\
    \ n == 8 {\n        return true\n    }\n\n    return is_equal_to_sum_even(n -\
    \ 8)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3\
    \ (0.00s)\n        tmp8atx1x5s_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5 (0.00s)\n        tmp8atx1x5s_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8_c8dqi7_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8_c8dqi7_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n < 8 {\n        return\
    \ false\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8_c8dqi7_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8_c8dqi7_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i\
    \ := 2; i <= n; i += 2 {\n        if is_equal_to_sum_even(n - i) {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplkq8lffw_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplkq8lffw_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return false\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8_c8dqi7_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8_c8dqi7_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return false\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return false\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8_c8dqi7_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8_c8dqi7_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1\
    \ (0.00s)\n        tmpl24382xs_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Write your code here\n\
    \    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return false\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8_c8dqi7_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8_c8dqi7_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    for i := 2; i <= n / 2; i += 2 {\n        if is_equal_to_sum_even(n\
    \ - i) {\n            return true\n        }\n    }\n\n    return false\n}\n\n\
    func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpf0lru392_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpf0lru392_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpf0lru392_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpf0lru392_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 4 {\n        return false\n    }\n\n   \
    \ if n == 6 {\n        return false\n    }\n\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n < 8 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmp8_c8dqi7_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmp8_c8dqi7_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return false\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    return false\n}\n\nfunc\
    \ TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpq3pf98wo_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpq3pf98wo_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 2 {\n        return false\n    }\n    if n\
    \ == 4 {\n        return true\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmpoph0awgs_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmpoph0awgs_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n\
    \ == 2 {\n        return false\n    }\n    return is_equal_to_sum_even(n - 2)\n\
    }\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp1ex6ct0d_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp1ex6ct0d_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 0
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n\
    \ == 6 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Equal_To_Sum_Even(t\
    \ *testing.T) {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(4), expected: false },\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(8), expected: true },\n     { actual:\
    \ candidate(10), expected: true },\n     { actual: candidate(11), expected: false\
    \ },\n     { actual: candidate(12), expected: true },\n     { actual: candidate(13),\
    \ expected: false },\n     { actual: candidate(16), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n    if n == 0 {\n        return true\n    }\n    return\
    \ is_equal_to_sum_even(n - 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T)\
    \ {\n  candidate := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ true },\n     { actual: candidate(11), expected: false },\n     { actual: candidate(12),\
    \ expected: true },\n     { actual: candidate(13), expected: false },\n     {\
    \ actual: candidate(16), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__0\
    \ (0.00s)\n        tmplzuuykwy_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__1 (0.00s)\n        tmplzuuykwy_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpoz0_us7q_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpoz0_us7q_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // your code here\n    return\
    \ false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp3nz9iu0c_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp3nz9iu0c_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    if n % 2 != 0 {\n      \
    \  return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    if\
    \ n == 2 {\n        return false\n    }\n\n    return is_equal_to_sum_even(n -\
    \ 2)\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: false },\n     {\
    \ actual: candidate(6), expected: false },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
    \ expected: false },\n     { actual: candidate(12), expected: true },\n     {\
    \ actual: candidate(13), expected: false },\n     { actual: candidate(16), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmpcjf7fbz3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmpcjf7fbz3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmpcjf7fbz3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmpcjf7fbz3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of\
    \ exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n\
    // false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n\
    // true\nfunc is_equal_to_sum_even(n int) bool {\n    // Write your code here\n\
    \    return false\n}\n\nfunc TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate\
    \ := is_equal_to_sum_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(6), expected: false },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: true },\n     { actual:\
    \ candidate(11), expected: false },\n     { actual: candidate(12), expected: true\
    \ },\n     { actual: candidate(13), expected: false },\n     { actual: candidate(16),\
    \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Equal_To_Sum_Even (0.00s)\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__2\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__3 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__5\
    \ (0.00s)\n        tmp22k_1i2g_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Equal_To_Sum_Even/test_num__7 (0.00s)\n        tmp22k_1i2g_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074588
