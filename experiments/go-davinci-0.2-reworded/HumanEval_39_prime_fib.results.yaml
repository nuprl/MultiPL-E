language: go_test.go
name: HumanEval_39_prime_fib
results:
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for len(fib) < n {\n        fib = append(fib,\
    \ fib[len(fib)-1] + fib[len(fib)-2])\n    }\n    return fib[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpcxhngqwa_test.go:49: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpcxhngqwa_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpcxhngqwa_test.go:49: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpcxhngqwa_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpcxhngqwa_test.go:49: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpcxhngqwa_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpcxhngqwa_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i int\n    var fib int\n    var fib_1 int = 2\n\
    \    var fib_2 int = 3\n    for i = 3; i <= n; i++ {\n        fib = fib_1 + fib_2\n\
    \        fib_1 = fib_2\n        fib_2 = fib\n        if is_prime(fib) {\n    \
    \        break\n        }\n    }\n    return fib\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedq5g0yk_test.go:34:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c, i int\n    a, b = 2, 3\n    for i = 3;\
    \ i <= n; i++ {\n        c = a + b\n        a = b\n        b = c\n        for\
    \ c % 2 == 0 {\n            c = a + b\n            a = b\n            b = c\n\
    \        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpnrqgic8__test.go:63: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpnrqgic8__test.go:63:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpnrqgic8__test.go:63: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpnrqgic8__test.go:63:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpnrqgic8__test.go:63: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpnrqgic8__test.go:63:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_n int\n    var fib_n_1 int = 2\n    var fib_n_2\
    \ int = 3\n    var i int = 3\n    for {\n        fib_n = fib_n_1 + fib_n_2\n \
    \       if is_prime(fib_n) {\n            i++\n            if i == n {\n     \
    \           return fib_n\n            }\n        }\n        fib_n_2 = fib_n_1\n\
    \        fib_n_1 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa_hgk2t5_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 0; len(fibs) < n;\
    \ i++ {\n        fib := fibonacci(i)\n        if is_prime(fib) {\n           \
    \ fibs = append(fibs, fib)\n        }\n    }\n    return fibs[n-1]\n}\n\nfunc\
    \ TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy9btftkc_test.go:23:16: undefined: fibonacci

    /tmp/tmpy9btftkc_test.go:24:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n        fib\
    \ = append(fib, fib[i-1]+fib[i-2])\n    }\n    return fib[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    x, y := 2, 3\n    for i := 0; i < n; i++ {\n        x, y = y,\
    \ x + y\n        for y % 2 == 0 {\n            y += 2\n        }\n    }\n    return\
    \ x\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074335
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i int\n    var fib int\n    var fib_1 int = 2\n\
    \    var fib_2 int = 3\n    for i = 3; i <= n; i++ {\n        fib = fib_1 + fib_2\n\
    \        fib_1 = fib_2\n        fib_2 = fib\n        if is_prime(fib) {\n    \
    \        break\n        }\n    }\n    return fib\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedq5g0yk_test.go:34:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int\n    i, j, k = 1, 1, 1\n    for count\
    \ < n {\n        k = i + j\n        if is_prime(k) {\n            count++\n  \
    \      }\n        i, j = j, k\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuwuw2xe_test.go:24:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, count int\n    i, j, k = 2, 3, 5\n    for\
    \ count < n {\n        if is_prime(k) {\n            count++\n        }\n    \
    \    if count == n {\n            return k\n        }\n        i, j, k = j, k,\
    \ i + j\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmqpcbx8k_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i := 3; i <= n; i++\
    \ {\n        a, b, c = b, c, a + b\n        for b % c == 0 {\n            b, c\
    \ = c, a + b\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp61t2lxw6_test.go:58:\
    \ expected '%!s(int=89)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=233)', got '%!s(int=34)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp61t2lxw6_test.go:58:\
    \ expected '%!s(int=1597)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=28657)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp61t2lxw6_test.go:58:\
    \ expected '%!s(int=514229)', got '%!s(int=144)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=433494437)', got\
    \ '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_n int\n    var fib_n_1 int = 3\n    var fib_n_2\
    \ int = 2\n    var i int = 3\n    for {\n        fib_n = fib_n_1 + fib_n_2\n \
    \       if is_prime(fib_n) {\n            i += 1\n            if i == n {\n  \
    \              return fib_n\n            }\n        }\n        fib_n_2 = fib_n_1\n\
    \        fib_n_1 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp0y78xal_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var (\n        fibs = []int{2, 3}\n        i = 2\n        j\
    \ = 0\n    )\n    for i < n {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \        i++\n    }\n    for j < len(fibs) {\n        if is_prime(fibs[j]) {\n\
    \            n--\n        }\n        if n == 0 {\n            return fibs[j]\n\
    \        }\n        j++\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoz54g5g0_test.go:30:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    f1, f2 := 2, 3\n    for i := 3; i <= n; i++ {\n    \
    \    f1, f2 = f2, f1 + f2\n        for f2 % 2 == 0 {\n            f2 /= 2\n  \
    \      }\n        for f2 % 3 == 0 {\n            f2 /= 3\n        }\n        for\
    \ f2 % 5 == 0 {\n            f2 /= 5\n        }\n        if f2 == 1 {\n      \
    \      i--\n        }\n    }\n    return f2\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074335
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    var primes []int\n    for _, fib := range fibs {\n        if is_prime(fib)\
    \ {\n            primes = append(primes, fib)\n        }\n    }\n    return primes[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpux9azrpo_test.go:28:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 0; len(fibs) < n;\
    \ i++ {\n        if is_prime(fib(i)) {\n            fibs = append(fibs, fib(i))\n\
    \        }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwov7a6i_test.go:23:12: undefined: is_prime

    /tmp/tmpfwov7a6i_test.go:23:21: undefined: fib

    /tmp/tmpfwov7a6i_test.go:24:33: undefined: fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var i, j, k,\
    \ count int\n    i, j, k = 2, 3, 5\n    count = 2\n    for count < n {\n     \
    \   if is_prime(k) {\n            count++\n        }\n        i, j, k = j, k,\
    \ i+j\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudfpvpul_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_n_1, fib_n_2, fib_n int\n    fib_n_1 = 3\n \
    \   fib_n_2 = 2\n    for i := 3; i <= n; i++ {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n    }\n    for {\n      \
    \  if is_prime(fib_n) {\n            return fib_n\n        }\n        fib_n_2\
    \ = fib_n_1\n        fib_n_1 = fib_n\n        fib_n = fib_n_1 + fib_n_2\n    }\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt2hcu7vo_test.go:35:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n        fib\
    \ = append(fib, fib[i-1]+fib[i-2])\n    }\n    for i := len(fib)-1; i >= 0; i--\
    \ {\n        if is_prime(fib[i]) {\n            return fib[i]\n        }\n   \
    \ }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp23hn767y_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fib, i, j, k int\n    for i = 0; i < n; i++ {\n        if\
    \ i == 0 {\n            fib = 2\n        } else if i == 1 {\n            fib =\
    \ 3\n        } else {\n            fib = i + j\n            j = i\n          \
    \  i = fib\n        }\n        for k = 2; k < fib; k++ {\n            if fib %\
    \ k == 0 {\n                break\n            }\n        }\n        if k == fib\
    \ {\n            n--\n        }\n    }\n    return fib\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__1\
    \ (0.00s)\n        tmpul305jzf_test.go:65: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__2 (0.00s)\n        tmpul305jzf_test.go:65:\
    \ expected '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpul305jzf_test.go:65: expected '%!s(int=13)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpul305jzf_test.go:65:\
    \ expected '%!s(int=89)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpul305jzf_test.go:65: expected '%!s(int=233)', got '%!s(int=2)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpul305jzf_test.go:65:\
    \ expected '%!s(int=1597)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpul305jzf_test.go:65: expected '%!s(int=28657)', got '%!s(int=5)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpul305jzf_test.go:65:\
    \ expected '%!s(int=514229)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpul305jzf_test.go:65: expected '%!s(int=433494437)', got\
    \ '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, a, b, c int\n    a, b = 2, 3\n    for i = 3;\
    \ i <= n; i++ {\n        c = a + b\n        a = b\n        b = c\n        if !is_prime(c)\
    \ {\n            i--\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbslgzyw_test.go:32:13: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 0; len(fibs) < n;\
    \ i++ {\n        if is_prime(fib(i)) {\n            fibs = append(fibs, fib(i))\n\
    \        }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwov7a6i_test.go:23:12: undefined: is_prime

    /tmp/tmpfwov7a6i_test.go:23:21: undefined: fib

    /tmp/tmpfwov7a6i_test.go:24:33: undefined: fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, count int\n    i, j, k = 2, 3, 5\n    for\
    \ count < n {\n        if is_prime(k) {\n            count++\n        }\n    \
    \    if count == n {\n            return k\n        }\n        i, j, k = j, k,\
    \ i + j\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_c3hz22z_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := 0; i < len(fibs); i++ {\n        if is_prime(fibs[i]) {\n\
    \            n--\n            if n == 0 {\n                return fibs[i]\n  \
    \          }\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cbsh48b_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n        fib\
    \ = append(fib, fib[i-1]+fib[i-2])\n    }\n    return fib[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    count := 2\n    a, b := 2, 3\n    for {\n        a,\
    \ b = b, a + b\n        if is_prime(b) {\n            count++\n            if\
    \ count == n {\n                return b\n            }\n        }\n    }\n}\n\
    \nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph7u2xsby_test.go:30:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i := 3; i <= n; i++\
    \ {\n        a, b, c = b, c, a + b\n        for c % 2 == 0 {\n            c =\
    \ a + b\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074340
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int\n    i, j, k = 1, 1, 2\n    for count\
    \ < n {\n        if is_prime(k) {\n            count++\n        }\n        i,\
    \ j, k = j, k, i + j\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyr9jxox3_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i := 3; i <= n; i++\
    \ {\n        a, b, c = b, c, a + b\n        for c % 2 == 0 {\n            c +=\
    \ b\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpwdvivc51_test.go:58: expected '%!s(int=89)', got '%!s(int=23)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpwdvivc51_test.go:58:\
    \ expected '%!s(int=233)', got '%!s(int=41)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpwdvivc51_test.go:58: expected '%!s(int=1597)', got '%!s(int=77)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpwdvivc51_test.go:58:\
    \ expected '%!s(int=28657)', got '%!s(int=141)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpwdvivc51_test.go:58: expected '%!s(int=514229)', got '%!s(int=259)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpwdvivc51_test.go:58:\
    \ expected '%!s(int=433494437)', got '%!s(int=477)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int\n    for i, j, k, count = 1, 1, 2, 1;\
    \ count < n; i, j, k = j, k, i+j+k {\n        if is_prime(k) {\n            count++\n\
    \        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8dqt6c2j_test.go:22:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    var primes []int\n    for _, fib := range fibs {\n        if is_prime(fib)\
    \ {\n            primes = append(primes, fib)\n        }\n    }\n    return primes[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9sbdtog4_test.go:28:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fib, fib_prev, fib_prev_prev int = 1, 1, 0\n    var prime_fib_count\
    \ int = 0\n    for {\n        if is_prime(fib) {\n            prime_fib_count\
    \ += 1\n            if prime_fib_count == n {\n                return fib\n  \
    \          }\n        }\n        fib_prev_prev = fib_prev\n        fib_prev =\
    \ fib\n        fib = fib_prev + fib_prev_prev\n    }\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp17ptegat_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: null
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i := 3; i <= n; i++\
    \ {\n        a, b, c = b, c, a + b\n        for c % 2 == 0 {\n            c =\
    \ a + b\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074340
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_1, fib_2, fib int = 2, 3, 5\n    var i int =\
    \ 3\n    for {\n        if is_prime(fib) {\n            i++\n            if i\
    \ == n {\n                return fib\n            }\n        }\n        fib_1,\
    \ fib_2, fib = fib_2, fib, fib_1 + fib_2\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2w3fob10_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_n int\n    var fib_n_1 int = 2\n    var fib_n_2\
    \ int = 3\n    var count int = 2\n    for {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        if is_prime(fib_n) {\n            count++\n        }\n        if count\
    \ == n {\n            break\n        }\n        fib_n_1 = fib_n_2\n        fib_n_2\
    \ = fib_n\n    }\n    return fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8lfb92zg_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 0; len(fibs) < n;\
    \ i++ {\n        if is_prime(fib(i)) {\n            fibs = append(fibs, fib(i))\n\
    \        }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwov7a6i_test.go:23:12: undefined: is_prime

    /tmp/tmpfwov7a6i_test.go:23:21: undefined: fib

    /tmp/tmpfwov7a6i_test.go:24:33: undefined: fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    var i int\n    for i = 1; len(fibs) < n;\
    \ i++ {\n        if is_prime(i) && is_fib(i) {\n            fibs = append(fibs,\
    \ i)\n        }\n    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfmw_79qe_test.go:23:12: undefined: is_prime

    /tmp/tmpfmw_79qe_test.go:23:27: undefined: is_fib

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var i, j, k,\
    \ count int\n    i, j, k = 2, 3, 5\n    count = 2\n    for {\n        if is_prime(k)\
    \ {\n            count++\n            if count == n {\n                return\
    \ k\n            }\n        }\n        i, j, k = j, k, i+j\n    }\n    return\
    \ 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpth2hj43h_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: implement me\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp3jsxt_24_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp3jsxt_24_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib, fib_prev, fib_prev_prev int = 5, 3, 2\n   \
    \ var count int = 3\n    for {\n        if is_prime(fib) {\n            count++\n\
    \            if count == n {\n                return fib\n            }\n    \
    \    }\n        fib_prev_prev = fib_prev\n        fib_prev = fib\n        fib\
    \ = fib_prev + fib_prev_prev\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hcan933_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs,\
    \ fibs[i-1] + fibs[i-2])\n    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n \
    \       if is_prime(fibs[i]) {\n            return fibs[i]\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1uljllv_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var a, b, c int = 2, 3, 5\n    var i int = 3\n    for {\n  \
    \      if is_prime(c) {\n            i++\n            if i == n {\n          \
    \      return c\n            }\n        }\n        a = b\n        b = c\n    \
    \    c = a + b\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_yervcaz_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n        fib\
    \ = append(fib, fib[i-1]+fib[i-2])\n    }\n    return fib[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, count int\n    for i, j, k, count = 2,\
    \ 3, 5, 3; count < n; i, j, k = j, k, i+j+k {\n        if is_prime(k) {\n    \
    \        count++\n        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg59qrpgn_test.go:28:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var f1, f2, f3 int = 2, 3, 5\n    if n == 1 {\n        return\
    \ f1\n    }\n    if n == 2 {\n        return f2\n    }\n    for i := 3; i <= n;\
    \ i++ {\n        f1, f2, f3 = f2, f3, f1 + f2 + f3\n    }\n    return f3\n}\n\n\
    func TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpg8cs1x53_test.go:55: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpg8cs1x53_test.go:55:\
    \ expected '%!s(int=13)', got '%!s(int=18)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpg8cs1x53_test.go:55: expected '%!s(int=89)', got '%!s(int=33)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpg8cs1x53_test.go:55:\
    \ expected '%!s(int=233)', got '%!s(int=61)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpg8cs1x53_test.go:55: expected '%!s(int=1597)', got '%!s(int=112)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpg8cs1x53_test.go:55:\
    \ expected '%!s(int=28657)', got '%!s(int=206)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpg8cs1x53_test.go:55: expected '%!s(int=514229)', got '%!s(int=379)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpg8cs1x53_test.go:55:\
    \ expected '%!s(int=433494437)', got '%!s(int=697)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k int\n    i = 2\n    j = 3\n    k = 5\n \
    \   for i < n {\n        if is_prime(k) {\n            i++\n        }\n      \
    \  j, k = k, j+k\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmp8rv8ck_test.go:31:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, l int\n    var fibs []int\n    var primes []int\n\
    \    var result []int\n\n    fibs = append(fibs, 1)\n    fibs = append(fibs, 2)\n\
    \    primes = append(primes, 2)\n\n    for i = 2; i < n; i++ {\n        fibs =\
    \ append(fibs, fibs[i-1] + fibs[i-2])\n    }\n\n    for j = 3; j < fibs[n-1];\
    \ j++ {\n        for k = 2; k < j; k++ {\n            if j % k == 0 {\n      \
    \          break\n            }\n        }\n        if j == k {\n            primes\
    \ = append(primes, j)\n        }\n    }\n\n    for l = 0; l < len(fibs); l++ {\n\
    \        for m := 0; m < len(primes); m++ {\n            if fibs[l] == primes[m]\
    \ {\n                result = append(result, fibs[l])\n            }\n       \
    \ }\n    }\n\n    return result[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_fib(0x2)\n\t/tmp/tmp7ari8kzp_test.go:52\
    \ +0x2ad\ncommand-line-arguments_test.TestPrime_Fib(0x0?)\n\t/tmp/tmp7ari8kzp_test.go:63\
    \ +0x62\ntesting.tRunner(0xc0001924e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    var primes []int\n    for _, fib := range fibs {\n        if is_prime(fib)\
    \ {\n            primes = append(primes, fib)\n        }\n    }\n    return primes[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpux9azrpo_test.go:28:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    a, b := 1, 1\n    for i := 0; i < n; i++ {\n        a, b = b,\
    \ a + b\n        for b % 2 == 0 {\n            b = b / 2\n        }\n        for\
    \ b % 3 == 0 {\n            b = b / 3\n        }\n        for b % 5 == 0 {\n \
    \           b = b / 5\n        }\n    }\n    return b\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp732xmxip_test.go:58: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp732xmxip_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp732xmxip_test.go:58: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp732xmxip_test.go:58:\
    \ expected '%!s(int=13)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp732xmxip_test.go:58: expected '%!s(int=89)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp732xmxip_test.go:58:\
    \ expected '%!s(int=233)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp732xmxip_test.go:58: expected '%!s(int=1597)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp732xmxip_test.go:58:\
    \ expected '%!s(int=28657)', got '%!s(int=1)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp732xmxip_test.go:58: expected '%!s(int=514229)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp732xmxip_test.go:58:\
    \ expected '%!s(int=433494437)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    for i := len(fibs) - 1; i >= 0; i-- {\n        if is_prime(fibs[i])\
    \ {\n            return fibs[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_g8mvhp_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n\
    \        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if n\
    \ == 5 {\n        return 89\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpiyxljju9_test.go:63: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpiyxljju9_test.go:63:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpiyxljju9_test.go:63: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpiyxljju9_test.go:63:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpiyxljju9_test.go:63: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n\n    if n == 2 {\n  \
    \      return 3\n    }\n\n    var fib_n, fib_n_1, fib_n_2 int = 3, 2, 1\n    var\
    \ count int = 2\n\n    for {\n        fib_n = fib_n_1 + fib_n_2\n        fib_n_2\
    \ = fib_n_1\n        fib_n_1 = fib_n\n\n        if is_prime(fib_n) {\n       \
    \     count++\n        }\n\n        if count == n {\n            break\n     \
    \   }\n    }\n\n    return fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wrp8jal_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib int\n    var fib_1 int = 2\n    var fib_2 int\
    \ = 3\n    var count int = 2\n    for {\n        fib = fib_1 + fib_2\n       \
    \ if is_prime(fib) {\n            count++\n        }\n        if count == n {\n\
    \            break\n        }\n        fib_1 = fib_2\n        fib_2 = fib\n  \
    \  }\n    return fib\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdt84w9p9_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int\n    i, j, k = 1, 1, 1\n    count = 2\n\
    \    for {\n        k = i + j\n        i = j\n        j = k\n        if is_prime(k)\
    \ {\n            count++\n        }\n        if count == n {\n            break\n\
    \        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl_0p2iv1_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    var primes []int\n    for _, fib := range fibs {\n        if is_prime(fib)\
    \ {\n            primes = append(primes, fib)\n        }\n    }\n    return primes[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpux9azrpo_test.go:28:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, count int\n    i, j, k = 2, 3, 5\n    for\
    \ count < n {\n        if is_prime(k) {\n            count++\n        }\n    \
    \    if count == n {\n            return k\n        }\n        i, j, k = j, k,\
    \ i + j\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmqpcbx8k_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs\
    \ = append(fibs, 3)\n    var i int\n    for i = 3; i <= n; i++ {\n        fibs\
    \ = append(fibs, fibs[i-2] + fibs[i-3])\n    }\n    return fibs[n-1]\n}\n\nfunc\
    \ TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpvcfkbk1i_test.go:58: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpvcfkbk1i_test.go:58:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpvcfkbk1i_test.go:58: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpvcfkbk1i_test.go:58:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpvcfkbk1i_test.go:58: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpvcfkbk1i_test.go:58:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpvcfkbk1i_test.go:58: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fib, fib_prev, fib_prev2 int = 1, 1, 0\n    var count int\
    \ = 2\n    for count < n {\n        fib_prev2 = fib_prev\n        fib_prev = fib\n\
    \        fib = fib_prev + fib_prev2\n        if is_prime(fib) {\n            count\
    \ += 1\n        }\n    }\n    return fib\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplq23qf7j_test.go:26:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fib_nums []int\n    var prime_fib_nums []int\n    var i\
    \ int\n    var j int\n    var k int\n    var is_prime bool\n    var is_fib bool\n\
    \n    fib_nums = append(fib_nums, 1)\n    fib_nums = append(fib_nums, 2)\n   \
    \ prime_fib_nums = append(prime_fib_nums, 2)\n\n    for i = 2; len(prime_fib_nums)\
    \ < n; i++ {\n        is_prime = true\n        is_fib = false\n\n        for j\
    \ = 0; j < len(prime_fib_nums); j++ {\n            if i % prime_fib_nums[j] ==\
    \ 0 {\n                is_prime = false\n                break\n            }\n\
    \        }\n\n        if is_prime {\n            for k = 0; k < len(fib_nums);\
    \ k++ {\n                if i == fib_nums[k] {\n                    is_fib = true\n\
    \                    break\n                }\n            }\n\n            if\
    \ is_fib {\n                prime_fib_nums = append(prime_fib_nums, i)\n     \
    \       }\n        }\n\n        fib_nums = append(fib_nums, fib_nums[i - 1] +\
    \ fib_nums[i - 2])\n    }\n\n    return prime_fib_nums[n - 1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (11.29s)\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpjku6xo6q_test.go:84: expected '%!s(int=28657)', got '%!s(int=4181)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpjku6xo6q_test.go:84:\
    \ expected '%!s(int=514229)', got '%!s(int=28657)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpjku6xo6q_test.go:84: expected '%!s(int=433494437)', got\
    \ '%!s(int=514229)'\nFAIL\nFAIL\tcommand-line-arguments\t11.292s\nFAIL\n"
  timestamp: 1660074342
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n \
    \       fib = append(fib, fib[i-1]+fib[i-2])\n    }\n    for i := len(fib)-1;\
    \ i >= 0; i-- {\n        if is_prime(fib[i]) {\n            return fib[i]\n  \
    \      }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9r3f6bl_test.go:31:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_n int\n    var fib_n_1 int = 2\n    var fib_n_2\
    \ int = 3\n    var i int = 3\n    for i <= n {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n        i++\n    }\n    return\
    \ fib_n\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpy6f94mv0_test.go:61: expected '%!s(int=13)', got '%!s(int=7)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpy6f94mv0_test.go:61:\
    \ expected '%!s(int=89)', got '%!s(int=12)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpy6f94mv0_test.go:61: expected '%!s(int=233)', got '%!s(int=19)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpy6f94mv0_test.go:61:\
    \ expected '%!s(int=1597)', got '%!s(int=31)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpy6f94mv0_test.go:61: expected '%!s(int=28657)', got '%!s(int=50)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpy6f94mv0_test.go:61:\
    \ expected '%!s(int=514229)', got '%!s(int=81)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpy6f94mv0_test.go:61: expected '%!s(int=433494437)', got\
    \ '%!s(int=131)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c int = 2, 3, 5\n    for i := 3; i <= n; i++\
    \ {\n        a, b, c = b, c, a + b\n        for b % c == 0 {\n            b, c\
    \ = c, a + b\n        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=5)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp61t2lxw6_test.go:58:\
    \ expected '%!s(int=89)', got '%!s(int=21)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=233)', got '%!s(int=34)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp61t2lxw6_test.go:58:\
    \ expected '%!s(int=1597)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=28657)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp61t2lxw6_test.go:58:\
    \ expected '%!s(int=514229)', got '%!s(int=144)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp61t2lxw6_test.go:58: expected '%!s(int=433494437)', got\
    \ '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_n int\n    var fib_n_1 int = 2\n    var fib_n_2\
    \ int = 3\n    var i int = 3\n    for {\n        fib_n = fib_n_1 + fib_n_2\n \
    \       if is_prime(fib_n) {\n            i += 1\n            if i == n {\n  \
    \              return fib_n\n            }\n        }\n        fib_n_2 = fib_n_1\n\
    \        fib_n_1 = fib_n\n    }\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5lqkgjpx_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmptzaiph8z_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmptzaiph8z_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_nums []int\n    fib_nums = append(fib_nums,\
    \ 2)\n    fib_nums = append(fib_nums, 3)\n    for i := 3; i <= n; i++ {\n    \
    \    fib_nums = append(fib_nums, fib_nums[i-2] + fib_nums[i-3])\n    }\n    for\
    \ i := len(fib_nums) - 1; i >= 0; i-- {\n        if is_prime(fib_nums[i]) {\n\
    \            return fib_nums[i]\n        }\n    }\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp36rkfi8l_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    fib := []int{2, 3}\n    for i := 2; i < n; i++ {\n        fib\
    \ = append(fib, fib[i-1]+fib[i-2])\n    }\n    return fib[n-1]\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmp7mjr_446_test.go:49:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmp7mjr_446_test.go:49: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int\n    i, j, k = 2, 3, 5\n    count = 2\n\
    \    for count < n {\n        if is_prime(k) {\n            count++\n        }\n\
    \        i, j, k = j, k, i+j\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxrmvct7j_test.go:24:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, c int\n    i, j, k = 2, 3, 5\n    c = 3\n\
    \    for {\n        if is_prime(k) {\n            c++\n            if c == n {\n\
    \                return k\n            }\n        }\n        i, j, k = j, k, i+j\n\
    \    }\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate :=\
    \ prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzl51q25g_test.go:30:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var fib_n int\n    var fib_n_1 int = 2\n    var fib_n_2\
    \ int = 3\n    for i := 3; i <= n; i++ {\n        fib_n = fib_n_1 + fib_n_2\n\
    \        fib_n_2 = fib_n_1\n        fib_n_1 = fib_n\n    }\n    return fib_n\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpt0jwz97c_test.go:59: expected '%!s(int=13)', got '%!s(int=7)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpt0jwz97c_test.go:59:\
    \ expected '%!s(int=89)', got '%!s(int=12)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpt0jwz97c_test.go:59: expected '%!s(int=233)', got '%!s(int=19)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpt0jwz97c_test.go:59:\
    \ expected '%!s(int=1597)', got '%!s(int=31)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpt0jwz97c_test.go:59: expected '%!s(int=28657)', got '%!s(int=50)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpt0jwz97c_test.go:59:\
    \ expected '%!s(int=514229)', got '%!s(int=81)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpt0jwz97c_test.go:59: expected '%!s(int=433494437)', got\
    \ '%!s(int=131)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpgios3tj6_test.go:46: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpgios3tj6_test.go:46:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=13)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=89)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=233)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=1597)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=28657)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpxazail_z_test.go:45: expected '%!s(int=514229)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpxazail_z_test.go:45:\
    \ expected '%!s(int=433494437)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fib, fib_1, fib_2 int = 0, 1, 1\n    var count int = 0\n\
    \    for {\n        if is_prime(fib) {\n            count++\n            if count\
    \ == n {\n                return fib\n            }\n        }\n        fib_2\
    \ = fib_1\n        fib_1 = fib\n        fib = fib_1 + fib_2\n    }\n}\n\nfunc\
    \ TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2), expected:\
    \ 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4),\
    \ expected: 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual:\
    \ candidate(6), expected: 233 },\n     { actual: candidate(7), expected: 1597\
    \ },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qhohs48_test.go:23:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var i, j, k, count int = 0, 1, 0, 0\n    for count < n {\n \
    \       k = i + j\n        i = j\n        j = k\n        if is_prime(k) {\n  \
    \          count++\n        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t\
    \ *testing.T) {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(1), expected: 2 },\n     { actual: candidate(2), expected: 3 },\n\
    \     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected:\
    \ 13 },\n     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6),\
    \ expected: 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual:\
    \ candidate(8), expected: 28657 },\n     { actual: candidate(9), expected: 514229\
    \ },\n     { actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmg2kb_yx_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fib_nums []int\n    var prime_fib_nums []int\n    var i\
    \ int\n    var j int\n    var k int\n    var is_prime bool\n    var is_fib bool\n\
    \n    // Generate Fibonacci numbers\n    fib_nums = append(fib_nums, 1)\n    fib_nums\
    \ = append(fib_nums, 2)\n    for i = 2; i < n; i++ {\n        fib_nums = append(fib_nums,\
    \ fib_nums[i-1] + fib_nums[i-2])\n    }\n\n    // Generate prime Fibonacci numbers\n\
    \    for i = 0; i < len(fib_nums); i++ {\n        is_prime = true\n        for\
    \ j = 2; j < fib_nums[i]; j++ {\n            if fib_nums[i] % j == 0 {\n     \
    \           is_prime = false\n                break\n            }\n        }\n\
    \        if is_prime {\n            prime_fib_nums = append(prime_fib_nums, fib_nums[i])\n\
    \        }\n    }\n\n    // Return n-th prime Fibonacci number\n    return prime_fib_nums[n-1]\n\
    }\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual: candidate(2),\
    \ expected: 3 },\n     { actual: candidate(3), expected: 5 },\n     { actual:\
    \ candidate(4), expected: 13 },\n     { actual: candidate(5), expected: 89 },\n\
    \     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7), expected:\
    \ 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual: candidate(9),\
    \ expected: 514229 },\n     { actual: candidate(10), expected: 433494437 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5qpw5bm_test.go:24:9: k declared but not used

    /tmp/tmpm5qpw5bm_test.go:26:9: is_fib declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 2)\n    fibs = append(fibs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=13)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=233)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=1597)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=28657)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphps96r9s_test.go:51:\
    \ expected '%!s(int=514229)', got '%!s(int=89)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphps96r9s_test.go:51: expected '%!s(int=433494437)', got\
    \ '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, c int\n    i, j, k = 2, 3, 5\n    for c\
    \ < n {\n        if is_prime(k) {\n            c++\n        }\n        i, j, k\
    \ = j, k, i+j\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n\
    \  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual: candidate(3),\
    \ expected: 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual:\
    \ candidate(5), expected: 89 },\n     { actual: candidate(6), expected: 233 },\n\
    \     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxn57arjv_test.go:29:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var a, b, c, i int\n    a, b = 2, 3\n    for i = 3;\
    \ i <= n; i++ {\n        c = a + b\n        a = b\n        b = c\n        for\
    \ c % 2 == 0 {\n            c = a + b\n            a = b\n            b = c\n\
    \        }\n    }\n    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmpnrqgic8__test.go:63: expected '%!s(int=89)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmpnrqgic8__test.go:63:\
    \ expected '%!s(int=233)', got '%!s(int=55)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmpnrqgic8__test.go:63: expected '%!s(int=1597)', got '%!s(int=89)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmpnrqgic8__test.go:63:\
    \ expected '%!s(int=28657)', got '%!s(int=233)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmpnrqgic8__test.go:63: expected '%!s(int=514229)', got '%!s(int=377)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmpnrqgic8__test.go:63:\
    \ expected '%!s(int=433494437)', got '%!s(int=987)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    var i, j, k, count int\n    for i, j, k, count = 2,\
    \ 3, 5, 2; count < n; i, j, k = j, k, i+j+k {\n        if is_prime(k) {\n    \
    \        count++\n        }\n    }\n    return k\n}\n\nfunc TestPrime_Fib(t *testing.T)\
    \ {\n  candidate := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 2 },\n     { actual: candidate(2), expected: 3 },\n     { actual:\
    \ candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 13 },\n\
    \     { actual: candidate(5), expected: 89 },\n     { actual: candidate(6), expected:\
    \ 233 },\n     { actual: candidate(7), expected: 1597 },\n     { actual: candidate(8),\
    \ expected: 28657 },\n     { actual: candidate(9), expected: 514229 },\n     {\
    \ actual: candidate(10), expected: 433494437 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp386fxxga_test.go:28:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    var a, b, c\
    \ int = 2, 3, 5\n    for i := 3; i < n; i++ {\n        a, b, c = b, c, a + b\n\
    \        for c % 2 == 0 {\n            a, b, c = b, c, a + b\n        }\n    }\n\
    \    return c\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__3\
    \ (0.00s)\n        tmpgs92yc32_test.go:61: expected '%!s(int=13)', got '%!s(int=5)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__4 (0.00s)\n        tmpgs92yc32_test.go:61:\
    \ expected '%!s(int=89)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmpgs92yc32_test.go:61: expected '%!s(int=233)', got '%!s(int=23)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmpgs92yc32_test.go:61:\
    \ expected '%!s(int=1597)', got '%!s(int=31)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmpgs92yc32_test.go:61: expected '%!s(int=28657)', got '%!s(int=41)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmpgs92yc32_test.go:61:\
    \ expected '%!s(int=514229)', got '%!s(int=95)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmpgs92yc32_test.go:61: expected '%!s(int=433494437)', got\
    \ '%!s(int=167)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n    \
    \    return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4\
    \ {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n   \
    \ return 0\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate := prime_fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     { actual:\
    \ candidate(2), expected: 3 },\n     { actual: candidate(3), expected: 5 },\n\
    \     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5), expected:\
    \ 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual: candidate(7),\
    \ expected: 1597 },\n     { actual: candidate(8), expected: 28657 },\n     { actual:\
    \ candidate(9), expected: 514229 },\n     { actual: candidate(10), expected: 433494437\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__5\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=233)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__6 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=1597)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__7\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=28657)', got '%!s(int=0)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__8 (0.00s)\n        tmphjomggho_test.go:60:\
    \ expected '%!s(int=514229)', got '%!s(int=0)'\n    --- FAIL: TestPrime_Fib/test_num__9\
    \ (0.00s)\n        tmphjomggho_test.go:60: expected '%!s(int=433494437)', got\
    \ '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\
    // >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n//\
    \ 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n\
    \ int) int {\n    var fibs []int\n    fibs = append(fibs, 1)\n    fibs = append(fibs,\
    \ 2)\n    for i := 2; i < n; i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestPrime_Fib(t *testing.T) {\n  candidate\
    \ := prime_fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 2 },\n     {\
    \ actual: candidate(2), expected: 3 },\n     { actual: candidate(3), expected:\
    \ 5 },\n     { actual: candidate(4), expected: 13 },\n     { actual: candidate(5),\
    \ expected: 89 },\n     { actual: candidate(6), expected: 233 },\n     { actual:\
    \ candidate(7), expected: 1597 },\n     { actual: candidate(8), expected: 28657\
    \ },\n     { actual: candidate(9), expected: 514229 },\n     { actual: candidate(10),\
    \ expected: 433494437 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Fib (0.00s)\n    --- FAIL: TestPrime_Fib/test_num__0\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__1 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestPrime_Fib/test_num__2\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__3 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=13)', got '%!s(int=5)'\n    --- FAIL: TestPrime_Fib/test_num__4\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=89)', got '%!s(int=8)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__5 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=233)', got '%!s(int=13)'\n    --- FAIL: TestPrime_Fib/test_num__6\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=1597)', got '%!s(int=21)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__7 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=28657)', got '%!s(int=34)'\n    --- FAIL: TestPrime_Fib/test_num__8\
    \ (0.00s)\n        tmp37n4nbqk_test.go:51: expected '%!s(int=514229)', got '%!s(int=55)'\n\
    \    --- FAIL: TestPrime_Fib/test_num__9 (0.00s)\n        tmp37n4nbqk_test.go:51:\
    \ expected '%!s(int=433494437)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074328
