name: HumanEval_79_decimal_to_binary
language: go_test.go
prompt: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You will be given a number in decimal form and your task is to convert it\
  \ to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\n"
tests: "func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n    \
  \ { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
  \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    // your code here\n    return \"\"\n}\n", "   \
    \ var result string = \"db\"\n    for decimal > 0 {\n        result = fmt.Sprintf(\"\
    %s%d\", result, decimal % 2)\n        decimal /= 2\n    }\n    result += \"db\"\
    \n    return result\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    var\
    \ result string = \"db\"\n    for decimal > 0 {\n        result = fmt.Sprintf(\"\
    %s%d\", result, decimal % 2)\n        decimal /= 2\n    }\n    result += \"db\"\
    \n    return result\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return\
    \ \"db\" + fmt.Sprintf(\"%b\", decimal) + \"db\"\n}\n", "    return fmt.Sprintf(\"\
    db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n",
  "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\"\
    , decimal)\n}\n", "    return fmt.Sprintf(\"db%bdb\", decimal)\n}\n", "    //\
    \ your code here\n    return \"db1111db\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
