name: HumanEval_98_count_upper
language: go_test.go
prompt: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s, count the number of uppercase vowels in even indices.\n// For\
  \ example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
  )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n"
tests: "func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
  \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected:\
  \ 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
  U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
  \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    count := 0\n    for i, c := range s {\n        if i % 2 == 0 &&\
    \ c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var count int\n    for i, c := range s {\n        if i % 2 == 0 &&\
    \ c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >=\
    \ 'A' && r <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var count int\n    for i, c := range s {\n        if i % 2 == 0 &&\
    \ c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >=\
    \ 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, char := range s {\n        if i % 2 == 0 &&\
    \ char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
