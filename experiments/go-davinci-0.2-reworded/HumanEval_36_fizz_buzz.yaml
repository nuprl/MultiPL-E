name: HumanEval_36_fizz_buzz
language: go_test.go
prompt: "package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return the number of times the digit 7 appears in integers less than n which are\
  \ divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n\
  // >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n"
tests: "func TestFizz_Buzz(t *testing.T) {\n  candidate := fizz_buzz\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(50), expected: 0 },\n     { actual: candidate(78),\
  \ expected: 2 },\n     { actual: candidate(79), expected: 3 },\n     { actual: candidate(100),\
  \ expected: 3 },\n     { actual: candidate(200), expected: 6 },\n     { actual:\
  \ candidate(4000), expected: 192 },\n     { actual: candidate(10000), expected:\
  \ 639 },\n     { actual: candidate(100000), expected: 8026 },\n   }\n\n\tfor i,\
  \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            count += strings.Count(string(i), \"7\")\n \
    \       }\n    }\n    return count\n}\n", "    count := 0\n    for i := 1; i <\
    \ n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += strings.Count(strconv.Itoa(i),\
    \ \"7\")\n        }\n    }\n    return count\n}\n", "    var count int\n    for\
    \ i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for\
    \ _, c := range fmt.Sprintf(\"%d\", i) {\n                if c == '7' {\n    \
    \                count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n", "    count := 0\n    for i := 1; i < n; i++ {\n     \
    \   if i % 11 == 0 || i % 13 == 0 {\n            for _, c := range fmt.Sprintf(\"\
    %d\", i) {\n                if c == '7' {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n", "    var\
    \ count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            for _, c := range fmt.Sprintf(\"%d\", i) {\n              \
    \  if c == '7' {\n                    count++\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n", "    count := 0\n    for i := 1;\
    \ i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count +=\
    \ strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return count\n\
    }\n", "    var count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0\
    \ || i % 13 == 0 {\n            count += strings.Count(strconv.Itoa(i), \"7\"\
    )\n        }\n    }\n    return count\n}\n", "    var count int\n    for i :=\
    \ 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _,\
    \ r := range fmt.Sprintf(\"%d\", i) {\n                if r == '7' {\n       \
    \             count++\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n", "    count := 0\n    for i := 1; i < n; i++ {\n       \
    \ if i % 11 == 0 || i % 13 == 0 {\n            count += strings.Count(strconv.Itoa(i),\
    \ \"7\")\n        }\n    }\n    return count\n}\n", "    count := 0\n    for i\
    \ := 0; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for\
    \ _, c := range fmt.Sprintf(\"%d\", i) {\n                if c == '7' {\n    \
    \                count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n", "    count := 0\n    for i := 1; i < n; i++ {\n     \
    \   if i % 11 == 0 || i % 13 == 0 {\n            for _, c := range fmt.Sprintf(\"\
    %d\", i) {\n                if c == '7' {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            for _, c := range fmt.Sprintf(\"%d\", i) {\n                if c\
    \ == '7' {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n", "    count := 0\n    for i := 1; i <\
    \ n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += strings.Count(strconv.Itoa(i),\
    \ \"7\")\n        }\n    }\n    return count\n}\n", "    var count int\n    for\
    \ i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for\
    \ _, d := range fmt.Sprintf(\"%d\", i) {\n                if d == '7' {\n    \
    \                count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n", "    count := 0\n    for i := 1; i < n; i++ {\n     \
    \   if i % 11 == 0 || i % 13 == 0 {\n            for _, c := range fmt.Sprintf(\"\
    %d\", i) {\n                if c == '7' {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n", "    count\
    \ := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            for _, c := range fmt.Sprintf(\"%d\", i) {\n                if c\
    \ == '7' {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n", "    count := 0\n    for i := 1; i <\
    \ n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            for _, c := range\
    \ fmt.Sprintf(\"%d\", i) {\n                if c == '7' {\n                  \
    \  count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    var count int\n    for i := 1; i < n; i++ {\n        if i % 11 == 0\
    \ || i % 13 == 0 {\n            count += strings.Count(strconv.Itoa(i), \"7\"\
    )\n        }\n    }\n    return count\n}\n", "    count := 0\n    for i := 1;\
    \ i < n; i++ {\n        if i % 11 == 0 || i % 13 == 0 {\n            count +=\
    \ strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i := 1; i < n; i++ {\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            count += count_sevens(i)\n        }\n    }\n    return\
    \ count\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
