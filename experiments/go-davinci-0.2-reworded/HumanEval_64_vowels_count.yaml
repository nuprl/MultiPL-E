name: HumanEval_64_vowels_count
language: go_test.go
prompt: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function vowels_count which takes a string representing\n// a word as\
  \ input and returns the number of vowels in the string.\n// Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is\
  \ at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n//\
  \ 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\n"
tests: "func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
  \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
  \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
  keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n    \
  \ { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var count int\n    for _, c := range s {\n        switch c {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if c == s[len(s)-1] {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n", "    count := 0\n    for i, c := range\
    \ s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            count++\n        }\n        if c == 'y' && i == len(s) - 1 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n", "    var count int\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n        }\n   \
    \     if s[i] == 'y' && i == len(s)-1 {\n            count++\n        }\n    }\n\
    \    return count\n}\n", "    // TODO: implement\n    return 0\n}\n", "    var\
    \ count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n\
    \        }\n        if s[i] == 'y' && i == len(s)-1 {\n            count++\n \
    \       }\n    }\n    return count\n}\n", "    vowels := \"aeiouy\"\n    count\
    \ := 0\n    for _, c := range s {\n        if strings.Contains(vowels, strings.ToLower(string(c)))\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    var count\
    \ int = 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            count++\n  \
    \      }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n", "    var count int\n    for i, c := range s {\n        if c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           (c == 'y'\
    \ && i == len(s)-1) {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n", "    count := 0\n    for i, c := range s {\n   \
    \     if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n        \
    \    count++\n        } else if c == 'y' && i == len(s) - 1 {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n    for i, c :=\
    \ range s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ ||\n            (c == 'y' && i == len(s)-1) {\n            count++\n       \
    \ }\n    }\n    return count\n}\n", "    var count int\n    for _, c := range\
    \ s {\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n           \
    \ count++\n        case 'y':\n            if len(s) == 1 || s[len(s)-1] == 'y'\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n", "    count := 0\n    for i, c := range s {\n   \
    \     if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n        \
    \    count++\n        }\n        if c == 'y' && i != len(s) - 1 {\n          \
    \  count++\n        }\n    }\n    return count\n}\n", "    count := 0\n    for\
    \ i, c := range s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' {\n            count++\n        }\n        if c == 'y' && i != len(s)\
    \ - 1 {\n            count++\n        }\n    }\n    return count\n}\n", "    var\
    \ count int\n    for i, c := range s {\n        if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1) {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    count := 0\n    for _, char := range s {\n       \
    \ for _, vowel := range vowels {\n            if string(char) == vowel {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n",
  "    count := 0\n    for _, c := range s {\n        switch c {\n        case 'a',\
    \ 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n            if\
    \ len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for i, c := range\
    \ s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n\
    \            count++\n        }\n        if c == 'y' && i != len(s) - 1 {\n  \
    \          count++\n        }\n    }\n    return count\n}\n", "    var count int\n\
    \    for _, c := range s {\n        if c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
