name: HumanEval_117_select_words
language: go_test.go
prompt: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s and a natural number n, you have been tasked to implement \n\
  // a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"\
  Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary\
  \ had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"\
  simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n\
  // []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"\
  }\nfunc select_words(s string, n int) []string {\n"
tests: "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
  \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\",\
  \ 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
  \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\"\
  , 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\",\
  \ 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected:\
  \ []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"\
  b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var words []string\n    var word string\n    var consonants int\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                words = append(words, word)\n            }\n          \
    \  word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if is_consonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    var count int\n    for _, c := range s {\n        if c == ' ' {\n\
    \            if count == n {\n                result = append(result, word)\n\
    \            }\n            word = \"\"\n            count = 0\n        } else\
    \ {\n            word += string(c)\n            if c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' {\n                count++\n            }\n    \
    \    }\n    }\n    if count == n {\n        result = append(result, word)\n  \
    \  }\n    return result\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if is_consonant(c) {\n  \
    \              consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    var isConsonant\
    \ bool\n    var isVowel bool\n    var isSpace bool\n    var isLetter bool\n  \
    \  var isEnd bool\n    var isStart bool\n    var isWord bool\n    var isConsonantWord\
    \ bool\n    var isVowelWord bool\n    var isSpaceWord bool\n    var isLetterWord\
    \ bool\n    var isEndWord bool\n    var isStartWord bool\n    var isWordWord bool\n\
    \    var isConsonantSpace bool\n    var isVowelSpace bool\n    var isSpaceSpace\
    \ bool\n    var isLetterSpace bool\n    var isEndSpace bool\n    var isStartSpace\
    \ bool\n    var isWordSpace bool\n    var isConsonantEnd bool\n    var isVowelEnd\
    \ bool\n    var isSpaceEnd bool\n    var isLetterEnd bool\n    var isEndEnd bool\n\
    \    var isStartEnd bool\n    var isWordEnd bool\n    var isConsonantStart bool\n\
    \    var isVowelStart bool\n    var isSpaceStart bool\n    var isLetterStart bool\n\
    \    var isEndStart bool\n    var isStartStart bool\n    var isWordStart bool\n\
    \    var isConsonantLetter bool\n    var isVowelLetter bool\n    var isSpaceLetter\
    \ bool\n    var isLetterLetter bool\n    var isEndLetter bool\n    var isStartLetter\
    \ bool\n    var isWordLetter bool\n    var isConsonantVowel bool\n    var isVowelVowel\
    \ bool\n    var isSpaceVowel bool\n    var isLetterVowel bool\n    var isEndVowel\
    \ bool\n    var isStartVowel bool\n    var isWordVowel bool\n    var isConsonantConsonant\
    \ bool\n    var isVowelConsonant bool\n    var isSpaceConsonant bool\n    var\
    \ isLetterConsonant bool\n    var isEndConsonant bool\n    var isStartConsonant\
    \ bool\n    var isWordConsonant bool\n    var isConsonantConsonantWord bool\n\
    \    var isVowelConsonantWord bool\n    var isSpaceConsonantWord bool\n    var\
    \ isLetterConsonantWord bool\n    var isEndCons", "    var words []string\n  \
    \  var word string\n    var consonants int\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if count_consonants(word) == n {\n             \
    \   words = append(words, word)\n            }\n            word = \"\"\n    \
    \    } else {\n            word += string(c)\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    return nil\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    var vowels = \"aeiou\"\n    for _, char := range\
    \ s {\n        if char == ' ' {\n            if consonants == n {\n          \
    \      words = append(words, word)\n            }\n            word = \"\"\n \
    \           consonants = 0\n        } else {\n            word += string(char)\n\
    \            if !strings.Contains(vowels, string(char)) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if is_consonant(c) {\n  \
    \              consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var result []string\n    var word string\n    var consonants int\n    var vowels\
    \ = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n            if\
    \ consonants == n {\n                result = append(result, word)\n         \
    \   }\n            word = \"\"\n            consonants = 0\n        } else {\n\
    \            if !strings.Contains(vowels, string(c)) {\n                consonants++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                words = append(words, word)\n                word = \"\"\
    \n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   var result []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var words []string\n    var consonants int\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     consonants = 0\n            word = \"\"\n        } else {\n            if\
    \ isConsonant(c) {\n                consonants++\n            }\n            word\
    \ += string(c)\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
