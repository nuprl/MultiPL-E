language: go_test.go
name: HumanEval_117_select_words
results:
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var count int\n    for\
    \ _, c := range s {\n        if c == ' ' {\n            if count == n {\n    \
    \            result = append(result, word)\n            }\n            word =\
    \ \"\"\n            count = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count++\n            }\n        }\n    }\n    if count == n {\n\
    \        result = append(result, word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpkagmo4e7_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var isConsonant bool\n    var isVowel bool\n    var isSpace bool\n    var isLetter\
    \ bool\n    var isEnd bool\n    var isStart bool\n    var isWord bool\n    var\
    \ isConsonantWord bool\n    var isVowelWord bool\n    var isSpaceWord bool\n \
    \   var isLetterWord bool\n    var isEndWord bool\n    var isStartWord bool\n\
    \    var isWordWord bool\n    var isConsonantSpace bool\n    var isVowelSpace\
    \ bool\n    var isSpaceSpace bool\n    var isLetterSpace bool\n    var isEndSpace\
    \ bool\n    var isStartSpace bool\n    var isWordSpace bool\n    var isConsonantEnd\
    \ bool\n    var isVowelEnd bool\n    var isSpaceEnd bool\n    var isLetterEnd\
    \ bool\n    var isEndEnd bool\n    var isStartEnd bool\n    var isWordEnd bool\n\
    \    var isConsonantStart bool\n    var isVowelStart bool\n    var isSpaceStart\
    \ bool\n    var isLetterStart bool\n    var isEndStart bool\n    var isStartStart\
    \ bool\n    var isWordStart bool\n    var isConsonantLetter bool\n    var isVowelLetter\
    \ bool\n    var isSpaceLetter bool\n    var isLetterLetter bool\n    var isEndLetter\
    \ bool\n    var isStartLetter bool\n    var isWordLetter bool\n    var isConsonantVowel\
    \ bool\n    var isVowelVowel bool\n    var isSpaceVowel bool\n    var isLetterVowel\
    \ bool\n    var isEndVowel bool\n    var isStartVowel bool\n    var isWordVowel\
    \ bool\n    var isConsonantConsonant bool\n    var isVowelConsonant bool\n   \
    \ var isSpaceConsonant bool\n    var isLetterConsonant bool\n    var isEndConsonant\
    \ bool\n    var isStartConsonant bool\n    var isWordConsonant bool\n    var isConsonantConsonantWord\
    \ bool\n    var isVowelConsonantWord bool\n    var isSpaceConsonantWord bool\n\
    \    var isLetterConsonantWord bool\n    var isEndCons\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjd0fag_o_test.go:88:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075114
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if count_consonants(word) == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vciwlnf_test.go:29:16: undefined: count_consonants

    /tmp/tmp3vciwlnf_test.go:37:8: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, char := range s {\n        if char == ' '\
    \ {\n            if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(char)\n            if !strings.Contains(vowels,\
    \ string(char)) {\n                consonants++\n            }\n        }\n  \
    \  }\n    if consonants == n {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc83fvfh4_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n\
    \            if consonants == n {\n                result = append(result, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            if !strings.Contains(vowels, string(c)) {\n            \
    \    consonants++\n            }\n            word += string(c)\n        }\n \
    \   }\n    if consonants == n {\n        result = append(result, word)\n    }\n\
    \    return result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88ton_gw_test.go:37:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var consonants int\n    var word string\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            consonants\
    \ = 0\n            word = \"\"\n        } else {\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n            word += string(c)\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1fap764_test.go:36:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                result = append(result, word)\n            }\n        \
    \    word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if is_consonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlmovgsk_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    // TODO: implement this function\n    return []string{}\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpj_5oyd3v_test.go:48: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if count_consonants(word) == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vciwlnf_test.go:29:16: undefined: count_consonants

    /tmp/tmp3vciwlnf_test.go:37:8: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var count int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if count == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \            count = 0\n        } else {\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count++\n           \
    \ }\n            word += string(c)\n        }\n    }\n    if count == n {\n  \
    \      words = append(words, word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpboy7t6hr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  var isConsonant bool\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                result = append(result, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        \
    \    isConsonant = false\n        } else {\n            word += string(c)\n  \
    \          if !isConsonant {\n                consonants++\n            }\n  \
    \          isConsonant = true\n        }\n    }\n    if consonants == n {\n  \
    \      result = append(result, word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmp0ku6ac55_test.go:70: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmp0ku6ac55_test.go:70:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmp0ku6ac55_test.go:70: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmp0ku6ac55_test.go:70:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmp0ku6ac55_test.go:70: expected '[b c d f]', got '[a b c d e f]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, char := range s {\n        if char == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(char)\n            if is_consonant(char) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8de1ql2l_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var count int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if count == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \            count = 0\n        } else {\n            word += string(c)\n    \
    \        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n     \
    \           count++\n            }\n        }\n    }\n    if count == n {\n  \
    \      words = append(words, word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpy3btxkvl_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            if c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpliar2mgc_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    // TODO: implement this function\n    return []string{}\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpj_5oyd3v_test.go:48: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u':\
    \ true}\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            if\
    \ !vowels[c] {\n                consonants++\n            }\n            word\
    \ += string(c)\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmprqbujy16_test.go:68: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, char := range s {\n        if char == ' '\
    \ {\n            if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(char)\n            if !strings.Contains(vowels,\
    \ string(char)) {\n                consonants++\n            }\n        }\n  \
    \  }\n    if consonants == n {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc83fvfh4_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmbq2v1s_test.go:30:20: undefined: count_consonants

    /tmp/tmpzmbq2v1s_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var words []string\n    var word string\n  \
    \  var consonants int\n    var vowels = \"aeiou\"\n    var is_vowel bool\n   \
    \ var is_consonant bool\n    var is_space bool\n    var is_letter bool\n    var\
    \ is_word bool\n    var is_consonant_count bool\n    var is_word_count bool\n\
    \    var is_word_count_zero bool\n    var is_consonant_count_zero bool\n    var\
    \ is_consonant_count_equal bool\n    var is_word_count_equal bool\n    var is_word_count_equal_zero\
    \ bool\n    var is_consonant_count_equal_zero bool\n    var is_consonant_count_equal_n\
    \ bool\n    var is_word_count_equal_n bool\n    var is_consonant_count_equal_n_zero\
    \ bool\n    var is_word_count_equal_n_zero bool\n    var is_consonant_count_equal_n_zero_true\
    \ bool\n    var is_word_count_equal_n_zero_true bool\n    var is_consonant_count_equal_n_zero_false\
    \ bool\n    var is_word_count_equal_n_zero_false bool\n    var is_consonant_count_equal_n_zero_true_true\
    \ bool\n    var is_word_count_equal_n_zero_true_true bool\n    var is_consonant_count_equal_n_zero_true_false\
    \ bool\n    var is_word_count_equal_n_zero_true_false bool\n    var is_consonant_count_equal_n_zero_false_true\
    \ bool\n    var is_word_count_equal_n_zero_false_true bool\n    var is_consonant_count_equal_n_zero_false_false\
    \ bool\n    var is_word_count_equal_n_zero_false_false bool\n    var is_consonant_count_equal_n_zero_true_true_true\
    \ bool\n    var is_word_count_equal_n_zero_true_true_true bool\n    var is_conson\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd9ny8rdu_test.go:61:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075114
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var selected []string\n\
    \    for _, word := range words {\n        if count_consonants(word) == n {\n\
    \            selected = append(selected, word)\n        }\n    }\n    return selected\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplsdeok11_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmbq2v1s_test.go:30:20: undefined: count_consonants

    /tmp/tmpzmbq2v1s_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if count_consonants(word) == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vciwlnf_test.go:29:16: undefined: count_consonants

    /tmp/tmp3vciwlnf_test.go:37:8: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    words := []string{}\n    for _, word := range strings.Split(s, \" \"\
    ) {\n        if count_consonants(word) == n {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T)\
    \ {\n  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qmvn8eu_test.go:26:26: undefined: strings

    /tmp/tmp0qmvn8eu_test.go:27:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    words := make([]string, 0)\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if count_consonants(word) == n {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T)\
    \ {\n  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8ew7ibc_test.go:26:26: undefined: strings

    /tmp/tmpz8ew7ibc_test.go:27:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    // TODO: implement this function\n    return []string{}\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpj_5oyd3v_test.go:48: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    words := []string{}\n    for _, word := range split_words(s) {\n    \
    \    if count_consonants(word) == n {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T)\
    \ {\n  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqq8ira8m_test.go:26:26: undefined: split_words

    /tmp/tmpqq8ira8m_test.go:27:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    // TODO: implement this function\n    return []string{}\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpj_5oyd3v_test.go:48: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiouAEIOU\"\n    var is_consonant bool\n    var is_vowel bool\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                words = append(words, word)\n            }\n          \
    \  word = \"\"\n            consonants = 0\n        } else {\n            is_consonant\
    \ = true\n            is_vowel = false\n            for _, v := range vowels {\n\
    \                if c == v {\n                    is_vowel = true\n          \
    \          is_consonant = false\n                    break\n                }\n\
    \            }\n            if is_consonant {\n                consonants++\n\
    \            }\n            if is_vowel {\n                consonants = 0\n  \
    \          }\n            word += string(c)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpu7yk5iy4_test.go:82: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpu7yk5iy4_test.go:82:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpu7yk5iy4_test.go:82: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpu7yk5iy4_test.go:82:\
    \ expected '[Uncle]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmbq2v1s_test.go:30:20: undefined: count_consonants

    /tmp/tmpzmbq2v1s_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var currentWord string\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if len(currentWord) > 0 {\n        \
    \        words = append(words, currentWord)\n                currentWord = \"\"\
    \n            }\n        } else {\n            currentWord += string(c)\n    \
    \    }\n    }\n    if len(currentWord) > 0 {\n        words = append(words, currentWord)\n\
    \    }\n    var result []string\n    for _, word := range words {\n        if\
    \ count_consonants(word) == n {\n            result = append(result, word)\n \
    \       }\n    }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T)\
    \ {\n  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjqanxyq4_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if count_consonants(word) == n {\n       \
    \         result = append(result, word)\n            }\n            word = \"\"\
    \n        } else {\n            word += string(c)\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n\
    \nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j5x1xar_test.go:29:16: undefined: count_consonants

    /tmp/tmp8j5x1xar_test.go:37:8: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var words []string\n    var word string\n  \
    \  var consonants int\n    var isConsonant bool\n    var isVowel bool\n    var\
    \ isSpace bool\n    var isLetter bool\n    for _, c := range s {\n        isConsonant\
    \ = false\n        isVowel = false\n        isSpace = false\n        isLetter\
    \ = false\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n       \
    \     isVowel = true\n            isLetter = true\n        case 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z':\n            isConsonant = true\n            isLetter = true\n   \
    \     case ' ':\n            isSpace = true\n        }\n        if isLetter {\n\
    \            word += string(c)\n        }\n        if isConsonant {\n        \
    \    consonants++\n        }\n        if isSpace || isVowel {\n            if\
    \ consonants == n {\n                words = append(words, word)\n           \
    \ }\n            consonants = 0\n            word = \"\"\n        }\n    }\n \
    \   if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm1l1gszt_test.go:25:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var count int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if count == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \            count = 0\n        } else {\n            word += string(c)\n    \
    \        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n     \
    \           count++\n            }\n        }\n    }\n    if count == n {\n  \
    \      words = append(words, word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpy3btxkvl_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            if c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpliar2mgc_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmbq2v1s_test.go:30:20: undefined: count_consonants

    /tmp/tmpzmbq2v1s_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    words := []string{}\n    for _, word := range strings.Split(s, \" \"\
    ) {\n        if len(word) == n {\n            words = append(words, word)\n  \
    \      }\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgfosmqx_test.go:26:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmbq2v1s_test.go:30:20: undefined: count_consonants

    /tmp/tmpzmbq2v1s_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    var is_vowel bool\n    for _, c := range s {\n \
    \       if c == ' ' {\n            if consonants == n {\n                words\
    \ = append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n        } else {\n            is_vowel = false\n            for _, v :=\
    \ range vowels {\n                if c == v {\n                    is_vowel =\
    \ true\n                    break\n                }\n            }\n        \
    \    if !is_vowel {\n                consonants++\n            }\n           \
    \ word += string(c)\n        }\n    }\n    if consonants == n {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpimy2iaxr_test.go:76: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var count int\n    for\
    \ _, c := range s {\n        if c == ' ' {\n            if count == n {\n    \
    \            result = append(result, word)\n            }\n            word =\
    \ \"\"\n            count = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count++\n            }\n        }\n    }\n    if count == n {\n\
    \        result = append(result, word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpkagmo4e7_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    // TODO: implement this function\n    return []string{}\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpj_5oyd3v_test.go:48: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpj_5oyd3v_test.go:48:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpj_5oyd3v_test.go:48: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            if c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpliar2mgc_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, char := range s {\n        if char == ' '\
    \ {\n            if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(char)\n            if !strings.Contains(vowels,\
    \ string(char)) {\n                consonants++\n            }\n        }\n  \
    \  }\n    if consonants == n {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc83fvfh4_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var words []string\n    var word string\n  \
    \  var consonants int\n    var vowels = \"aeiou\"\n    var is_vowel bool\n   \
    \ var is_consonant bool\n    var is_space bool\n    for _, c := range s {\n  \
    \      is_vowel = false\n        is_consonant = false\n        is_space = false\n\
    \        for _, v := range vowels {\n            if c == v {\n               \
    \ is_vowel = true\n                break\n            }\n        }\n        if\
    \ is_vowel {\n            consonants = 0\n            word = \"\"\n          \
    \  continue\n        }\n        if c == ' ' {\n            is_space = true\n \
    \       }\n        if !is_vowel && !is_space {\n            is_consonant = true\n\
    \        }\n        if is_consonant {\n            consonants++\n            word\
    \ += string(c)\n        }\n        if is_space {\n            if consonants ==\
    \ n {\n                words = append(words, word)\n            }\n          \
    \  consonants = 0\n            word = \"\"\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    for _, w := range words\
    \ {\n        if len(w) > 0 {\n            result = append(result, w)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpausr6_cc_test.go:96: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpausr6_cc_test.go:96:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpausr6_cc_test.go:96: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpausr6_cc_test.go:96:\
    \ expected '[Uncle]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                result = append(result, word)\n            }\n        \
    \    word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if is_consonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlmovgsk_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, char := range s {\n        if char == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(char)\n            if isConsonant(char) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9838j24_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, char := range s {\n\
    \        if char == ' ' {\n            if count_consonants(word) == n {\n    \
    \            words = append(words, word)\n            }\n            word = \"\
    \"\n        } else {\n            word += string(char)\n        }\n    }\n   \
    \ if count_consonants(word) == n {\n        words = append(words, word)\n    }\n\
    \    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupl6z8o4_test.go:29:16: undefined: count_consonants

    /tmp/tmpupl6z8o4_test.go:37:8: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, char := range s {\n        if char == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(char)\n            if is_consonant(char) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8de1ql2l_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiouAEIOU\"\n    for _, c := range s {\n        if c == ' '\
    \ {\n            if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphdce6hdm_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    words := make([]string, 0)\n    for _, word := range split(s) {\n   \
    \     if count_consonants(word) == n {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T)\
    \ {\n  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq3rovvq7_test.go:26:26: undefined: split

    /tmp/tmpq3rovvq7_test.go:27:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  for _, char := range s {\n        if char == ' ' {\n            if consonants\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n            consonants = 0\n        } else {\n          \
    \  word += string(char)\n            if isConsonant(char) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24ey40mc_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var is_consonant bool\n    for _, char := range s {\n        if char == ' '\
    \ {\n            if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        \
    \    continue\n        }\n        if char == 'a' || char == 'e' || char == 'i'\
    \ || char == 'o' || char == 'u' {\n            is_consonant = false\n        }\
    \ else {\n            is_consonant = true\n        }\n        if is_consonant\
    \ {\n            consonants++\n        }\n        word += string(char)\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpsxpdszpb_test.go:73: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if consonants\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n            consonants = 0\n        } else {\n          \
    \  word += string(s[i])\n            if s[i] != 'a' && s[i] != 'e' && s[i] !=\
    \ 'i' && s[i] != 'o' && s[i] != 'u' {\n                consonants++\n        \
    \    }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpbw6qj5fl_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmbq2v1s_test.go:30:20: undefined: count_consonants

    /tmp/tmpzmbq2v1s_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var count int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if count == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \            count = 0\n        } else {\n            word += string(c)\n    \
    \        if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n     \
    \           count++\n            }\n        }\n    }\n    if count == n {\n  \
    \      words = append(words, word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpy3btxkvl_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                words\
    \ = append(words, word)\n                word = \"\"\n            }\n        }\
    \ else {\n            word += string(c)\n        }\n    }\n    if len(word) >\
    \ 0 {\n        words = append(words, word)\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if count_consonants(word) == n {\n \
    \           result = append(result, word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp67zjrxpw_test.go:42:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var count int\n    for\
    \ _, c := range s {\n        if c == ' ' {\n            if count == n {\n    \
    \            result = append(result, word)\n            }\n            word =\
    \ \"\"\n            count = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count++\n            }\n        }\n    }\n    if count == n {\n\
    \        result = append(result, word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpkagmo4e7_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var count int\n    for\
    \ _, char := range s {\n        if char == ' ' {\n            if count == n {\n\
    \                result = append(result, word)\n            }\n            word\
    \ = \"\"\n            count = 0\n        } else {\n            word += string(char)\n\
    \            if char != 'a' && char != 'e' && char != 'i' && char != 'o' && char\
    \ != 'u' {\n                count++\n            }\n        }\n    }\n    if count\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n\
    \nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpw3atfxdr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, char := range s\
    \ {\n        if char == ' ' {\n            if len(word) > 0 {\n              \
    \  if count_consonants(word) == n {\n                    result = append(result,\
    \ word)\n                }\n                word = \"\"\n            }\n     \
    \   } else {\n            word += string(char)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        if count_consonants(word) == n {\n            result = append(result,\
    \ word)\n        }\n    }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T)\
    \ {\n  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo3zd53b8_test.go:30:20: undefined: count_consonants

    /tmp/tmpo3zd53b8_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  var isConsonant bool\n    for _, char := range s {\n        if char == ' '\
    \ {\n            if consonants == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \            continue\n        }\n        isConsonant = true\n        switch char\
    \ {\n        case 'a', 'e', 'i', 'o', 'u':\n            isConsonant = false\n\
    \        }\n        if isConsonant {\n            consonants++\n        }\n  \
    \      word += string(char)\n    }\n    if consonants == n {\n        result =\
    \ append(result, word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpmlzrjkhr_test.go:73: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var isConsonant bool\n    for _, char := range s {\n        if char == ' ' {\n\
    \            if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        \
    \    continue\n        }\n        isConsonant = true\n        switch char {\n\
    \        case 'a', 'e', 'i', 'o', 'u':\n            isConsonant = false\n    \
    \    }\n        if isConsonant {\n            consonants++\n        }\n      \
    \  word += string(char)\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpe1lwl9xj_test.go:73: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var words []string\n    var word string\n  \
    \  var consonants int\n    var vowels int\n    var isWord bool\n    var isConsonant\
    \ bool\n    var isVowel bool\n    var isSpace bool\n    var isLetter bool\n  \
    \  var isEndOfWord bool\n    var isEndOfString bool\n    var isEndOfSentence bool\n\
    \    var isEndOfParagraph bool\n    var isEndOfLine bool\n    var isEndOfFile\
    \ bool\n    var isEndOfProgram bool\n    var isEndOfInput bool\n    var isEndOfOutput\
    \ bool\n    var isEndOfData bool\n    var isEndOfArray bool\n    var isEndOfList\
    \ bool\n    var isEndOfStack bool\n    var isEndOfQueue bool\n    var isEndOfHeap\
    \ bool\n    var isEndOfTree bool\n    var isEndOfGraph bool\n    var isEndOfNetwork\
    \ bool\n    var isEndOfWeb bool\n    var isEndOfInternet bool\n    var isEndOfWorld\
    \ bool\n    var isEndOfUniverse bool\n    var isEndOfLife bool\n    var isEndOfEverything\
    \ bool\n    var isEndOfNothing bool\n    var isEndOfEverythingAndNothing bool\n\
    \    var isEndOfSomething bool\n    var isEndOfAnything bool\n    var isEndOfSomethingAndAnything\
    \ bool\n    var isEndOfEverythingOrNothing bool\n    var isEndOfSomethingOrAnything\
    \ bool\n    var isEndOfEverythingAndNothingOrSomethingAndAnything bool\n    var\
    \ isEndOf bool\n    var isEnd bool\n    var isEnding bool\n    var isEnded bool\n\
    \    var isEnds bool\n    var isEndings bool\n    var isEndingss bool\n    var\
    \ isEndss bool\n    var isEndsss bool\n    var isEndssss bool\n    var isEndsssss\
    \ bool\n    var isEndssssss bool\n    var isEndsssssss bool\n    var isEndssssssss\
    \ bool\n    var isEndsssssssss bool\n    var isEndssssssssss bool\n    var isEndsssssssssss\
    \ bool\n    var isEndssssssssssss bool\n    var isEndsssssssssssss bool\n    var\
    \ isEndss\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpub0zpx12_test.go:86:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                result = append(result, word)\n            }\n        \
    \    word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxr051qyx_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmbq2v1s_test.go:30:20: undefined: count_consonants

    /tmp/tmpzmbq2v1s_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            if c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpliar2mgc_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            if c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpliar2mgc_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    words := make([]string, 0)\n    for _, word := range(strings.Split(s,\
    \ \" \")) {\n        if len(word) == 0 {\n            continue\n        }\n  \
    \      if count_consonants(word) == n {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T)\
    \ {\n  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpboy8mhpp_test.go:26:26: undefined: strings

    /tmp/tmpboy8mhpp_test.go:30:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var count int\n    for\
    \ _, c := range s {\n        if c == ' ' {\n            if count == n {\n    \
    \            result = append(result, word)\n            }\n            word =\
    \ \"\"\n            count = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                count++\n            }\n   \
    \     }\n    }\n    if count == n {\n        result = append(result, word)\n \
    \   }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp18leoa91_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var count int\n    for\
    \ _, c := range s {\n        if c == ' ' {\n            if count == n {\n    \
    \            result = append(result, word)\n            }\n            word =\
    \ \"\"\n            count = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count++\n            }\n        }\n    }\n    if count == n {\n\
    \        result = append(result, word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpkagmo4e7_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                result = append(result, word)\n            }\n        \
    \    word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxr051qyx_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  var vowels = \"aeiou\"\n    var is_vowel bool\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if consonants == n {\n                result\
    \ = append(result, word)\n            }\n            word = \"\"\n           \
    \ consonants = 0\n        } else {\n            is_vowel = false\n           \
    \ for _, v := range vowels {\n                if c == v {\n                  \
    \  is_vowel = true\n                    break\n                }\n           \
    \ }\n            if !is_vowel {\n                consonants++\n            }\n\
    \            word += string(c)\n        }\n    }\n    if consonants == n {\n \
    \       result = append(result, word)\n    }\n    return result\n}\n\nfunc TestSelect_Words(t\
    \ *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n\
    \     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"\
    Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected:\
    \ []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"\
    world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"\
    Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n    \
    \ { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"\
    d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpn3w0rtde_test.go:76: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if count_consonants(word) == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vciwlnf_test.go:29:16: undefined: count_consonants

    /tmp/tmp3vciwlnf_test.go:37:8: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmbq2v1s_test.go:30:20: undefined: count_consonants

    /tmp/tmpzmbq2v1s_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var isConsonant bool\n    for _, c := range s {\n        if c == ' ' {\n   \
    \         if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        \
    \    continue\n        }\n        isConsonant = true\n        switch c {\n   \
    \     case 'a', 'e', 'i', 'o', 'u':\n            isConsonant = false\n       \
    \ }\n        if isConsonant {\n            consonants++\n        }\n        word\
    \ += string(c)\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpsuxddwvb_test.go:73: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u':\
    \ true}\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            if\
    \ !vowels[c] {\n                consonants++\n            }\n            word\
    \ += string(c)\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmprqbujy16_test.go:68: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    var consonants int\n  \
    \  for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                result = append(result, word)\n            }\n        \
    \    word = \"\"\n            consonants = 0\n        } else {\n            if\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n               \
    \ consonants++\n            }\n            word += string(c)\n        }\n    }\n\
    \    if consonants == n {\n        result = append(result, word)\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpxche2u4r_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8j3c0brg_test.go:37:16: undefined: is_consonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var isConsonant bool\n    for _, c := range s {\n        if c == ' ' {\n   \
    \         if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        \
    \    continue\n        }\n        isConsonant = true\n        switch c {\n   \
    \     case 'a', 'e', 'i', 'o', 'u':\n            isConsonant = false\n       \
    \ }\n        if isConsonant {\n            consonants++\n        }\n        word\
    \ += string(c)\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpsuxddwvb_test.go:73: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    words := []string{}\n    for _, word := range strings.Split(s, \" \"\
    ) {\n        if len(word) == n {\n            words = append(words, word)\n  \
    \      }\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgfosmqx_test.go:26:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    return nil\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate :=\
    \ select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\"\
    , 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual:\
    \ candidate(\"simple white space\", 2), expected: []string{} },\n     { actual:\
    \ candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual:\
    \ candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual:\
    \ candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b\
    \ c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__0\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[little]', got '[]'\n   \
    \ --- FAIL: TestSelect_Words/test_num__1 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Mary lamb]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__3\
    \ (0.00s)\n        tmpbkmi_f63_test.go:47: expected '[world]', got '[]'\n    ---\
    \ FAIL: TestSelect_Words/test_num__4 (0.00s)\n        tmpbkmi_f63_test.go:47:\
    \ expected '[Uncle]', got '[]'\n    --- FAIL: TestSelect_Words/test_num__6 (0.00s)\n\
    \        tmpbkmi_f63_test.go:47: expected '[b c d f]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var result []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmbq2v1s_test.go:30:20: undefined: count_consonants

    /tmp/tmpzmbq2v1s_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if count_consonants(word) == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vciwlnf_test.go:29:16: undefined: count_consonants

    /tmp/tmp3vciwlnf_test.go:37:8: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dtd5yhf_test.go:30:20: undefined: count_consonants

    /tmp/tmp6dtd5yhf_test.go:40:12: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate\
    \ := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a\
    \ little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"\
    Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n    \
    \ { actual: candidate(\"simple white space\", 2), expected: []string{} },\n  \
    \   { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n\
    \     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n\
    \     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"\
    a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeps5c2jr_test.go:37:16: undefined: isConsonant

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var is_consonant bool\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        \
    \    continue\n        }\n        is_consonant = true\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            is_consonant = false\n     \
    \   }\n        if is_consonant {\n            consonants++\n        }\n      \
    \  word += string(c)\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n\
    \  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual:\
    \ candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"\
    } },\n     { actual: candidate(\"simple white space\", 2), expected: []string{}\
    \ },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"\
    } },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"\
    } },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual:\
    \ candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmpqwyp4k3e_test.go:73: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if count_consonants(word) == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3vciwlnf_test.go:29:16: undefined: count_consonants

    /tmp/tmp3vciwlnf_test.go:37:8: undefined: count_consonants

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n\n\
    func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
    \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\"\
    , 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
    \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello\
    \ world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle\
    \ sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\",\
    \ 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected:\
    \ []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSelect_Words (0.00s)\n    --- FAIL: TestSelect_Words/test_num__4\
    \ (0.00s)\n        tmp1_m59rjr_test.go:67: expected '[Uncle]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"\
    little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"\
    Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n\
    // >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"\
    Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string\
    \ {\n    var words []string\n    var word string\n    var consonants int\n   \
    \ var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n\nfunc TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4),\
    \ expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little\
    \ lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"\
    simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"\
    Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"\
    Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\
    \", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1),\
    \ expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x43nc4r_test.go:38:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
