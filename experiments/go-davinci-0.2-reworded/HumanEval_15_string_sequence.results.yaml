language: go_test.go
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO: Implement\
    \ me!\n    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpkaz7vyez_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpkaz7vyez_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpkaz7vyez_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpvvfjbwl2_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpvvfjbwl2_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpvvfjbwl2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprintf(\"\
    %d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO: Implement\
    \ me!\n    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpkaz7vyez_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpkaz7vyez_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpkaz7vyez_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return \"\"\n}\n\
    \nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpcraw0u_g_test.go:32: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpcraw0u_g_test.go:32: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpcraw0u_g_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    result := \"\"\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp2wmoigkw_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp2wmoigkw_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp2wmoigkw_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprintf(\"\
    %d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    // TODO: Implement\
    \ me!\n    return \"\"\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpkaz7vyez_test.go:33: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpkaz7vyez_test.go:33: expected\
    \ '0 1 2 3', got ''\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n \
    \       tmpkaz7vyez_test.go:33: expected '0 1 2 3 4 5 6 7 8 9 10', got ''\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    } else {\n        return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n    }\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n  \
    \      return \"0\"\n    }\n    return fmt.Sprintf(\"%s %d\", string_sequence(n-1),\
    \ n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n \
    \   for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n \
    \   return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpfcb679ej_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpfcb679ej_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpfcb679ej_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n\
    \    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n  \
    \  }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmpxs9fyddm_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmpxs9fyddm_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmpxs9fyddm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var str string\n\
    \    for i := 0; i <= n; i++ {\n        str += fmt.Sprintf(\"%d \", i)\n    }\n\
    \    return str\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5y0y02hn_test.go:36: expected '0', got '0 '\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5y0y02hn_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5y0y02hn_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073151
