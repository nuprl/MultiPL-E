name: HumanEval_140_fix_spaces
language: go_test.go
prompt: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string text, replace all spaces in it with underscores, \n// and if a\
  \ string has more than 2 consecutive spaces, \n// then replace all consecutive spaces\
  \ with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
  \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
  \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
  \ string {\n"
tests: "func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n   \
  \  { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n  \
  \   { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
  \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n    \
  \ { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result string\n    var space_count int\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            space_count++\n            if space_count\
    \ > 2 {\n                continue\n            }\n        } else {\n         \
    \   space_count = 0\n        }\n        result += string(c)\n    }\n    return\
    \ result\n}\n", "    var result string\n    var prev rune\n    var count int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            count++\n  \
    \          if count > 2 {\n                if prev != '-' {\n                \
    \    result += \"-\"\n                }\n            } else {\n              \
    \  if prev != '_' {\n                    result += \"_\"\n                }\n\
    \            }\n        } else {\n            result += string(c)\n          \
    \  count = 0\n        }\n        prev = c\n    }\n    return result\n}\n", " \
    \   return \"\"\n}\n", "    var result string\n    var space_count int\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            space_count++\n   \
    \         if space_count == 1 {\n                result += \"_\"\n           \
    \ } else if space_count == 2 {\n                result += \"_\"\n            }\n\
    \        } else {\n            if space_count > 2 {\n                result +=\
    \ \"-\"\n            }\n            result += string(c)\n            space_count\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result string\n   \
    \ var space_count int\n    for _, c := range text {\n        if c == ' ' {\n \
    \           space_count++\n            if space_count > 2 {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"_\"\n         \
    \   }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                result += \"-\"\n         \
    \   } else {\n                result += \"_\"\n            }\n        } else {\n\
    \            space_count = 0\n            result += string(c)\n        }\n   \
    \ }\n    return result\n}\n", "    var result string\n    var prev_char byte\n\
    \    var space_count int\n    for _, char := range text {\n        if char ==\
    \ ' ' {\n            space_count++\n            if space_count > 2 {\n       \
    \         continue\n            }\n        } else {\n            space_count =\
    \ 0\n        }\n        if char == ' ' && prev_char == ' ' {\n            result\
    \ = result[:len(result)-1]\n            result += \"-\"\n        } else {\n  \
    \          result += string(char)\n        }\n        prev_char = byte(char)\n\
    \    }\n    return result\n}\n", "    var result string\n    var space_count int\n\
    \    for _, char := range text {\n        if char == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                result += \"-\"\n         \
    \   } else {\n                result += \"_\"\n            }\n        } else {\n\
    \            space_count = 0\n            result += string(char)\n        }\n\
    \    }\n    return result\n}\n", "    var result string\n    var space_count int\n\
    \    for _, ch := range text {\n        if ch == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                result += \"-\"\n         \
    \   } else {\n                result += \"_\"\n            }\n        } else {\n\
    \            result += string(ch)\n            space_count = 0\n        }\n  \
    \  }\n    return result\n}\n", "    var result string\n    var space_count int\n\
    \    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                result += \"-\"\n         \
    \   } else {\n                result += \"_\"\n            }\n        } else {\n\
    \            space_count = 0\n            result += string(c)\n        }\n   \
    \ }\n    return result\n}\n", "    var result string\n    var last_char byte\n\
    \    var space_count int\n    for _, char := range text {\n        if char ==\
    \ ' ' {\n            space_count++\n            if space_count == 1 {\n      \
    \          result += string(char)\n            }\n        } else {\n         \
    \   if space_count > 1 {\n                result += \"_\"\n            }\n   \
    \         space_count = 0\n            result += string(char)\n        }\n   \
    \     last_char = byte(char)\n    }\n    if space_count > 1 {\n        result\
    \ += \"_\"\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"_\"\n         \
    \   }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    return \"\"\n}\n", "    // TODO:\
    \ implement\n    return \"\"\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count > 2 {\n                result += \"-\"\n          \
    \  }\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \        }\n    }\n    return result\n}\n", "    var result string\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count == 2 {\n                result += \"_\"\n         \
    \   }\n        } else {\n            if space_count > 2 {\n                result\
    \ += \"-\"\n            }\n            result += string(c)\n            space_count\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result string\n   \
    \ var count int\n    for _, c := range text {\n        if c == ' ' {\n       \
    \     count++\n            if count == 1 {\n                result += \"_\"\n\
    \            } else if count == 2 {\n                result += \"_\"\n       \
    \     } else {\n                result += \"-\"\n            }\n        } else\
    \ {\n            count = 0\n            result += string(c)\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    var prev_char byte\n   \
    \ var count int\n    for _, char := range text {\n        if char == ' ' {\n \
    \           count++\n            if count == 1 {\n                result += \"\
    _\"\n            } else if count == 2 {\n                result += \"-\"\n   \
    \         }\n        } else {\n            count = 0\n            result += string(char)\n\
    \        }\n        prev_char = byte(char)\n    }\n    return result\n}\n", " \
    \   var result string\n    var space_count int\n    for _, char := range text\
    \ {\n        if char == ' ' {\n            space_count++\n            if space_count\
    \ == 1 {\n                result += \"_\"\n            } else if space_count ==\
    \ 2 {\n                result += \"_\"\n            } else {\n               \
    \ result += \"-\"\n            }\n        } else {\n            space_count =\
    \ 0\n            result += string(char)\n        }\n    }\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
