language: go_test.go
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // TODO: implement the function\n    return nums\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp9zj1t8kx_test.go:43: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp9zj1t8kx_test.go:43: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp9zj1t8kx_test.go:43: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp9zj1t8kx_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp9zj1t8kx_test.go:43: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // your code here\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpuf0ew53__test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpuf0ew53__test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpuf0ew53__test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // your code here\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpuf0ew53__test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpuf0ew53__test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpuf0ew53__test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: Implement the function\n \
    \   return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp839h7iv__test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp839h7iv__test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp839h7iv__test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp839h7iv__test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp839h7iv__test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // TODO: Implement me!\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpmedlmpa6_test.go:43: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpmedlmpa6_test.go:43: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpmedlmpa6_test.go:43: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpmedlmpa6_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpmedlmpa6_test.go:43: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j\
    \ < len(nums); j++ {\n            if sum_digits(nums[i]) > sum_digits(nums[j])\
    \ {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n    \
    \    }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzy1hcv7_test.go:23:16: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j\
    \ < len(nums); j++ {\n            if sum_digits(nums[i]) > sum_digits(nums[j])\
    \ {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n    \
    \    }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzy1hcv7_test.go:23:16: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpe5o_osi7_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpe5o_osi7_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement me\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpgmvmgkrl_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpgmvmgkrl_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpgmvmgkrl_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpgmvmgkrl_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpgmvmgkrl_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // create a map of sum of digits to list of numbers\n    //\
    \ with that sum\n    sums := make(map[int][]int)\n    for _, num := range nums\
    \ {\n        sum := 0\n        for num != 0 {\n            sum += num % 10\n \
    \           num /= 10\n        }\n        sums[sum] = append(sums[sum], num)\n\
    \    }\n    // get a list of all the sums\n    keys := make([]int, 0, len(sums))\n\
    \    for key := range sums {\n        keys = append(keys, key)\n    }\n    //\
    \ sort the sums\n    for i := 0; i < len(keys) - 1; i++ {\n        for j := i\
    \ + 1; j < len(keys); j++ {\n            if keys[i] > keys[j] {\n            \
    \    keys[i], keys[j] = keys[j], keys[i]\n            }\n        }\n    }\n  \
    \  // create a list of numbers in sorted order\n    sorted := make([]int, 0, len(nums))\n\
    \    for _, key := range keys {\n        for _, num := range sums[key] {\n   \
    \         sorted = append(sorted, num)\n        }\n    }\n    return sorted\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxmrorfrs_test.go:73: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpxmrorfrs_test.go:73: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxmrorfrs_test.go:73:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxmrorfrs_test.go:73: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpxmrorfrs_test.go:73: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpe5o_osi7_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpe5o_osi7_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j\
    \ < len(nums); j++ {\n            if sum(nums[i]) > sum(nums[j]) {\n         \
    \       nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n\
    \    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ymep7kh_test.go:23:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // TODO: implement the function\n    return nums\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp9zj1t8kx_test.go:43: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp9zj1t8kx_test.go:43: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp9zj1t8kx_test.go:43: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp9zj1t8kx_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp9zj1t8kx_test.go:43: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    var sum [][]int\n    for i, v := range nums {\n        sum\
    \ = append(sum, []int{v, i})\n    }\n    for i := 0; i < len(sum); i++ {\n   \
    \     for j := i + 1; j < len(sum); j++ {\n            if sum[i][0] > sum[j][0]\
    \ {\n                sum[i], sum[j] = sum[j], sum[i]\n            }\n        }\n\
    \    }\n    for i := 0; i < len(sum); i++ {\n        for j := i + 1; j < len(sum);\
    \ j++ {\n            if sum[i][0] == sum[j][0] {\n                if sum[i][1]\
    \ > sum[j][1] {\n                    sum[i], sum[j] = sum[j], sum[i]\n       \
    \         }\n            }\n        }\n    }\n    var result []int\n    for _,\
    \ v := range sum {\n        result = append(result, v[0])\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmprhz4w4oz_test.go:66: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-12) %!s(int=-11) %!s(int=-1)\
    \ %!s(int=1) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmprhz4w4oz_test.go:66: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=37) %!s(int=46) %!s(int=53) %!s(int=56)\
    \ %!s(int=145) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=463) %!s(int=1234)\
    \ %!s(int=3457)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n   \
    \     tmprhz4w4oz_test.go:66: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98)\
    \ %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=-98)\
    \ %!s(int=-32) %!s(int=-11) %!s(int=-3) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmprhz4w4oz_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmprhz4w4oz_test.go:66: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement me\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpiho0s0qw_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpiho0s0qw_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpiho0s0qw_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpiho0s0qw_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpiho0s0qw_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // create a map to store the sum of digits\n    sum_map :=\
    \ make(map[int]int)\n    // create a map to store the index of the number\n  \
    \  index_map := make(map[int]int)\n    for i, num := range nums {\n        sum\
    \ := 0\n        for num != 0 {\n            sum += num % 10\n            num /=\
    \ 10\n        }\n        sum_map[i] = sum\n        index_map[i] = i\n    }\n \
    \   // sort the map by sum of digits\n    for i := 0; i < len(nums); i++ {\n \
    \       for j := i + 1; j < len(nums); j++ {\n            if sum_map[i] > sum_map[j]\
    \ {\n                sum_map[i], sum_map[j] = sum_map[j], sum_map[i]\n       \
    \         index_map[i], index_map[j] = index_map[j], index_map[i]\n          \
    \  }\n        }\n    }\n    // sort the original list\n    for i := 0; i < len(nums);\
    \ i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if index_map[i]\
    \ > index_map[j] {\n                index_map[i], index_map[j] = index_map[j],\
    \ index_map[i]\n                nums[i], nums[j] = nums[j], nums[i]\n        \
    \    }\n        }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpzm0k49od_test.go:73: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-11) %!s(int=-12) %!s(int=-1)\
    \ %!s(int=11) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpzm0k49od_test.go:73: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=3457)\
    \ %!s(int=53) %!s(int=0) %!s(int=37) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=2)\
    \ %!s(int=145) %!s(int=6) %!s(int=46) %!s(int=463) %!s(int=56) %!s(int=1234) %!s(int=3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpzm0k49od_test.go:73:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=54) %!s(int=43) %!s(int=-11) %!s(int=2)\
    \ %!s(int=-3) %!s(int=1) %!s(int=-98) %!s(int=-32)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpzm0k49od_test.go:73: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpzm0k49od_test.go:73: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=6)\
    \ %!s(int=23) %!s(int=4) %!s(int=0) %!s(int=6) %!s(int=-21) %!s(int=-76)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpnjo9vr2l_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpnjo9vr2l_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpnjo9vr2l_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpnjo9vr2l_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpnjo9vr2l_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpe5o_osi7_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpe5o_osi7_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // your code here\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpuf0ew53__test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpuf0ew53__test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpuf0ew53__test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: Implement me\n    return []int{}\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpu72c6pf1_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpu72c6pf1_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpu72c6pf1_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpu72c6pf1_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpu72c6pf1_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    var sum_map = make(map[int]int)\n \
    \   var index_map = make(map[int]int)\n    var sum_list []int\n    for i, v :=\
    \ range nums {\n        sum := 0\n        for v > 0 {\n            sum += v %\
    \ 10\n            v /= 10\n        }\n        sum_map[sum] = i\n        index_map[i]\
    \ = sum\n        sum_list = append(sum_list, sum)\n    }\n    fmt.Println(sum_map)\n\
    \    fmt.Println(index_map)\n    fmt.Println(sum_list)\n    return nums\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[0:4 1:0 2:1]\nmap[0:1 1:2 2:0 3:0 4:0]\n[1 2 0 0 0]\nmap[0:13 2:4 3:11\
    \ 6:8 8:7 9:6 10:14 11:12 13:2 19:10]\nmap[0:10 1:9 2:13 3:10 4:2 5:9 6:9 7:8\
    \ 8:6 9:10 10:19 11:3 12:11 13:0 14:10]\n[10 9 13 10 2 9 9 8 6 10 19 3 11 0 10]\n\
    map[]\nmap[]\n[]\nmap[0:7 1:0 2:6 7:3 9:4]\nmap[0:1 1:0 2:0 3:7 4:9 5:0 6:2 7:0]\n\
    [1 0 0 7 9 0 2 0]\nmap[1:9 2:10 3:2 4:3 5:4 6:5 7:6 8:7 9:8]\nmap[0:1 1:2 2:3\
    \ 3:4 4:5 5:6 6:7 7:8 8:9 9:1 10:2]\n[1 2 3 4 5 6 7 8 9 1 2]\nmap[0:4 4:6 5:5\
    \ 6:2]\nmap[0:0 1:6 2:6 3:0 4:0 5:5 6:4]\n[0 6 6 0 0 5 4]\n--- FAIL: TestOrder_By_Points\
    \ (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0 (0.00s)\n        tmp36btcc3t_test.go:55:\
    \ expected '[%!s(int=-1) %!s(int=-11) %!s(int=1) %!s(int=-12) %!s(int=11)]', got\
    \ '[%!s(int=1) %!s(int=11) %!s(int=-1) %!s(int=-11) %!s(int=-12)]'\n    --- FAIL:\
    \ TestOrder_By_Points/test_num__1 (0.00s)\n        tmp36btcc3t_test.go:55: expected\
    \ '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423)\
    \ %!s(int=423) %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56)\
    \ %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234) %!s(int=423) %!s(int=463)\
    \ %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423) %!s(int=53) %!s(int=6) %!s(int=37)\
    \ %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0) %!s(int=46)]'\n    --- FAIL:\
    \ TestOrder_By_Points/test_num__3 (0.00s)\n        tmp36btcc3t_test.go:55: expected\
    \ '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43)\
    \ %!s(int=54)]', got '[%!s(int=1) %!s(int=-11) %!s(int=-32) %!s(int=43) %!s(int=54)\
    \ %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp36btcc3t_test.go:55: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmp36btcc3t_test.go:55: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // create a map of sum of digits to list of numbers\n    //\
    \ with that sum\n    sum_to_nums := make(map[int][]int)\n    for _, num := range\
    \ nums {\n        sum := 0\n        for num != 0 {\n            sum += num % 10\n\
    \            num /= 10\n        }\n        sum_to_nums[sum] = append(sum_to_nums[sum],\
    \ num)\n    }\n    // create a list of sums\n    sums := make([]int, 0, len(sum_to_nums))\n\
    \    for sum := range sum_to_nums {\n        sums = append(sums, sum)\n    }\n\
    \    // sort the list of sums\n    for i := 0; i < len(sums); i++ {\n        for\
    \ j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n     \
    \           sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n  \
    \  }\n    // create the result list\n    result := make([]int, 0, len(nums))\n\
    \    for _, sum := range sums {\n        for _, num := range sum_to_nums[sum]\
    \ {\n            result = append(result, num)\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp3e7ehwjj_test.go:73: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp3e7ehwjj_test.go:73: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp3e7ehwjj_test.go:73:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp3e7ehwjj_test.go:73: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmp3e7ehwjj_test.go:73: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // Write your code here\n    return\
    \ nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmphdtkqgdh_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmphdtkqgdh_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmphdtkqgdh_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmphdtkqgdh_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmphdtkqgdh_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpnjo9vr2l_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpnjo9vr2l_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpnjo9vr2l_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpnjo9vr2l_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpnjo9vr2l_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpnjo9vr2l_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpnjo9vr2l_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpnjo9vr2l_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpnjo9vr2l_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpnjo9vr2l_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement me\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpiho0s0qw_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpiho0s0qw_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpiho0s0qw_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpiho0s0qw_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpiho0s0qw_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpe5o_osi7_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpe5o_osi7_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // create a map to store the sum of digits\n    sum_map :=\
    \ make(map[int]int)\n    // create a map to store the index of the number\n  \
    \  index_map := make(map[int]int)\n    for i, num := range nums {\n        sum\
    \ := 0\n        for num != 0 {\n            sum += num % 10\n            num /=\
    \ 10\n        }\n        sum_map[i] = sum\n        index_map[i] = i\n    }\n \
    \   // sort the map by value\n    for i := 0; i < len(nums) - 1; i++ {\n     \
    \   for j := i + 1; j < len(nums); j++ {\n            if sum_map[i] > sum_map[j]\
    \ {\n                sum_map[i], sum_map[j] = sum_map[j], sum_map[i]\n       \
    \         index_map[i], index_map[j] = index_map[j], index_map[i]\n          \
    \  }\n        }\n    }\n    // create a new list to store the result\n    result\
    \ := make([]int, len(nums))\n    for i, _ := range nums {\n        result[i] =\
    \ nums[index_map[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp3wmox6io_test.go:69: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-12) %!s(int=-11) %!s(int=-1)\
    \ %!s(int=1) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp3wmox6io_test.go:69: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423)\
    \ %!s(int=37) %!s(int=145) %!s(int=1234) %!s(int=46) %!s(int=56) %!s(int=463)\
    \ %!s(int=3457)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n   \
    \     tmp3wmox6io_test.go:69: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98)\
    \ %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=-98)\
    \ %!s(int=-32) %!s(int=-3) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // create a map to store the sum of digits of each number\n\
    \    sum_map := make(map[int]int)\n    for _, num := range nums {\n        sum_map[num]\
    \ = sum_digits(num)\n    }\n    // create a map to store the index of each number\n\
    \    index_map := make(map[int]int)\n    for index, num := range nums {\n    \
    \    index_map[num] = index\n    }\n    // sort the numbers based on their sum\
    \ of digits\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j <\
    \ len(nums); j++ {\n            if sum_map[nums[i]] > sum_map[nums[j]] {\n   \
    \             nums[i], nums[j] = nums[j], nums[i]\n            } else if sum_map[nums[i]]\
    \ == sum_map[nums[j]] {\n                if index_map[nums[i]] > index_map[nums[j]]\
    \ {\n                    nums[i], nums[j] = nums[j], nums[i]\n               \
    \ }\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqwpprhvw_test.go:24:24: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    var sum_map = make(map[int]int)\n    for i, v := range nums\
    \ {\n        sum_map[i] = sum_digits(v)\n    }\n    var sorted_nums = make([]int,\
    \ len(nums))\n    for i, v := range nums {\n        var min_sum = sum_map[i]\n\
    \        var min_index = i\n        for j, v := range sum_map {\n            if\
    \ v < min_sum {\n                min_sum = v\n                min_index = j\n\
    \            }\n        }\n        sorted_nums[i] = nums[min_index]\n        delete(sum_map,\
    \ min_index)\n    }\n    return sorted_nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfq3_qphw_test.go:23:22: undefined: sum_digits

    /tmp/tmpfq3_qphw_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    numsMap := make(map[int][]int)\n    for i, num := range nums\
    \ {\n        sum := 0\n        for num > 0 {\n            sum += num % 10\n  \
    \          num /= 10\n        }\n        numsMap[sum] = append(numsMap[sum], i)\n\
    \    }\n    result := make([]int, len(nums))\n    i := 0\n    for _, v := range\
    \ numsMap {\n        for _, index := range v {\n            result[i] = nums[index]\n\
    \            i++\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp1lo7vxf9_test.go:59: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-1) %!s(int=-11) %!s(int=-12)\
    \ %!s(int=1) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp1lo7vxf9_test.go:59: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=56)\
    \ %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=2) %!s(int=53) %!s(int=3) %!s(int=0)\
    \ %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=463) %!s(int=6) %!s(int=3457)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp1lo7vxf9_test.go:59:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=-11) %!s(int=-32) %!s(int=-98) %!s(int=-3)\
    \ %!s(int=43) %!s(int=54) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp1lo7vxf9_test.go:59: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=3) %!s(int=5) %!s(int=8) %!s(int=1) %!s(int=10)\
    \ %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=9) %!s(int=2) %!s(int=11)]'\n    ---\
    \ FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmp1lo7vxf9_test.go:59:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=23) %!s(int=4) %!s(int=0) %!s(int=-76) %!s(int=-21)\
    \ %!s(int=6) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j\
    \ < len(nums); j++ {\n            if sum_of_digits(nums[i]) > sum_of_digits(nums[j])\
    \ {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n    \
    \    }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpovznkvqi_test.go:23:16: undefined: sum_of_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // Write your code here\n    return\
    \ nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpk0d1ti4g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpk0d1ti4g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpk0d1ti4g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpk0d1ti4g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpk0d1ti4g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // sort by sum of digits\n    for i := 0; i < len(nums); i++\
    \ {\n        for j := i + 1; j < len(nums); j++ {\n            if sum_of_digits(nums[i])\
    \ > sum_of_digits(nums[j]) {\n                nums[i], nums[j] = nums[j], nums[i]\n\
    \            }\n        }\n    }\n    // sort by index\n    for i := 0; i < len(nums);\
    \ i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if sum_of_digits(nums[i])\
    \ == sum_of_digits(nums[j]) && i > j {\n                nums[i], nums[j] = nums[j],\
    \ nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0sm9p9_n_test.go:24:16: undefined: sum_of_digits

    /tmp/tmp0sm9p9_n_test.go:32:16: undefined: sum_of_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement me\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpgmvmgkrl_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpgmvmgkrl_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpgmvmgkrl_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpgmvmgkrl_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpgmvmgkrl_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // your code here\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpuf0ew53__test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpuf0ew53__test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpuf0ew53__test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // your code here\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpuf0ew53__test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpuf0ew53__test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpuf0ew53__test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpe5o_osi7_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpe5o_osi7_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // TODO: implement the function\n    return nums\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp9zj1t8kx_test.go:43: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp9zj1t8kx_test.go:43: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp9zj1t8kx_test.go:43: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp9zj1t8kx_test.go:43:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp9zj1t8kx_test.go:43: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // sort by sum of digits\n    sums := make([]int, len(nums))\n\
    \    for i, n := range nums {\n        sums[i] = sum_digits(n)\n    }\n    for\
    \ i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n\
    \            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j],\
    \ sums[i]\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n\
    \        }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbvphm0oi_test.go:24:19: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // TODO: implement\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp9f6oqd09_test.go:43: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp9f6oqd09_test.go:43: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp9f6oqd09_test.go:43:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp9f6oqd09_test.go:43: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp9f6oqd09_test.go:43: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpe5o_osi7_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpe5o_osi7_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpe5o_osi7_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // sort by sum of digits\n    for i := 0; i < len(nums); i++\
    \ {\n        for j := i + 1; j < len(nums); j++ {\n            if sum_of_digits(nums[i])\
    \ > sum_of_digits(nums[j]) {\n                nums[i], nums[j] = nums[j], nums[i]\n\
    \            }\n        }\n    }\n    // sort by index\n    for i := 0; i < len(nums);\
    \ i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if sum_of_digits(nums[i])\
    \ == sum_of_digits(nums[j]) && i > j {\n                nums[i], nums[j] = nums[j],\
    \ nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0sm9p9_n_test.go:24:16: undefined: sum_of_digits

    /tmp/tmp0sm9p9_n_test.go:32:16: undefined: sum_of_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return []int{}\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpqbr7c2i__test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpqbr7c2i__test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpqbr7c2i__test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    nums_map := make(map[int][]int)\n    for i, num := range nums\
    \ {\n        sum := 0\n        for num > 0 {\n            sum += num % 10\n  \
    \          num /= 10\n        }\n        nums_map[sum] = append(nums_map[sum],\
    \ i)\n    }\n    result := make([]int, len(nums))\n    index := 0\n    for i :=\
    \ 0; i < len(nums); i++ {\n        for _, num := range nums_map[i] {\n       \
    \     result[index] = nums[num]\n            index++\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmphofjux80_test.go:59: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-1) %!s(int=-11) %!s(int=-12)\
    \ %!s(int=1) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmphofjux80_test.go:59: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423)\
    \ %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463)\
    \ %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n      \
    \  tmphofjux80_test.go:59: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=-11) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-3) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=0)]'\n  \
    \  --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmphofjux80_test.go:59:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=0) %!s(int=-76) %!s(int=-21) %!s(int=4) %!s(int=23)\
    \ %!s(int=6) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nil\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpxgmml7j9_test.go:39:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpxgmml7j9_test.go:39: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpxgmml7j9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // your code here\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpuf0ew53__test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpuf0ew53__test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpuf0ew53__test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpuf0ew53__test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    var sum_map = make(map[int]int)\n    for i, num := range nums\
    \ {\n        sum_map[num] = sum_digits(num)\n    }\n    fmt.Println(sum_map)\n\
    \    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwlazeisn_test.go:22:9: i declared but not used

    /tmp/tmpwlazeisn_test.go:23:24: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement it\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp7oq7tvrv_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp7oq7tvrv_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp7oq7tvrv_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp7oq7tvrv_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp7oq7tvrv_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // create a map to store the sum of digits and the index of\
    \ the number\n    sum_map := make(map[int][]int)\n    for i, num := range nums\
    \ {\n        sum := 0\n        for num != 0 {\n            sum += num % 10\n \
    \           num /= 10\n        }\n        sum_map[sum] = append(sum_map[sum],\
    \ i)\n    }\n    // sort the keys\n    keys := make([]int, 0, len(sum_map))\n\
    \    for k := range sum_map {\n        keys = append(keys, k)\n    }\n    for\
    \ i := 0; i < len(keys) - 1; i++ {\n        for j := i + 1; j < len(keys); j++\
    \ {\n            if keys[i] > keys[j] {\n                keys[i], keys[j] = keys[j],\
    \ keys[i]\n            }\n        }\n    }\n    // sort the numbers\n    sorted_nums\
    \ := make([]int, len(nums))\n    for i, key := range keys {\n        for _, index\
    \ := range sum_map[key] {\n            sorted_nums[i] = nums[index]\n        \
    \    i++\n        }\n    }\n    return sorted_nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpr2zfnx3z_test.go:72: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-12) %!s(int=-11) %!s(int=-1)\
    \ %!s(int=1) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpr2zfnx3z_test.go:72: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=1234) %!s(int=56)\
    \ %!s(int=463) %!s(int=3457) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpr2zfnx3z_test.go:72:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=-98) %!s(int=-32) %!s(int=-3) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpr2zfnx3z_test.go:72: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmp57ytmequ_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmp57ytmequ_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp57ytmequ_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    return nums\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpon60gda9_test.go:39: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpon60gda9_test.go:39: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpon60gda9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpon60gda9_test.go:39: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement the function\n \
    \   return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpnjo9vr2l_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpnjo9vr2l_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpnjo9vr2l_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpnjo9vr2l_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpnjo9vr2l_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nums\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp04jfr4wi_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp04jfr4wi_test.go:40: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp04jfr4wi_test.go:40:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp04jfr4wi_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement\n    return nil\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpd1tlrcuf_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpd1tlrcuf_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpd1tlrcuf_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074062
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // create a map of sum of digits to list of numbers\n    sum_to_nums\
    \ := make(map[int][]int)\n    for i, num := range nums {\n        sum := 0\n \
    \       for num != 0 {\n            sum += num % 10\n            num /= 10\n \
    \       }\n        sum_to_nums[sum] = append(sum_to_nums[sum], i)\n    }\n   \
    \ // sort the keys\n    keys := make([]int, 0, len(sum_to_nums))\n    for key\
    \ := range sum_to_nums {\n        keys = append(keys, key)\n    }\n    sort.Ints(keys)\n\
    \    // create the result\n    result := make([]int, len(nums))\n    i := 0\n\
    \    for _, key := range keys {\n        for _, index := range sum_to_nums[key]\
    \ {\n            result[i] = nums[index]\n            i++\n        }\n    }\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphisp03rf_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // create a map of sum of digits to list of numbers\n    //\
    \ with that sum\n    sum_to_nums := make(map[int][]int)\n    for _, num := range\
    \ nums {\n        sum := 0\n        for num != 0 {\n            sum += num % 10\n\
    \            num /= 10\n        }\n        sum_to_nums[sum] = append(sum_to_nums[sum],\
    \ num)\n    }\n    // sort the keys\n    keys := make([]int, 0, len(sum_to_nums))\n\
    \    for key := range sum_to_nums {\n        keys = append(keys, key)\n    }\n\
    \    for i := 0; i < len(keys) - 1; i++ {\n        for j := i + 1; j < len(keys);\
    \ j++ {\n            if keys[i] > keys[j] {\n                keys[i], keys[j]\
    \ = keys[j], keys[i]\n            }\n        }\n    }\n    // create the result\n\
    \    result := make([]int, 0, len(nums))\n    for _, key := range keys {\n   \
    \     for _, num := range sum_to_nums[key] {\n            result = append(result,\
    \ num)\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpkqmrtimt_test.go:72: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpkqmrtimt_test.go:72: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpkqmrtimt_test.go:72:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpkqmrtimt_test.go:72: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpkqmrtimt_test.go:72: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    // TODO: implement this function\n\
    \    return []int{}\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpwfkehz_g_test.go:40:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpwfkehz_g_test.go:40: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpwfkehz_g_test.go:40: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074062
