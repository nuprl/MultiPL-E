name: HumanEval_34_unique
language: go_test.go
prompt: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0,\
  \ 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n"
tests: "func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
  \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    m := make(map[int]bool)\n    for _, v := range l {\n        m[v]\
    \ = true\n    }\n    r := make([]int, 0, len(m))\n    for k, _ := range m {\n\
    \        r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    r := make([]int, 0,\
    \ len(m))\n    for k, _ := range m {\n        r = append(r, k)\n    }\n    return\
    \ r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v]\
    \ = true\n    }\n    var r []int\n    for k := range m {\n        r = append(r,\
    \ k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _, v :=\
    \ range l {\n        m[v] = true\n    }\n    r := make([]int, 0, len(m))\n   \
    \ for k, _ := range m {\n        r = append(r, k)\n    }\n    return r\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n \
    \   }\n    var r []int\n    for k := range m {\n        r = append(r, k)\n   \
    \ }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l\
    \ {\n        m[v] = true\n    }\n    u := make([]int, 0, len(m))\n    for k :=\
    \ range m {\n        u = append(u, k)\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    //\
    \ TODO: implement\n    return nil\n}\n", "    var u []int\n    m := make(map[int]bool)\n\
    \n    for _, v := range l {\n        if _, ok := m[v]; !ok {\n            m[v]\
    \ = true\n            u = append(u, v)\n        }\n    }\n\n    return u\n}\n",
  "    var u []int\n    for _, v := range l {\n        if !contains(u, v) {\n    \
    \        u = append(u, v)\n        }\n    }\n    return u\n}\n", "    // TODO\n\
    \    return nil\n}\n", "    m := make(map[int]bool)\n    for _, v := range l {\n\
    \        m[v] = true\n    }\n    r := make([]int, 0, len(m))\n    for k, _ :=\
    \ range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, i := range l {\n        m[i] = true\n    }\n\
    \    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n        r[i]\
    \ = k\n        i++\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var\
    \ u []int\n    for _, v := range l {\n        if !contains(u, v) {\n         \
    \   u = append(u, v)\n        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var r []int\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n", "    m\
    \ := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n    }\n\
    \    r := make([]int, 0, len(m))\n    for k, _ := range m {\n        r = append(r,\
    \ k)\n    }\n    return r\n}\n", "    var unique_list []int\n    for _, v := range\
    \ l {\n        if !contains(unique_list, v) {\n            unique_list = append(unique_list,\
    \ v)\n        }\n    }\n    return unique_list\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    var res []int\n  \
    \  for k := range m {\n        res = append(res, k)\n    }\n    return res\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
