name: HumanEval_6_parse_nested_parens
language: go_test.go
prompt: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string string) []int {\n"
tests: "func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"),\
  \ expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
  ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"),\
  \ expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []int\n    var current_level int\n    var current_max\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > current_max {\n       \
    \         current_max = current_level\n            }\n        } else if c == ')'\
    \ {\n            current_level -= 1\n        } else if c == ' ' {\n          \
    \  result = append(result, current_max)\n            current_max = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, current_max)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            current_level\
    \ = 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level--\n        } else if c == ' ' {\n \
    \           result = append(result, max_level)\n            max_level = 0\n  \
    \          current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var max_depth int\n    var\
    \ depth int\n    for _, c := range paren_string {\n        if c == '(' {\n   \
    \         depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if c == ')' {\n            depth -= 1\n\
    \        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var max_level int\n    var current_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if c == ')' {\n            current_level--\n        } else if c\
    \ == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_depth int\n    var depth int\n\
    \    var result []int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            depth += 1\n            if depth > max_depth {\n            \
    \    max_depth = depth\n            }\n        } else if c == ')' {\n        \
    \    depth -= 1\n        } else if c == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            depth = 0\n        }\n  \
    \  }\n    result = append(result, max_depth)\n    return result\n}\n", "    var\
    \ result []int\n    var max_depth int\n    var depth int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            depth++\n            if\
    \ depth > max_depth {\n                max_depth = depth\n            }\n    \
    \    } else if char == ')' {\n            depth--\n        } else if char == '\
    \ ' {\n            result = append(result, max_depth)\n            max_depth =\
    \ 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level -= 1\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            level += 1\n        } else if c == ')'\
    \ {\n            level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, level)\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var max_nesting int\n    var nesting int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            nesting += 1\n    \
    \        if nesting > max_nesting {\n                max_nesting = nesting\n \
    \           }\n        } else if c == ')' {\n            nesting -= 1\n      \
    \  } else if c == ' ' {\n            result = append(result, max_nesting)\n  \
    \          max_nesting = 0\n            nesting = 0\n        }\n    }\n    result\
    \ = append(result, max_nesting)\n    return result\n}\n", "    var result []int\n\
    \    var depth int\n    for _, char := range paren_string {\n        if char ==\
    \ '(' {\n            depth++\n        } else if char == ')' {\n            depth--\n\
    \        } else if char == ' ' {\n            result = append(result, depth)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    var paren_stack\
    \ []int\n    var max_depth int\n    var current_depth int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            paren_stack = append(paren_stack,\
    \ 1)\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \            current_depth -= 1\n        } else if char == ' ' {\n           \
    \ result = append(result, max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var stack []byte\n    var max_depth int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            stack = append(stack, byte(c))\n     \
    \       if len(stack) > max_depth {\n                max_depth = len(stack)\n\
    \            }\n        } else if c == ')' {\n            stack = stack[:len(stack)-1]\n\
    \        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var max_level int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level += 1\n            if\
    \ level > max_level {\n                max_level = level\n            }\n    \
    \    } else if c == ')' {\n            level -= 1\n        } else if c == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            level++\n    \
    \    } else if c == ')' {\n            level--\n        } else if c == ' ' {\n\
    \            result = append(result, level)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level += 1\n    \
    \    } else if c == ')' {\n            current_level -= 1\n        } else if c\
    \ == ' ' {\n            result = append(result, current_level)\n            current_level\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level += 1\n            if\
    \ current_level > max_level {\n                max_level = current_level\n   \
    \         }\n        } else if char == ')' {\n            current_level -= 1\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            current_level = 0\n            max_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var paren_stack []string\n    var paren_count int\n    for _, paren\
    \ := range paren_string {\n        if paren == '(' {\n            paren_stack\
    \ = append(paren_stack, \")\")\n            paren_count++\n        } else if paren\
    \ == ')' {\n            if len(paren_stack) > 0 {\n                paren_stack\
    \ = paren_stack[:len(paren_stack)-1]\n            } else {\n                paren_count\
    \ = 0\n            }\n        } else if paren == ' ' {\n            result = append(result,\
    \ paren_count)\n            paren_count = 0\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if char == ')'\
    \ {\n            current_level -= 1\n        } else if char == ' ' {\n       \
    \     result = append(result, max_level)\n            current_level = 0\n    \
    \        max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            level++\n\
    \        } else if char == ')' {\n            level--\n        } else if char\
    \ == ' ' {\n            result = append(result, level)\n        }\n    }\n   \
    \ return result\n}\n", "    var max_depth int\n    var current_depth int\n   \
    \ var result []int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if c == ')' {\n            current_depth -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   for _, char := range paren_string {\n        if char == '(' {\n          \
    \  current_level += 1\n        } else if char == ')' {\n            result = append(result,\
    \ current_level)\n            current_level -= 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var max_nesting int\n    var current_nesting int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            current_nesting++\n\
    \            if current_nesting > max_nesting {\n                max_nesting =\
    \ current_nesting\n            }\n        } else if c == ')' {\n            current_nesting--\n\
    \        } else if c == ' ' {\n            result = append(result, max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n        }\n   \
    \ }\n    result = append(result, max_nesting)\n    return result\n}\n", "    var\
    \ result []int\n    var stack []string\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   stack = append(stack, \"(\")\n            current_level++\n            if\
    \ current_level > max_level {\n                max_level = current_level\n   \
    \         }\n        } else if c == ')' {\n            stack = stack[:len(stack)-1]\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var max_depth int\n    var depth int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            depth++\n \
    \           if depth > max_depth {\n                max_depth = depth\n      \
    \      }\n        } else if c == ')' {\n            depth--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var max_level int\n    var\
    \ level int\n    for _, c := range paren_string {\n        if c == '(' {\n   \
    \         level++\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if c == ')' {\n            level--\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var max_level int\n    var level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if c == ')' {\n            current_level\
    \ -= 1\n        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            current_level = 0\n            max_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_depth\
    \ int\n    var cur_depth int\n    var max_depths []int\n    var cur_paren rune\n\
    \    var paren_stack []rune\n\n    for _, cur_paren = range paren_string {\n \
    \       if cur_paren == '(' {\n            cur_depth += 1\n            paren_stack\
    \ = append(paren_stack, cur_paren)\n        } else if cur_paren == ')' {\n   \
    \         if len(paren_stack) == 0 {\n                fmt.Println(\"Error: unmatched\
    \ right paren\")\n                return nil\n            }\n            paren_stack\
    \ = paren_stack[:len(paren_stack)-1]\n            if cur_depth > max_depth {\n\
    \                max_depth = cur_depth\n            }\n            cur_depth -=\
    \ 1\n        } else if cur_paren == ' ' {\n            if len(paren_stack) !=\
    \ 0 {\n                fmt.Println(\"Error: unmatched left paren\")\n        \
    \        return nil\n            }\n            max_depths = append(max_depths,\
    \ max_depth)\n            max_depth = 0\n        } else {\n            fmt.Println(\"\
    Error: invalid character\")\n            return nil\n        }\n    }\n    if\
    \ len(paren_stack) != 0 {\n        fmt.Println(\"Error: unmatched left paren\"\
    )\n        return nil\n    }\n    max_depths = append(max_depths, max_depth)\n\
    \    return max_depths\n}\n", "    var result []int\n    var level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            level += 1\n\
    \        } else if c == ')' {\n            level -= 1\n        } else if c ==\
    \ ' ' {\n            result = append(result, level)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var max_depth int\n    var\
    \ depth int\n    for _, c := range paren_string {\n        if c == '(' {\n   \
    \         depth++\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if c == ')' {\n            depth--\n\
    \        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var paren_stack []string\n    var paren_count int\n    var paren_max int\n\
    \    for _, paren := range paren_string {\n        if string(paren) == \"(\" {\n\
    \            paren_stack = append(paren_stack, \"(\")\n            paren_count\
    \ += 1\n            if paren_count > paren_max {\n                paren_max =\
    \ paren_count\n            }\n        } else if string(paren) == \")\" {\n   \
    \         paren_stack = paren_stack[:len(paren_stack)-1]\n            paren_count\
    \ -= 1\n        } else if string(paren) == \" \" {\n            result = append(result,\
    \ paren_max)\n            paren_max = 0\n            paren_count = 0\n       \
    \ }\n    }\n    return result\n}\n", "    var result []int\n    var level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            level++\n\
    \        } else if c == ')' {\n            level--\n        } else if c == ' '\
    \ {\n            result = append(result, level)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level--\n        }\n    }\n    return result\n}\n", "   \
    \ var result []int\n    var max_level int\n    var level int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            level++\n         \
    \   if level > max_level {\n                max_level = level\n            }\n\
    \        } else if c == ')' {\n            level--\n        } else if c == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            current_level\
    \ = 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level--\n        } else if c == ' ' {\n          \
    \  if current_level == max_level {\n                result = append(result, max_level)\n\
    \                max_level = 0\n            }\n            current_level = 0\n\
    \        }\n    }\n    return result\n}\n", "    var max_depth int\n    var depth\
    \ int\n    var result []int\n    for _, char := range paren_string {\n       \
    \ if char == '(' {\n            depth += 1\n            if depth > max_depth {\n\
    \                max_depth = depth\n            }\n        } else if char == ')'\
    \ {\n            depth -= 1\n        } else if char == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level++\n       \
    \     if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var depth_list\
    \ []int\n    var depth int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            depth += 1\n        } else if char == ')' {\n   \
    \         depth -= 1\n        } else if char == ' ' {\n            depth_list\
    \ = append(depth_list, depth)\n        }\n    }\n    return depth_list\n}\n",
  "    var result []int\n    var stack []int\n    var max_nesting int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            stack = append(stack,\
    \ 1)\n            if len(stack) > max_nesting {\n                max_nesting =\
    \ len(stack)\n            }\n        } else if c == ')' {\n            stack =\
    \ stack[:len(stack)-1]\n        } else if c == ' ' {\n            result = append(result,\
    \ max_nesting)\n            max_nesting = 0\n        }\n    }\n    result = append(result,\
    \ max_nesting)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            if current_level == max_level {\n\
    \                result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level -= 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            current_level--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if c == ')' {\n            current_level\
    \ -= 1\n        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            current_level = 0\n            max_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var paren_stack []string\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         paren_stack = append(paren_stack, \"(\")\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if char == ')' {\n          \
    \  paren_stack = paren_stack[:len(paren_stack)-1]\n            current_level -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    return result\n}\n", "    var max_level []int\n    var level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            level++\n\
    \        } else if char == ')' {\n            level--\n        } else if char\
    \ == ' ' {\n            max_level = append(max_level, level)\n            level\
    \ = 0\n        }\n    }\n    max_level = append(max_level, level)\n    return\
    \ max_level\n}\n", "    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \        } else if c == ')' {\n            current_level--\n        } else if\
    \ c == ' ' {\n            result = append(result, current_level)\n           \
    \ current_level = 0\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level++\n       \
    \     if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_nesting_level\
    \ []int\n    var current_nesting_level int\n    for _, paren := range paren_string\
    \ {\n        if paren == '(' {\n            current_nesting_level++\n        }\
    \ else if paren == ')' {\n            max_nesting_level = append(max_nesting_level,\
    \ current_nesting_level)\n            current_nesting_level--\n        }\n   \
    \ }\n    return max_nesting_level\n}\n", "    var result []int\n    var max_level\
    \ int = 0\n    var level int = 0\n    for _, c := range paren_string {\n     \
    \   if c == '(' {\n            level++\n            if level > max_level {\n \
    \               max_level = level\n            }\n        } else if c == ')' {\n\
    \            level--\n        } else if c == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ max_nesting_levels []int\n    var current_nesting_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_nesting_level\
    \ += 1\n        } else if char == ')' {\n            current_nesting_level -=\
    \ 1\n        } else if char == ' ' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ current_nesting_level)\n            current_nesting_level = 0\n        }\n \
    \   }\n    return max_nesting_levels\n}\n", "    var result []int\n    var stack\
    \ []int\n    var max_level int\n    var level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            stack = append(stack, 1)\n        \
    \    level++\n            if level > max_level {\n                max_level =\
    \ level\n            }\n        } else if char == ')' {\n            stack = stack[:len(stack)-1]\n\
    \            level--\n        } else if char == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ max_depth int\n    var cur_depth int\n    var result []int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            cur_depth++\n\
    \            if cur_depth > max_depth {\n                max_depth = cur_depth\n\
    \            }\n        } else if char == ')' {\n            cur_depth--\n   \
    \     } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            cur_depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var max_level int\n    var level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var max_nesting_levels []int\n    var current_nesting_level int\n \
    \   for _, char := range paren_string {\n        if char == '(' {\n          \
    \  current_nesting_level += 1\n        } else if char == ')' {\n            current_nesting_level\
    \ -= 1\n        } else if char == ' ' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ current_nesting_level)\n            current_nesting_level = 0\n        }\n \
    \   }\n    return max_nesting_levels\n}\n", "    var result []int\n    var current_level\
    \ int = 0\n    var max_level int = 0\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   current_level = 0\n            max_level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var result []int\n\
    \    var current_level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if c == ')' {\n            current_level--\n        } else if c\
    \ == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n        } else if c == ')' {\n            current_level--\n\
    \        } else if c == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if char == ')' {\n          \
    \  current_level -= 1\n        } else if char == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            current_level = 0\n     \
    \   }\n    }\n    result = append(result, max_level)\n    return result\n}\n",
  "    var result []int\n    var max_nesting int\n    var current_nesting int\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ current_nesting++\n            if current_nesting > max_nesting {\n        \
    \        max_nesting = current_nesting\n            }\n        } else if char\
    \ == ')' {\n            current_nesting--\n        } else if char == ' ' {\n \
    \           result = append(result, max_nesting)\n            max_nesting = 0\n\
    \            current_nesting = 0\n        }\n    }\n    result = append(result,\
    \ max_nesting)\n    return result\n}\n", "    var result []int\n    var stack\
    \ []int\n    var max_depth int\n    for _, char := range paren_string {\n    \
    \    if char == '(' {\n            stack = append(stack, 0)\n        } else if\
    \ char == ')' {\n            if len(stack) > 0 {\n                depth := stack[len(stack)-1]\
    \ + 1\n                stack = stack[:len(stack)-1]\n                if depth\
    \ > max_depth {\n                    max_depth = depth\n                }\n  \
    \              if len(stack) > 0 {\n                    stack[len(stack)-1] =\
    \ depth\n                }\n            }\n        } else if char == ' ' {\n \
    \           if len(stack) == 0 {\n                result = append(result, max_depth)\n\
    \                max_depth = 0\n            }\n        }\n    }\n    if len(stack)\
    \ == 0 {\n        result = append(result, max_depth)\n    }\n    return result\n\
    }\n", "    // TODO: Implement this function.\n    return []int{}\n}\n", "    var\
    \ max_depth []int\n    var depth int\n    for _, c := range paren_string {\n \
    \       if c == '(' {\n            depth += 1\n        } else if c == ')' {\n\
    \            depth -= 1\n        } else if c == ' ' {\n            max_depth =\
    \ append(max_depth, depth)\n            depth = 0\n        }\n    }\n    return\
    \ max_depth\n}\n", "    var result []int\n    var level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            level++\n      \
    \  } else if char == ')' {\n            level--\n        } else if char == ' '\
    \ {\n            result = append(result, level)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var stack []int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   stack = append(stack, 1)\n            if len(stack) > max_level {\n      \
    \          max_level = len(stack)\n            }\n        } else if c == ')' {\n\
    \            stack = stack[:len(stack)-1]\n        } else if c == ' ' {\n    \
    \        result = append(result, max_level)\n            max_level = 0\n     \
    \   }\n    }\n    result = append(result, max_level)\n    return result\n}\n",
  "    var result []int\n    var current_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n        } else if c ==\
    \ ')' {\n            current_level--\n        } else if c == ' ' {\n         \
    \   result = append(result, current_level)\n            current_level = 0\n  \
    \      }\n    }\n    return result\n}\n", "    var max_depth int\n    var current_depth\
    \ int\n    var result []int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if c == ')' {\n            current_depth -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            current_level\
    \ = 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var max_depth\
    \ int\n    var current_depth int\n    for _, char := range paren_string {\n  \
    \      if char == '(' {\n            current_depth += 1\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            current_depth -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_depth)\n         \
    \   max_depth = 0\n            current_depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var max_depth int\
    \ = 0\n    var current_depth int = 0\n    var result []int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_depth += 1\n    \
    \        if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if c == ')' {\n            current_depth -= 1\n\
    \        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result = append(result, max_depth)\n    return result\n}\n", "    var result\
    \ []int\n    var level int\n    var i int\n    for i = 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            level++\n        } else\
    \ if paren_string[i] == ')' {\n            level--\n        } else if paren_string[i]\
    \ == ' ' {\n            result = append(result, level)\n            level = 0\n\
    \        }\n    }\n    result = append(result, level)\n    return result\n}\n",
  "    var result []int\n    var level int\n    for _, c := range paren_string {\n\
    \        if c == '(' {\n            level++\n        } else if c == ')' {\n  \
    \          level--\n        } else if c == ' ' {\n            result = append(result,\
    \ level)\n        }\n    }\n    return result\n}\n", "    var result []int\n \
    \   var current_level int\n    for _, c := range paren_string {\n        if c\
    \ == '(' {\n            current_level += 1\n        } else if c == ')' {\n   \
    \         current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, current_level)\n            current_level = 0\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var max_depth int = 0\n    var cur_depth\
    \ int = 0\n    var result []int\n    for _, c := range paren_string {\n      \
    \  if c == '(' {\n            cur_depth += 1\n            if cur_depth > max_depth\
    \ {\n                max_depth = cur_depth\n            }\n        } else if c\
    \ == ')' {\n            cur_depth -= 1\n        } else if c == ' ' {\n       \
    \     result = append(result, max_depth)\n            max_depth = 0\n        \
    \    cur_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level -= 1\n        }\n    }\n    return result\n\
    }\n", "    var max_depth []int\n    var depth int\n    var i int\n    for i =\
    \ 0; i < len(paren_string); i++ {\n        if paren_string[i] == '(' {\n     \
    \       depth++\n        } else if paren_string[i] == ')' {\n            depth--\n\
    \        } else if paren_string[i] == ' ' {\n            max_depth = append(max_depth,\
    \ depth)\n            depth = 0\n        }\n    }\n    max_depth = append(max_depth,\
    \ depth)\n    return max_depth\n}\n", "    var results []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level -= 1\n        } else\
    \ if char == ' ' {\n            results = append(results, max_level)\n       \
    \     current_level = 0\n            max_level = 0\n        }\n    }\n    results\
    \ = append(results, max_level)\n    return results\n}\n", "    var result []int\n\
    \    var current_level int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            current_level += 1\n        } else if char == ')'\
    \ {\n            result = append(result, current_level)\n            current_level\
    \ -= 1\n        }\n    }\n    return result\n}\n", "    var result []int\n   \
    \ var cur_level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            cur_level += 1\n            if cur_level\
    \ > max_level {\n                max_level = cur_level\n            }\n      \
    \  } else if c == ')' {\n            cur_level -= 1\n        } else if c == '\
    \ ' {\n            result = append(result, max_level)\n            cur_level =\
    \ 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n        } else if c == ')' {\n            current_level\
    \ -= 1\n        } else if c == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_depth\
    \ []int\n    var depth int\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            depth++\n        } else if char == ')' {\n      \
    \      depth--\n        } else if char == ' ' {\n            max_depth = append(max_depth,\
    \ depth)\n            depth = 0\n        }\n    }\n    return max_depth\n}\n",
  "    var result []int\n    var paren_count int\n    var max_paren_count int\n  \
    \  for _, c := range paren_string {\n        if c == '(' {\n            paren_count++\n\
    \            if paren_count > max_paren_count {\n                max_paren_count\
    \ = paren_count\n            }\n        } else if c == ')' {\n            paren_count--\n\
    \        } else if c == ' ' {\n            result = append(result, max_paren_count)\n\
    \            max_paren_count = 0\n            paren_count = 0\n        }\n   \
    \ }\n    result = append(result, max_paren_count)\n    return result\n}\n", " \
    \   var result []int\n    var stack []int\n    var max_level int\n    for _, c\
    \ := range paren_string {\n        if c == '(' {\n            stack = append(stack,\
    \ 1)\n            if len(stack) > max_level {\n                max_level = len(stack)\n\
    \            }\n        } else if c == ')' {\n            stack = stack[:len(stack)-1]\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            if current_level == max_level {\n            \
    \    result = append(result, max_level)\n                max_level = 0\n     \
    \       }\n            current_level -= 1\n        }\n    }\n    return result\n\
    }\n", "    if paren_string == \"\" {\n        return []int{}\n    }\n    var result\
    \ []int\n    var max_depth int\n    var depth int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            depth += 1\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if c ==\
    \ ')' {\n            depth -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    // TODO: implement this function\n    return []int{}\n}\n", "    var\
    \ result []int\n    var current_level int\n    var max_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    for _, c := range paren_string {\n   \
    \     if c == '(' {\n            current_level++\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, current_level)\n            current_level = 0\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var paren_stack\
    \ []int\n    var max_depth int\n    for _, paren := range paren_string {\n   \
    \     if paren == '(' {\n            paren_stack = append(paren_stack, 1)\n  \
    \          if len(paren_stack) > max_depth {\n                max_depth = len(paren_stack)\n\
    \            }\n        } else if paren == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \        } else if paren == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n        }\n    }\n    return result\n}\n", "    var\
    \ paren_stack []int\n    var max_depth []int\n    var depth int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            paren_stack =\
    \ append(paren_stack, 1)\n            depth++\n        } else if char == ')' {\n\
    \            paren_stack = paren_stack[:len(paren_stack)-1]\n            depth--\n\
    \        } else if char == ' ' {\n            max_depth = append(max_depth, depth)\n\
    \            depth = 0\n        }\n    }\n    max_depth = append(max_depth, depth)\n\
    \    return max_depth\n}\n", "    var result []int\n    var stack []int\n    var\
    \ max_depth int\n    for _, c := range paren_string {\n        if c == '(' {\n\
    \            stack = append(stack, 1)\n            if len(stack) > max_depth {\n\
    \                max_depth = len(stack)\n            }\n        } else if c ==\
    \ ')' {\n            stack = stack[:len(stack)-1]\n        } else if c == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \        }\n    }\n    return result\n}\n", "    var paren_stack []int\n    var\
    \ max_depth []int\n    var depth int\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            paren_stack = append(paren_stack, 1)\n\
    \            depth += 1\n        } else if char == ')' {\n            paren_stack\
    \ = paren_stack[:len(paren_stack)-1]\n            depth -= 1\n        } else if\
    \ char == ' ' {\n            max_depth = append(max_depth, depth)\n          \
    \  depth = 0\n        }\n    }\n    return max_depth\n}\n", "    var result []int\n\
    \    var max_level int\n    var level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    // TODO: Implement this function.\n    return []int{}\n}\n", "    var\
    \ result []int\n    var current_level int\n    var max_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var level int\n    for _, c := range paren_string {\n        if c\
    \ == '(' {\n            level++\n        } else if c == ')' {\n            level--\n\
    \        } else if c == ' ' {\n            result = append(result, level)\n  \
    \      }\n    }\n    return result\n}\n", "    var max_depth []int\n    var depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   depth += 1\n        } else if c == ')' {\n            depth -= 1\n       \
    \ } else if c == ' ' {\n            max_depth = append(max_depth, depth)\n   \
    \         depth = 0\n        }\n    }\n    return max_depth\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level++\n       \
    \     if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var current_max int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level +=\
    \ 1\n            if current_level > current_max {\n                current_max\
    \ = current_level\n            }\n        } else if char == ')' {\n          \
    \  current_level -= 1\n        } else if char == ' ' {\n            result = append(result,\
    \ current_max)\n            current_max = 0\n            current_level = 0\n \
    \       }\n    }\n    result = append(result, current_max)\n    return result\n\
    }\n", "    var result []int\n    var level int\n    var max_level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            level++\n \
    \           if level > max_level {\n                max_level = level\n      \
    \      }\n        } else if c == ')' {\n            level--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var max_depth int\n    var depth int\n    var max_depths\
    \ []int\n    for _, char := range paren_string {\n        if char == '(' {\n \
    \           depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            max_depths = append(max_depths,\
    \ max_depth)\n            max_depth = 0\n            depth = 0\n        }\n  \
    \  }\n    max_depths = append(max_depths, max_depth)\n    return max_depths\n\
    }\n", "    var result []int\n    var stack []int\n    var depth int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            stack =\
    \ append(stack, 1)\n            depth += 1\n        } else if char == ')' {\n\
    \            stack = stack[:len(stack)-1]\n            depth -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, depth)\n        }\n  \
    \  }\n    return result\n}\n", "    var max_nesting []int\n    var current_nesting\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_nesting += 1\n        } else if c == ')' {\n            current_nesting\
    \ -= 1\n        } else if c == ' ' {\n            max_nesting = append(max_nesting,\
    \ current_nesting)\n            current_nesting = 0\n        }\n    }\n    return\
    \ max_nesting\n}\n", "    var max_depth []int\n    var depth int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            depth += 1\n\
    \        } else if char == ')' {\n            depth -= 1\n        } else if char\
    \ == ' ' {\n            max_depth = append(max_depth, depth)\n            depth\
    \ = 0\n        }\n    }\n    return max_depth\n}\n", "    var result []int\n \
    \   var current_level int\n    var current_max int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            current_level++\n            if current_level\
    \ > current_max {\n                current_max = current_level\n            }\n\
    \        } else if c == ')' {\n            current_level--\n        } else if\
    \ c == ' ' {\n            result = append(result, current_max)\n            current_max\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ current_max)\n    return result\n}\n", "    var max_depth []int\n    var depth\
    \ int\n    var paren_count int\n    for _, paren := range paren_string {\n   \
    \     if paren == '(' {\n            depth += 1\n            paren_count += 1\n\
    \        } else if paren == ')' {\n            depth -= 1\n            paren_count\
    \ += 1\n        }\n        if paren_count == 2 {\n            max_depth = append(max_depth,\
    \ depth)\n            depth = 0\n            paren_count = 0\n        }\n    }\n\
    \    return max_depth\n}\n", "    var result []int\n    var current_level int\n\
    \    var max_level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level--\n        } else if c == ' ' {\n \
    \           result = append(result, max_level)\n            max_level = 0\n  \
    \          current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var max_depth\
    \ int\n    var current_depth int\n    for _, char := range paren_string {\n  \
    \      if char == '(' {\n            current_depth++\n            if current_depth\
    \ > max_depth {\n                max_depth = current_depth\n            }\n  \
    \      } else if char == ')' {\n            current_depth--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n", "    var result []int\n    var max_level\
    \ int\n    var level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            level++\n            if level > max_level {\n           \
    \     max_level = level\n            }\n        } else if c == ')' {\n       \
    \     level--\n        } else if c == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ max_depth int = 0\n    var depth int = 0\n    var result []int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            depth++\n   \
    \         if depth > max_depth {\n                max_depth = depth\n        \
    \    }\n        } else if char == ')' {\n            depth--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var depth int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            depth++\n    \
    \    } else if c == ')' {\n            depth--\n        } else if c == ' ' {\n\
    \            result = append(result, depth)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if char == ')'\
    \ {\n            current_level -= 1\n        } else if char == ' ' {\n       \
    \     result = append(result, max_level)\n            current_level = 0\n    \
    \        max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_level++\n            if current_level > max_level {\n\
    \                max_level = current_level\n            }\n        } else if c\
    \ == ')' {\n            current_level--\n        } else if c == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var max_level int\n    var\
    \ level int\n    for _, c := range paren_string {\n        if c == '(' {\n   \
    \         level++\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if c == ')' {\n            level--\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var max_nesting_levels\
    \ []int\n    var current_nesting_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_nesting_level++\n        }\
    \ else if char == ')' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ current_nesting_level)\n            current_nesting_level--\n        }\n   \
    \ }\n    return max_nesting_levels\n}\n", "    var max_level []int\n    var level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         level++\n        } else if char == ')' {\n            level--\n    \
    \    } else if char == ' ' {\n            max_level = append(max_level, level)\n\
    \            level = 0\n        }\n    }\n    max_level = append(max_level, level)\n\
    \    return max_level\n}\n", "    var result []int\n    var current_level int\n\
    \    var max_level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var current_max int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            current_level += 1\n            if current_level > current_max\
    \ {\n                current_max = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, current_max)\n            current_max = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ current_max)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            if current_level == max_level {\n\
    \                result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level -= 1\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var max_depth int\n    var depth int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n", "    var result []int\n\
    \    var count int\n    var max int\n    for _, c := range paren_string {\n  \
    \      if c == '(' {\n            count++\n            if count > max {\n    \
    \            max = count\n            }\n        } else if c == ')' {\n      \
    \      count--\n        } else if c == ' ' {\n            result = append(result,\
    \ max)\n            max = 0\n            count = 0\n        }\n    }\n    result\
    \ = append(result, max)\n    return result\n}\n", "    // TODO: Implement this\
    \ function\n    return []int{}\n}\n", "    var max_depth int\n    var current_depth\
    \ int\n    var result []int\n    var i int\n\n    for i = 0; i < len(paren_string);\
    \ i++ {\n        if paren_string[i] == '(' {\n            current_depth++\n  \
    \          if current_depth > max_depth {\n                max_depth = current_depth\n\
    \            }\n        } else if paren_string[i] == ')' {\n            current_depth--\n\
    \        } else if paren_string[i] == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            current_depth = 0\n     \
    \   }\n    }\n    result = append(result, max_depth)\n    return result\n}\n",
  "    var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level += 1\n    \
    \        if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            if current_level ==\
    \ max_level {\n                result = append(result, max_level)\n          \
    \      max_level = 0\n            }\n            current_level -= 1\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   for _, char := range paren_string {\n        if char == '(' {\n          \
    \  current_level += 1\n        } else if char == ')' {\n            current_level\
    \ -= 1\n        } else if char == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if c == ')' {\n            current_level\
    \ -= 1\n        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var max_depth\
    \ int\n    var depth int\n    var result []int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            depth += 1\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if c ==\
    \ ')' {\n            depth -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if char == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level--\n\
    \        } else if char == ' ' {\n            if current_level == max_level {\n\
    \                result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level = 0\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_level)\n         \
    \   current_level = 0\n            max_level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n", "    var max_nesting_level\
    \ []int\n    var nesting_level int\n    for _, ch := range paren_string {\n  \
    \      if ch == '(' {\n            nesting_level++\n        } else if ch == ')'\
    \ {\n            max_nesting_level = append(max_nesting_level, nesting_level)\n\
    \            nesting_level--\n        }\n    }\n    return max_nesting_level\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if c == ')' {\n            current_level\
    \ -= 1\n        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    for _, c := range paren_string {\n   \
    \     if c == '(' {\n            current_level += 1\n        } else if c == ')'\
    \ {\n            result = append(result, current_level)\n            current_level\
    \ -= 1\n        }\n    }\n    return result\n}\n", "    var result []int\n   \
    \ var current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level += 1\n            if\
    \ current_level > max_level {\n                max_level = current_level\n   \
    \         }\n        } else if char == ')' {\n            current_level -= 1\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            current_level = 0\n            max_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level +=\
    \ 1\n            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            current_level = 0\n            max_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var max_level int\n    var level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            if current_level ==\
    \ max_level {\n                result = append(result, max_level)\n          \
    \      max_level = 0\n            }\n            current_level--\n        } else\
    \ if c == ' ' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level = 0\n        }\n    }\n    return result\n}\n",
  "    var max_nesting_levels []int\n    var current_nesting_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_nesting_level\
    \ += 1\n        } else if char == ')' {\n            current_nesting_level -=\
    \ 1\n        } else if char == ' ' {\n            max_nesting_levels = append(max_nesting_levels,\
    \ current_nesting_level)\n            current_nesting_level = 0\n        }\n \
    \   }\n    return max_nesting_levels\n}\n", "    var result []int\n    var paren_stack\
    \ []byte\n    var max_level int\n    for _, c := range paren_string {\n      \
    \  if c == '(' {\n            paren_stack = append(paren_stack, byte(c))\n   \
    \         max_level++\n        } else if c == ')' {\n            paren_stack =\
    \ paren_stack[:len(paren_stack)-1]\n            max_level--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ current_level int\n    var max_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var max_level\
    \ int\n    var level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            level += 1\n            if level > max_level {\n        \
    \        max_level = level\n            }\n        } else if c == ')' {\n    \
    \        level -= 1\n        } else if c == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            level = 0\n        }\n  \
    \  }\n    result = append(result, max_level)\n    return result\n}\n", "    var\
    \ result []int\n    var max_level int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n            if level\
    \ > max_level {\n                max_level = level\n            }\n        } else\
    \ if c == ')' {\n            level--\n        } else if c == ' ' {\n         \
    \   result = append(result, max_level)\n            max_level = 0\n          \
    \  level = 0\n        }\n    }\n    result = append(result, max_level)\n    return\
    \ result\n}\n", "    var result []int\n    var current_level int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level--\n        }\n    }\n    return result\n}\n", "   \
    \ var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if char == ')' {\n          \
    \  current_level -= 1\n        } else if char == ' ' {\n            result = append(result,\
    \ max_level)\n            current_level = 0\n            max_level = 0\n     \
    \   }\n    }\n    result = append(result, max_level)\n    return result\n}\n",
  "    var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var level int\n    var max_level int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var max_level int\n    var level int\n    for\
    \ _, c := range paren_string {\n        if c == '(' {\n            level++\n \
    \           if level > max_level {\n                max_level = level\n      \
    \      }\n        } else if c == ')' {\n            level--\n        } else if\
    \ c == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, c := range paren_string {\n        if c == '('\
    \ {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level -= 1\n        } else if c == ' ' {\n\
    \            result = append(result, max_level)\n            max_level = 0\n \
    \           current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if char == ')' {\n            current_level--\n        } else if\
    \ char == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var max_nesting\
    \ int\n    var nesting int\n    for _, c := range paren_string {\n        if c\
    \ == '(' {\n            nesting += 1\n            if nesting > max_nesting {\n\
    \                max_nesting = nesting\n            }\n        } else if c ==\
    \ ')' {\n            nesting -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_nesting)\n            max_nesting = 0\n            nesting\
    \ = 0\n        }\n    }\n    result = append(result, max_nesting)\n    return\
    \ result\n}\n", "    var result []int\n    var level int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            level++\n        } else\
    \ if char == ')' {\n            level--\n        } else if char == ' ' {\n   \
    \         result = append(result, level)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var depth int\n    var max_depth int\n    var\
    \ i int\n    for i = 0; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            depth++\n            if depth > max_depth {\n        \
    \        max_depth = depth\n            }\n        } else if paren_string[i] ==\
    \ ')' {\n            depth--\n        } else if paren_string[i] == ' ' {\n   \
    \         result = append(result, max_depth)\n            max_depth = 0\n    \
    \    }\n    }\n    result = append(result, max_depth)\n    return result\n}\n",
  "    var result []int\n    var max_depth int\n    var depth int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            depth++\n         \
    \   if depth > max_depth {\n                max_depth = depth\n            }\n\
    \        } else if c == ')' {\n            depth--\n        } else if c == ' '\
    \ {\n            result = append(result, max_depth)\n            max_depth = 0\n\
    \            depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            if current_level == max_level {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \    }\n            current_level--\n        } else if c == ' ' {\n          \
    \  if current_level == max_level {\n                result = append(result, max_level)\n\
    \                max_level = 0\n            }\n            current_level = 0\n\
    \        }\n    }\n    return result\n}\n", "    paren_list := []int{}\n    paren_stack\
    \ := []int{}\n    for _, paren := range paren_string {\n        if paren == '('\
    \ {\n            paren_stack = append(paren_stack, 1)\n        } else if paren\
    \ == ')' {\n            if len(paren_stack) == 0 {\n                paren_list\
    \ = append(paren_list, 0)\n            } else {\n                paren_stack =\
    \ paren_stack[:len(paren_stack)-1]\n                paren_list = append(paren_list,\
    \ len(paren_stack))\n            }\n        }\n    }\n    return paren_list\n\
    }\n", "    var result []int\n    var stack []rune\n    var depth int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            stack\
    \ = append(stack, char)\n            depth++\n        } else if char == ')' {\n\
    \            stack = stack[:len(stack)-1]\n            depth--\n        } else\
    \ if char == ' ' {\n            result = append(result, depth)\n        }\n  \
    \  }\n    return result\n}\n", "    // TODO: Implement this function\n    return\
    \ []int{}\n}\n", "    var max_depth []int\n    var depth int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            depth++\n   \
    \     } else if char == ')' {\n            depth--\n        } else if char ==\
    \ ' ' {\n            max_depth = append(max_depth, depth)\n            depth =\
    \ 0\n        }\n    }\n    return max_depth\n}\n", "    var result []int\n   \
    \ var max_level int\n    var level int\n    for _, c := range paren_string {\n\
    \        if c == '(' {\n            level++\n            if level > max_level\
    \ {\n                max_level = level\n            }\n        } else if c ==\
    \ ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            level =\
    \ 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    for _, char := range\
    \ paren_string {\n        if char == '(' {\n            current_level += 1\n \
    \       } else if char == ')' {\n            current_level -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, current_level)\n     \
    \       current_level = 0\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var current_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_level++\n        } else if\
    \ char == ')' {\n            result = append(result, current_level)\n        \
    \    current_level--\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, c := range\
    \ paren_string {\n        switch c {\n        case '(':\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        case ')':\n            current_level--\n        case '\
    \ ':\n            result = append(result, max_level)\n            max_level =\
    \ 0\n            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var depth int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth++\n        } else if char == ')' {\n            depth--\n        } else\
    \ if char == ' ' {\n            result = append(result, depth)\n        }\n  \
    \  }\n    return result\n}\n", "    var result []int\n    var level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            level++\n\
    \        } else if char == ')' {\n            level--\n        } else if char\
    \ == ' ' {\n            result = append(result, level)\n        }\n    }\n   \
    \ return result\n}\n", "    var result []int\n    var current_level int\n    var\
    \ max_level int\n    for _, char := range paren_string {\n        if char == '('\
    \ {\n            current_level++\n            if current_level > max_level {\n\
    \                max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level--\n        } else if char == ' ' {\n   \
    \         result = append(result, max_level)\n            max_level = 0\n    \
    \        current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n", "    var result []int\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if c == ')' {\n            current_level--\n        } else if c == ' ' {\n \
    \           result = append(result, max_level)\n            max_level = 0\n  \
    \          current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n", "    var result []int\n    var current_level int\n \
    \   var max_level int\n    for _, char := range paren_string {\n        switch\
    \ char {\n        case '(':\n            current_level += 1\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      case ')':\n            if current_level == max_level {\n              \
    \  result = append(result, max_level)\n                max_level = 0\n       \
    \     }\n            current_level -= 1\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    var max_level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if c == ')' {\n            current_level--\n  \
    \      } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level +=\
    \ 1\n            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var max_depth int\n    var depth int\n    for _, c := range paren_string\
    \ {\n        if c == '(' {\n            depth += 1\n            if depth > max_depth\
    \ {\n                max_depth = depth\n            }\n        } else if c ==\
    \ ')' {\n            depth -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            depth =\
    \ 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n", "    var result []int\n    var depth int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            depth += 1\n        } else if char\
    \ == ')' {\n            depth -= 1\n        } else if char == ' ' {\n        \
    \    result = append(result, depth)\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    var current_level int\n    var max_level int\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var current_max int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > current_max {\n                current_max = current_level\n\
    \            }\n        } else if char == ')' {\n            current_level--\n\
    \        } else if char == ' ' {\n            result = append(result, current_max)\n\
    \            current_max = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, current_max)\n    return result\n}\n", "    var result\
    \ []int\n    var current_level int\n    var max_level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            current_level++\n\
    \            if current_level > max_level {\n                max_level = current_level\n\
    \            }\n        } else if char == ')' {\n            if current_level\
    \ == max_level {\n                result = append(result, max_level)\n       \
    \         max_level = 0\n            }\n            current_level--\n        }\
    \ else if char == ' ' {\n            if current_level == max_level {\n       \
    \         result = append(result, max_level)\n                max_level = 0\n\
    \            }\n            current_level = 0\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    var current_level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            current_level += 1\n    \
    \    } else if c == ')' {\n            current_level -= 1\n        } else if c\
    \ == ' ' {\n            result = append(result, current_level)\n            current_level\
    \ = 0\n        }\n    }\n    return result\n}\n", "    var result []int\n    var\
    \ paren_stack []rune\n    var paren_level int\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            paren_stack = append(paren_stack, char)\n\
    \            paren_level++\n        } else if char == ')' {\n            paren_stack\
    \ = paren_stack[:len(paren_stack)-1]\n            paren_level--\n        } else\
    \ if char == ' ' {\n            result = append(result, paren_level)\n       \
    \ }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
