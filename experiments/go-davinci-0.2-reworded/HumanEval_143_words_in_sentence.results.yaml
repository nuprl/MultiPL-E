language: go_test.go
name: HumanEval_143_words_in_sentence
results:
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ejbqgs8_test.go:23:14: undefined: strings

    /tmp/tmp6ejbqgs8_test.go:26:12: undefined: is_prime

    /tmp/tmp6ejbqgs8_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range split_sentence(sentence) {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5iy1h9tz_test.go:24:26: undefined: split_sentence

    /tmp/tmp5iy1h9tz_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5_gow6a_test.go:24:14: undefined: strings

    /tmp/tmpv5_gow6a_test.go:26:12: undefined: is_prime

    /tmp/tmpv5_gow6a_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += string(word)\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpql2j3n2q_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            words = append(words, result)\n            result = \"\"\n\
    \        } else {\n            result += string(word)\n        }\n    }\n    words\
    \ = append(words, result)\n    result = \"\"\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7u_3t4a1_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    var words = strings.Split(sentence, \" \")\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7_z2oii_test.go:24:17: undefined: strings

    /tmp/tmpl7_z2oii_test.go:26:12: undefined: is_prime

    /tmp/tmpl7_z2oii_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5_gow6a_test.go:24:14: undefined: strings

    /tmp/tmpv5_gow6a_test.go:26:12: undefined: is_prime

    /tmp/tmpv5_gow6a_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            words = append(words, result)\n            result = \"\"\n\
    \        } else {\n            result += string(word)\n        }\n    }\n    words\
    \ = append(words, result)\n    var primeWords []string\n    for _, word := range\
    \ words {\n        if isPrime(len(word)) {\n            primeWords = append(primeWords,\
    \ word)\n        }\n    }\n    return strings.Join(primeWords, \" \")\n}\n\nfunc\
    \ TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpslqcum87_test.go:36:12: undefined: isPrime

    /tmp/tmpslqcum87_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := []string{}\n    for _, word := range words {\n       \
    \ if is_prime(len(word)) {\n            result = append(result, word)\n      \
    \  }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpto9w0d8u_test.go:23:14: undefined: strings

    /tmp/tmpto9w0d8u_test.go:26:12: undefined: is_prime

    /tmp/tmpto9w0d8u_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5_gow6a_test.go:24:14: undefined: strings

    /tmp/tmpv5_gow6a_test.go:26:12: undefined: is_prime

    /tmp/tmpv5_gow6a_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoq4kiyic_test.go:24:26: undefined: strings

    /tmp/tmpoq4kiyic_test.go:25:12: undefined: is_prime

    /tmp/tmpoq4kiyic_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5_gow6a_test.go:24:14: undefined: strings

    /tmp/tmpv5_gow6a_test.go:26:12: undefined: is_prime

    /tmp/tmpv5_gow6a_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuvsy1_x_test.go:24:26: undefined: strings

    /tmp/tmpkuvsy1_x_test.go:25:12: undefined: is_prime

    /tmp/tmpkuvsy1_x_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ejbqgs8_test.go:23:14: undefined: strings

    /tmp/tmp6ejbqgs8_test.go:26:12: undefined: is_prime

    /tmp/tmp6ejbqgs8_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    var words = strings.Split(sentence, \" \")\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7_z2oii_test.go:24:17: undefined: strings

    /tmp/tmpl7_z2oii_test.go:26:12: undefined: is_prime

    /tmp/tmpl7_z2oii_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        if is_prime(len(word)) {\n            words = append(words, word)\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptk3a0cfx_test.go:24:9: result declared but not used

    /tmp/tmptk3a0cfx_test.go:25:26: undefined: strings

    /tmp/tmptk3a0cfx_test.go:26:12: undefined: is_prime

    /tmp/tmptk3a0cfx_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoq4kiyic_test.go:24:26: undefined: strings

    /tmp/tmpoq4kiyic_test.go:25:12: undefined: is_prime

    /tmp/tmpoq4kiyic_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoq4kiyic_test.go:24:26: undefined: strings

    /tmp/tmpoq4kiyic_test.go:25:12: undefined: is_prime

    /tmp/tmpoq4kiyic_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            words = append(words, result)\n            result = \"\"\n\
    \        } else {\n            result += string(word)\n        }\n    }\n    words\
    \ = append(words, result)\n    var resultWords []string\n    for _, word := range\
    \ words {\n        if isPrime(len(word)) {\n            resultWords = append(resultWords,\
    \ word)\n        }\n    }\n    return strings.Join(resultWords, \" \")\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiudcje0m_test.go:36:12: undefined: isPrime

    /tmp/tmpiudcje0m_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            words = append(words, result)\n            result = \"\"\n\
    \        } else {\n            result += string(word)\n        }\n    }\n    words\
    \ = append(words, result)\n    result = \"\"\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7u_3t4a1_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: implement\
    \ this function\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpy6xgope1_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpy6xgope1_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpy6xgope1_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpy6xgope1_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpy6xgope1_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpy6xgope1_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := []string{}\n    for _, word := range words {\n       \
    \ if is_prime(len(word)) {\n            result = append(result, word)\n      \
    \  }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpto9w0d8u_test.go:23:14: undefined: strings

    /tmp/tmpto9w0d8u_test.go:26:12: undefined: is_prime

    /tmp/tmpto9w0d8u_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoq4kiyic_test.go:24:26: undefined: strings

    /tmp/tmpoq4kiyic_test.go:25:12: undefined: is_prime

    /tmp/tmpoq4kiyic_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimRight(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzkq2keda_test.go:23:14: undefined: strings

    /tmp/tmpzkq2keda_test.go:26:12: undefined: is_prime

    /tmp/tmpzkq2keda_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    var words = strings.Split(sentence, \" \")\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7_z2oii_test.go:24:17: undefined: strings

    /tmp/tmpl7_z2oii_test.go:26:12: undefined: is_prime

    /tmp/tmpl7_z2oii_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ejbqgs8_test.go:23:14: undefined: strings

    /tmp/tmp6ejbqgs8_test.go:26:12: undefined: is_prime

    /tmp/tmp6ejbqgs8_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: Implement\
    \ the function\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmp86n0wq9u_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmp86n0wq9u_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmp86n0wq9u_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmp86n0wq9u_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmp86n0wq9u_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmp86n0wq9u_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoq4kiyic_test.go:24:26: undefined: strings

    /tmp/tmpoq4kiyic_test.go:25:12: undefined: is_prime

    /tmp/tmpoq4kiyic_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            words = append(words, result)\n            result = \"\"\n\
    \        } else {\n            result += string(word)\n        }\n    }\n    words\
    \ = append(words, result)\n    var prime_words []string\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            prime_words = append(prime_words,\
    \ word)\n        }\n    }\n    return strings.Join(prime_words, \" \")\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3e7h6lq_test.go:36:12: undefined: is_prime

    /tmp/tmpn3e7h6lq_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            words = append(words, result)\n            result = \"\"\n\
    \        } else {\n            result += string(word)\n        }\n    }\n    words\
    \ = append(words, result)\n    var result_words []string\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            result_words = append(result_words,\
    \ word)\n        }\n    }\n    return strings.Join(result_words, \" \")\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpentubm34_test.go:36:12: undefined: is_prime

    /tmp/tmpentubm34_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: Implement\
    \ the function\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmp86n0wq9u_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmp86n0wq9u_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmp86n0wq9u_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmp86n0wq9u_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmp86n0wq9u_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmp86n0wq9u_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoq4kiyic_test.go:24:26: undefined: strings

    /tmp/tmpoq4kiyic_test.go:25:12: undefined: is_prime

    /tmp/tmpoq4kiyic_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuvsy1_x_test.go:24:26: undefined: strings

    /tmp/tmpkuvsy1_x_test.go:25:12: undefined: is_prime

    /tmp/tmpkuvsy1_x_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5_gow6a_test.go:24:14: undefined: strings

    /tmp/tmpv5_gow6a_test.go:26:12: undefined: is_prime

    /tmp/tmpv5_gow6a_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: Implement\
    \ the function\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmp86n0wq9u_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmp86n0wq9u_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmp86n0wq9u_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmp86n0wq9u_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmp86n0wq9u_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmp86n0wq9u_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := []string{}\n    for _, word := range words {\n       \
    \ if is_prime(len(word)) {\n            result = append(result, word)\n      \
    \  }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpto9w0d8u_test.go:23:14: undefined: strings

    /tmp/tmpto9w0d8u_test.go:26:12: undefined: is_prime

    /tmp/tmpto9w0d8u_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := []string{}\n    for _, word := range words {\n       \
    \ if is_prime(len(word)) {\n            result = append(result, word)\n      \
    \  }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpto9w0d8u_test.go:23:14: undefined: strings

    /tmp/tmpto9w0d8u_test.go:26:12: undefined: is_prime

    /tmp/tmpto9w0d8u_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoq4kiyic_test.go:24:26: undefined: strings

    /tmp/tmpoq4kiyic_test.go:25:12: undefined: is_prime

    /tmp/tmpoq4kiyic_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result += word + \" \"\n        }\n    }\n\
    \    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgmymq3zr_test.go:23:14: undefined: strings

    /tmp/tmpgmymq3zr_test.go:26:12: undefined: is_prime

    /tmp/tmpgmymq3zr_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var word string\n    for _, c := range sentence {\n        if c == ' ' {\n\
    \            words = append(words, word)\n            word = \"\"\n        } else\
    \ {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpggklvaoe_test.go:36:12: undefined: is_prime

    /tmp/tmpggklvaoe_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return strings.Trim(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp99qhtqmt_test.go:24:14: undefined: strings

    /tmp/tmp99qhtqmt_test.go:26:12: undefined: is_prime

    /tmp/tmp99qhtqmt_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5_gow6a_test.go:24:14: undefined: strings

    /tmp/tmpv5_gow6a_test.go:26:12: undefined: is_prime

    /tmp/tmpv5_gow6a_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    words = strings.Split(sentence, \" \")\n    for _,\
    \ word := range words {\n        if is_prime(len(word)) {\n            result\
    \ += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7of9g5tz_test.go:25:13: undefined: strings

    /tmp/tmp7of9g5tz_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimRight(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdv8qhby2_test.go:24:26: undefined: strings

    /tmp/tmpdv8qhby2_test.go:25:12: undefined: is_prime

    /tmp/tmpdv8qhby2_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result []string\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppq7yd5fd_test.go:24:26: undefined: strings

    /tmp/tmppq7yd5fd_test.go:25:12: undefined: is_prime

    /tmp/tmppq7yd5fd_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            words = append(words, result)\n            result = \"\"\n\
    \        } else {\n            result += string(word)\n        }\n    }\n    words\
    \ = append(words, result)\n    var prime_words []string\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            prime_words = append(prime_words,\
    \ word)\n        }\n    }\n    return strings.Join(prime_words, \" \")\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3e7h6lq_test.go:36:12: undefined: is_prime

    /tmp/tmpn3e7h6lq_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuvsy1_x_test.go:24:26: undefined: strings

    /tmp/tmpkuvsy1_x_test.go:25:12: undefined: is_prime

    /tmp/tmpkuvsy1_x_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuvsy1_x_test.go:24:26: undefined: strings

    /tmp/tmpkuvsy1_x_test.go:25:12: undefined: is_prime

    /tmp/tmpkuvsy1_x_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimRight(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdv8qhby2_test.go:24:26: undefined: strings

    /tmp/tmpdv8qhby2_test.go:25:12: undefined: is_prime

    /tmp/tmpdv8qhby2_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5_gow6a_test.go:24:14: undefined: strings

    /tmp/tmpv5_gow6a_test.go:26:12: undefined: is_prime

    /tmp/tmpv5_gow6a_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9txs9_07_test.go:25:12: undefined: is_prime

    /tmp/tmp9txs9_07_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return strings.TrimSpace(result)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6ydka_t_test.go:24:26: undefined: strings

    /tmp/tmpd6ydka_t_test.go:25:12: undefined: is_prime

    /tmp/tmpd6ydka_t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var result string\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            words = append(words, result)\n            result = \"\"\n\
    \        } else {\n            result += string(word)\n        }\n    }\n    words\
    \ = append(words, result)\n    result = \"\"\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7u_3t4a1_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
