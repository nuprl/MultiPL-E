language: go_test.go
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    // sort\
    \ by number of ones\n    for i := 0; i < len(arr); i++ {\n        for j := i +\
    \ 1; j < len(arr); j++ {\n            if count_ones(arr[i]) > count_ones(arr[j])\
    \ {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n\
    \    }\n    // sort by decimal value\n    for i := 0; i < len(arr); i++ {\n  \
    \      for j := i + 1; j < len(arr); j++ {\n            if count_ones(arr[i])\
    \ == count_ones(arr[j]) && arr[i] > arr[j] {\n                arr[i], arr[j] =\
    \ arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kmliw4i_test.go:25:16: undefined: count_ones

    /tmp/tmp6kmliw4i_test.go:33:16: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    var ones []int\n    var zeros []int\n    for _, v := range\
    \ arr {\n        if v < 0 {\n            continue\n        }\n        if v ==\
    \ 0 {\n            zeros = append(zeros, v)\n            continue\n        }\n\
    \        ones = append(ones, v)\n    }\n    var result []int\n    for _, v :=\
    \ range ones {\n        result = append(result, v)\n    }\n    for _, v := range\
    \ zeros {\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5}\
    \ },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
    \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
    \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
    \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpk237ozqs_test.go:61: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpk237ozqs_test.go:61:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[]'\n    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpk237ozqs_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpk237ozqs_test.go:61: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpk237ozqs_test.go:61: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    var result []int\n    var temp []int\n    var temp_one_count\
    \ int\n    var temp_decimal int\n    var temp_index int\n    var temp_index_one_count\
    \ int\n    var temp_index_decimal int\n    var temp_index_value int\n    var temp_value\
    \ int\n    var temp_one_count_value int\n    var temp_decimal_value int\n    var\
    \ temp_one_count_index int\n    var temp_decimal_index int\n    var temp_one_count_index_value\
    \ int\n    var temp_decimal_index_value int\n    var temp_one_count_index_one_count\
    \ int\n    var temp_decimal_index_one_count int\n    var temp_one_count_index_decimal\
    \ int\n    var temp_decimal_index_decimal int\n    var temp_one_count_index_one_count_value\
    \ int\n    var temp_decimal_index_one_count_value int\n    var temp_one_count_index_decimal_value\
    \ int\n    var temp_decimal_index_decimal_value int\n    var temp_one_count_index_one_count_index\
    \ int\n    var temp_decimal_index_one_count_index int\n    var temp_one_count_index_decimal_index\
    \ int\n    var temp_decimal_index_decimal_index int\n    var temp_one_count_index_one_count_index_value\
    \ int\n    var temp_decimal_index_one_count_index_value int\n    var temp_one_count_index_decimal_index_value\
    \ int\n    var temp_decimal_index_decimal_index_value int\n    var temp_one_count_index_one_count_index_one_count\
    \ int\n    var temp_decimal_index_one_count_index_one_count int\n    var temp_one_count_index_decimal_index_one_count\
    \ int\n    var temp_decimal_index_decimal_index_one_count int\n    var temp_one_count_index_one_count_index_decimal\
    \ int\n    var temp_decimal_index_one_count_index_\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgs7aohq__test.go:55:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073668
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpfbsgihha_test.go:49:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpfbsgihha_test.go:49:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpfbsgihha_test.go:49:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    var ones []int\n    var zeros []int\n    for _, v := range\
    \ arr {\n        if v < 0 {\n            continue\n        }\n        if v ==\
    \ 0 {\n            zeros = append(zeros, v)\n            continue\n        }\n\
    \        ones = append(ones, v)\n    }\n    ones = sort_ones(ones)\n    return\
    \ append(ones, zeros...)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp157dpkq7_test.go:31:12: undefined: sort_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    var arr_ones []int\n    var arr_zeros []int\n    for _,\
    \ v := range arr {\n        if v < 0 {\n            continue\n        }\n    \
    \    if v == 0 {\n            arr_zeros = append(arr_zeros, v)\n            continue\n\
    \        }\n        arr_ones = append(arr_ones, v)\n    }\n    arr_ones = sort_array_ones(arr_ones)\n\
    \    arr_zeros = sort_array_zeros(arr_zeros)\n    return append(arr_ones, arr_zeros...)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp440hgbdp_test.go:31:16: undefined: sort_array_ones

    /tmp/tmp440hgbdp_test.go:32:17: undefined: sort_array_zeros

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    if len(arr) <= 1 {\n        return arr\n    }\n    pivot\
    \ := arr[0]\n    left := []int{}\n    right := []int{}\n    for _, v := range\
    \ arr[1:] {\n        if v < pivot {\n            left = append(left, v)\n    \
    \    } else {\n            right = append(right, v)\n        }\n    }\n    return\
    \ append(sort_array(left), append([]int{pivot}, sort_array(right)...)...)\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp8ywr3op4_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp8ywr3op4_test.go:55:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp8ywr3op4_test.go:55: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp8ywr3op4_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp8ywr3op4_test.go:55: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    var sorted []int\n    var ones []int\n    var zeros []int\n\
    \    for _, v := range arr {\n        if v < 0 {\n            sorted = append(sorted,\
    \ v)\n        } else if v == 0 {\n            zeros = append(zeros, v)\n     \
    \   } else {\n            ones = append(ones, v)\n        }\n    }\n    sorted\
    \ = append(sorted, zeros...)\n    sorted = append(sorted, ones...)\n    return\
    \ sorted\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpdwck6y15_test.go:56: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpdwck6y15_test.go:56:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpdwck6y15_test.go:56: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpdwck6y15_test.go:56: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpdwck6y15_test.go:56: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // TODO: Implement me!\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp1aara9zt_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp1aara9zt_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp1aara9zt_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp1aara9zt_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp1aara9zt_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if count_ones(arr[i]) > count_ones(arr[j])\
    \ {\n                arr[i], arr[j] = arr[j], arr[i]\n            } else if count_ones(arr[i])\
    \ == count_ones(arr[j]) {\n                if arr[i] > arr[j] {\n            \
    \        arr[i], arr[j] = arr[j], arr[i]\n                }\n            }\n \
    \       }\n    }\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeg3vf624_test.go:21:16: undefined: count_ones

    /tmp/tmpeg3vf624_test.go:23:23: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    var ones = make(map[int]int)\n    for _, v := range arr\
    \ {\n        ones[v] = count_ones(v)\n    }\n    fmt.Println(ones)\n    return\
    \ arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq5i9zuha_test.go:21:19: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    var res\
    \ []int\n    var one_counts []int\n    for _, v := range arr {\n        one_counts\
    \ = append(one_counts, count_ones(v))\n    }\n    var min_one_count int\n    var\
    \ min_one_count_index int\n    for i := 0; i < len(arr); i++ {\n        min_one_count\
    \ = one_counts[0]\n        min_one_count_index = 0\n        for j := 0; j < len(one_counts);\
    \ j++ {\n            if one_counts[j] < min_one_count {\n                min_one_count\
    \ = one_counts[j]\n                min_one_count_index = j\n            }\n  \
    \      }\n        res = append(res, arr[min_one_count_index])\n        one_counts\
    \ = append(one_counts[:min_one_count_index], one_counts[min_one_count_index+1:]...)\n\
    \        arr = append(arr[:min_one_count_index], arr[min_one_count_index+1:]...)\n\
    \    }\n    return res\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqbvrlume_test.go:25:41: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpfbsgihha_test.go:49:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // Write your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpbds5lbgn_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpbds5lbgn_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpbds5lbgn_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpbds5lbgn_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpbds5lbgn_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // sort.Ints(arr)\n    // return arr\n    return arr\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpn0jkyzlu_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpn0jkyzlu_test.go:44:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpn0jkyzlu_test.go:44: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpn0jkyzlu_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpn0jkyzlu_test.go:44: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    var sorted []int\n    for _, v := range arr {\n        sorted\
    \ = append(sorted, v)\n    }\n    for i := 0; i < len(sorted); i++ {\n       \
    \ for j := i + 1; j < len(sorted); j++ {\n            if count_ones(sorted[i])\
    \ > count_ones(sorted[j]) {\n                sorted[i], sorted[j] = sorted[j],\
    \ sorted[i]\n            } else if count_ones(sorted[i]) == count_ones(sorted[j])\
    \ {\n                if sorted[i] > sorted[j] {\n                    sorted[i],\
    \ sorted[j] = sorted[j], sorted[i]\n                }\n            }\n       \
    \ }\n    }\n    return sorted\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate\
    \ := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5,\
    \ 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpztmxsktz_test.go:25:16: undefined: count_ones

    /tmp/tmpztmxsktz_test.go:27:23: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    if len(arr) <= 1 {\n        return arr\n    }\n    pivot\
    \ := arr[0]\n    left := make([]int, 0)\n    right := make([]int, 0)\n    for\
    \ i := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n            left =\
    \ append(left, arr[i])\n        } else {\n            right = append(right, arr[i])\n\
    \        }\n    }\n    left = sort_array(left)\n    right = sort_array(right)\n\
    \    left = append(left, pivot)\n    left = append(left, right...)\n    return\
    \ left\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp3i8g720g_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp3i8g720g_test.go:59:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp3i8g720g_test.go:59: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp3i8g720g_test.go:59: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp3i8g720g_test.go:59: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    for i\
    \ := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n   \
    \         if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T)\
    \ {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpmmndawbh_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpmmndawbh_test.go:52:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpmmndawbh_test.go:52: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpmmndawbh_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpmmndawbh_test.go:52: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    if len(arr) <= 1 {\n        return arr\n    }\n    pivot\
    \ := arr[0]\n    left := make([]int, 0)\n    right := make([]int, 0)\n    for\
    \ i := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n            left =\
    \ append(left, arr[i])\n        } else {\n            right = append(right, arr[i])\n\
    \        }\n    }\n    return append(sort_array(left), append([]int{pivot}, sort_array(right)...)...)\n\
    }\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpc2xjt_j1_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpc2xjt_j1_test.go:55:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpc2xjt_j1_test.go:55: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpc2xjt_j1_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpc2xjt_j1_test.go:55: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    if len(arr) <= 1 {\n        return arr\n    }\n    pivot\
    \ := arr[0]\n    left := []int{}\n    right := []int{}\n    for _, v := range\
    \ arr[1:] {\n        if v < pivot {\n            left = append(left, v)\n    \
    \    } else {\n            right = append(right, v)\n        }\n    }\n    return\
    \ append(sort_array(left), append([]int{pivot}, sort_array(right)...)...)\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp8ywr3op4_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp8ywr3op4_test.go:55:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp8ywr3op4_test.go:55: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp8ywr3op4_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp8ywr3op4_test.go:55: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\
    \nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1,\
    \ 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected:\
    \ []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}),\
    \ expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}),\
    \ expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
    \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual:\
    \ candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   \
    \  { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpfbsgihha_test.go:49:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-6) %!s(int=-5) %!s(int=-4) %!s(int=-3) %!s(int=-2)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpfbsgihha_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)\
    \ %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=77)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpfbsgihha_test.go:49: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=32) %!s(int=44)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    var (\n\
    \        ones = make(map[int]int)\n        zeros = make(map[int]int)\n       \
    \ zeros_arr = make([]int, 0)\n        ones_arr = make([]int, 0)\n    )\n    for\
    \ _, v := range arr {\n        if v < 0 {\n            continue\n        }\n \
    \       if v == 0 {\n            zeros[v] = v\n            zeros_arr = append(zeros_arr,\
    \ v)\n            continue\n        }\n        ones[v] = v\n        ones_arr =\
    \ append(ones_arr, v)\n    }\n    if len(ones) == 0 {\n        return zeros_arr\n\
    \    }\n    if len(zeros) == 0 {\n        return ones_arr\n    }\n    return append(zeros_arr,\
    \ ones_arr...)\n}\n\nfunc TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected:\
    \ []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}),\
    \ expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0,\
    \ 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpbwr2_ttj_test.go:69: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpbwr2_ttj_test.go:69:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[]'\n    --- FAIL: TestSort_Array/test_num__2 (0.00s)\n        tmpbwr2_ttj_test.go:69:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpbwr2_ttj_test.go:69: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpbwr2_ttj_test.go:69: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // Write your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpbds5lbgn_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpbds5lbgn_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpbds5lbgn_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpbds5lbgn_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpbds5lbgn_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if count_ones(arr[i]) > count_ones(arr[j])\
    \ {\n                arr[i], arr[j] = arr[j], arr[i]\n            } else if count_ones(arr[i])\
    \ == count_ones(arr[j]) {\n                if arr[i] > arr[j] {\n            \
    \        arr[i], arr[j] = arr[j], arr[i]\n                }\n            }\n \
    \       }\n    }\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeg3vf624_test.go:21:16: undefined: count_ones

    /tmp/tmpeg3vf624_test.go:23:23: undefined: count_ones

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    return arr\n}\n\nfunc TestSort_Array(t *testing.T) {\n \
    \ candidate := sort_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual: candidate([]int{-2,\
    \ -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n     { actual: candidate([]int{1,\
    \ 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4}), expected: []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual:\
    \ candidate([]int{3, 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44}\
    \ },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2, 4,\
    \ 8, 16, 32} },\n     { actual: candidate([]int{2, 4, 8, 16, 32}), expected: []int{2,\
    \ 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmp43fgrw5z_test.go:42:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmp43fgrw5z_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmp43fgrw5z_test.go:42: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// In this Kata, you have to sort a list of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n\
    // >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n//\
    \ >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr\
    \ []int) []int {\n    // your code here\n    return arr\n}\n\nfunc TestSort_Array(t\
    \ *testing.T) {\n  candidate := sort_array\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2, 4, 3, 5} },\n     { actual:\
    \ candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4, -2, -6, -5, -3} },\n\
    \     { actual: candidate([]int{1, 0, 2, 3, 4}), expected: []int{0, 1, 2, 4, 3}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
    \ candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected: []int{2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3, 6, 44, 12, 32,\
    \ 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
    \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Array (0.00s)\n    --- FAIL: TestSort_Array/test_num__0\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=3) %!s(int=5)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestSort_Array/test_num__1 (0.00s)\n        tmpkcgipgj8_test.go:43:\
    \ expected '[%!s(int=-4) %!s(int=-2) %!s(int=-6) %!s(int=-5) %!s(int=-3)]', got\
    \ '[%!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6)]'\n    --- FAIL:\
    \ TestSort_Array/test_num__2 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestSort_Array/test_num__4\
    \ (0.00s)\n        tmpkcgipgj8_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=4)\
    \ %!s(int=4) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=7)\
    \ %!s(int=77)]', got '[%!s(int=2) %!s(int=5) %!s(int=77) %!s(int=4) %!s(int=5)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    ---\
    \ FAIL: TestSort_Array/test_num__5 (0.00s)\n        tmpkcgipgj8_test.go:43: expected\
    \ '[%!s(int=32) %!s(int=3) %!s(int=5) %!s(int=6) %!s(int=12) %!s(int=44)]', got\
    \ '[%!s(int=3) %!s(int=6) %!s(int=44) %!s(int=12) %!s(int=32) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073669
