language: go_test.go
name: HumanEval_64_vowels_count
results:
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if c == s[len(s)-1] {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitztwhta_test.go:24:21: invalid operation: c == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkp96y4wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgsc3je___test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp82tiu4jt_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp82tiu4jt_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp82tiu4jt_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp82tiu4jt_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp82tiu4jt_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp82tiu4jt_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp82tiu4jt_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgsc3je___test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiouy\"\n    count := 0\n    for _, c := range s {\n\
    \        if strings.Contains(vowels, strings.ToLower(string(c))) {\n         \
    \   count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44ybuj9z_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpn6_t05cs_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpn6_t05cs_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpn6_t05cs_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           (c == 'y' && i ==\
    \ len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpr0sh3oo__test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        } else\
    \ if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp9ylcaaf9_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            (c == 'y' && i\
    \ == len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpptdt3sc8_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpptdt3sc8_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpptdt3sc8_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpvdmrcux7_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwhfc5q7y_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, char := range s {\n        for _, vowel := range vowels {\n\
    \            if string(char) == vowel {\n                count++\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpx81324mh_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpx81324mh_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpx81324mh_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpx81324mh_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp90cqqiik_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp90cqqiik_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp90cqqiik_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwhfc5q7y_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpvdmrcux7_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgsc3je___test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpvdmrcux7_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, r := range s {\n        if r == 'a' || r ==\
    \ 'e' || r == 'i' || r == 'o' || r == 'u' ||\n            (r == 'y' && i == len(s)-1)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvibi80zw_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpvibi80zw_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpvibi80zw_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i < len(s) - 1 {\n            count++\n        }\n   \
    \ }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmppdr7v052_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmppdr7v052_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmppdr7v052_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmppdr7v052_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmppdr7v052_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmptmq0z5ad_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmptmq0z5ad_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmptmq0z5ad_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmptmq0z5ad_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if i == len(s) - 1\
    \ && c == 'y' {\n            count++\n        } else if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp1axosr7b_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp1axosr7b_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp1axosr7b_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           (c == 'y' && i ==\
    \ len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpr0sh3oo__test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n      \
    \  }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6bvlf_zt_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp6bvlf_zt_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6bvlf_zt_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp0_k1ln43_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp0_k1ln43_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp0_k1ln43_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp0_k1ln43_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp0_k1ln43_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp0_k1ln43_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp0_k1ln43_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count += 1\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count\
    \ += 1\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm_n8txnt_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpm_n8txnt_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpm_n8txnt_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        switch\
    \ s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n       \
    \ case 'y':\n            if i == len(s) - 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3e3o2tjw_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3e3o2tjw_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3e3o2tjw_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, v := range s {\n        if v == 'a' || v ==\
    \ 'e' || v == 'i' || v == 'o' || v == 'u' || (v == 'y' && i == len(s)-1) {\n \
    \           count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpd6v58wy5_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpd6v58wy5_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpd6v58wy5_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, v := range s {\n        if v == 'a' ||\
    \ v == 'e' || v == 'i' || v == 'o' || v == 'u' ||\n            (v == 'y' && i\
    \ == len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpjn338d5i_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpjn338d5i_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpjn338d5i_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpvdmrcux7_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiouy\"\n    count := 0\n    for _, c := range s {\n\
    \        if strings.Contains(vowels, strings.ToLower(string(c))) {\n         \
    \   count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44ybuj9z_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, c := range s {\n        if vowels[c] {\n            count++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe0vpp4wt_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpe0vpp4wt_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpe0vpp4wt_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiouy\"\n    count := 0\n    for _, c := range s {\n\
    \        if strings.Contains(vowels, strings.ToLower(string(c))) {\n         \
    \   count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7sczfg0z_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if i == len(s) - 1 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmph9c2pul5_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmph9c2pul5_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmph9c2pul5_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpvdmrcux7_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for i, r := range s {\n        if vowels[r] {\n            count++\n\
    \        }\n        if r == 'y' && i == len(s)-1 {\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpf2h2hy7r_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpf2h2hy7r_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpf2h2hy7r_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    count := 0\n    for\
    \ _, r := range s {\n        for _, v := range vowels {\n            if r == v\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpiwdc2c1h_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpiwdc2c1h_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpiwdc2c1h_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpiwdc2c1h_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1\n        }\
    \ else if c == 'y' && i == len(s) - 1 {\n            count += 1\n        }\n \
    \   }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpjl9i1cog_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpjl9i1cog_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpjl9i1cog_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           (c == 'y' && i ==\
    \ len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpr0sh3oo__test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) > 1 && s[len(s)-1] == 'y' {\n                count++\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpf43pjk7t_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpf43pjk7t_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpf43pjk7t_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var vowels = map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    var count\
    \ int\n    for _, c := range s {\n        if vowels[c] {\n            count++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmplyxl65ti_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmplyxl65ti_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmplyxl65ti_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]bool{\n        \"a\": true,\n        \"e\":\
    \ true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    count := 0\n    for i, c := range s {\n        if i == len(s) - 1 &&\
    \ c == 'y' {\n            count++\n        } else if _, ok := vowels[string(c)];\
    \ ok {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpp_idokeh_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpp_idokeh_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpp_idokeh_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp90cqqiik_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp90cqqiik_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp90cqqiik_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           (c == 'y' && i ==\
    \ len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpr0sh3oo__test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           (c == 'y' && i ==\
    \ len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpr0sh3oo__test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmptmq0z5ad_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmptmq0z5ad_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmptmq0z5ad_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmptmq0z5ad_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1,\
    \ \"u\": 1, \"y\": 1}\n    count := 0\n    for i, c := range s {\n        if i\
    \ == len(s) - 1 && c == 'y' {\n            count++\n        } else if _, ok :=\
    \ vowels[string(c)]; ok {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp65kaza3__test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp65kaza3__test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp65kaza3__test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp65kaza3__test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwhfc5q7y_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkp96y4wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if i == len(s)\
    \ - 1 && c == 'y' {\n            count++\n        } else if c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpt1flu1gt_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpt1flu1gt_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpt1flu1gt_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6gpv2ckv_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp6gpv2ckv_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp6gpv2ckv_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmp6gpv2ckv_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgsc3je___test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) > 1 && s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5y98lq9f_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5y98lq9f_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5y98lq9f_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwhfc5q7y_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkp96y4wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp70xp44ex_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp70xp44ex_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp70xp44ex_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) > 1 && s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5y98lq9f_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5y98lq9f_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5y98lq9f_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkp96y4wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkp96y4wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for i, c := range s {\n        if vowels[c] {\n            count++\n\
    \        }\n        if c == 'y' && i == len(s)-1 {\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpmmflfd1w_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpmmflfd1w_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpmmflfd1w_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp4r3glf6d_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp4r3glf6d_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp4r3glf6d_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n\
    \        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n        \"y\": 1,\n\
    \    }\n    count := 0\n    for i, c := range s {\n        if i == len(s) - 1\
    \ && c == 'y' {\n            count += vowels[string(c)]\n        } else if vowels[string(c)]\
    \ == 1 {\n            count += vowels[string(c)]\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpnpvf7l9x_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpnpvf7l9x_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpnpvf7l9x_test.go:56: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpnpvf7l9x_test.go:56:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiouy\"\n    count := 0\n    for _, c := range s {\n\
    \        if strings.Contains(vowels, strings.ToLower(string(c))) {\n         \
    \   count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44ybuj9z_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        } else\
    \ if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp9ylcaaf9_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgsc3je___test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkp96y4wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwhfc5q7y_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || s[1] != 'y' {\n                count++\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp8q_vlcgf_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp8q_vlcgf_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp8q_vlcgf_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if i == len(s) - 1\
    \ && c == 'y' {\n            count++\n        } else if c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp1axosr7b_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp1axosr7b_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp1axosr7b_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, c := range s {\n        if vowels[c] {\n            count++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe0vpp4wt_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpe0vpp4wt_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpe0vpp4wt_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i, c := range s {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n   \
    \     }\n        if c == 'y' && i < len(s) - 1 {\n            count++\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpqv56hycv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpqv56hycv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpqv56hycv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpqv56hycv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpqv56hycv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if string(v) == vv {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmptmq0z5ad_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmptmq0z5ad_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmptmq0z5ad_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmptmq0z5ad_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgsc3je___test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgsc3je___test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        switch\
    \ s[i] {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n       \
    \ case 'y':\n            if i == len(s) - 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp3e3o2tjw_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp3e3o2tjw_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp3e3o2tjw_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpgaoij5qq_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpgaoij5qq_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpgaoij5qq_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgaoij5qq_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgaoij5qq_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpgaoij5qq_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgaoij5qq_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp4r3glf6d_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp4r3glf6d_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp4r3glf6d_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        } else\
    \ if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp9ylcaaf9_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \    }\n    if len(s) > 1 && s[len(s)-1] == 'y' {\n        count++\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp0xjxt8_c_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp0xjxt8_c_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp0xjxt8_c_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpi2rb0wll_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpi2rb0wll_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpi2rb0wll_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpi2rb0wll_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpi2rb0wll_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpi2rb0wll_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpi2rb0wll_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        } else\
    \ if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp9ylcaaf9_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, char := range s {\n        for _, vowel := range vowels {\n\
    \            if string(char) == vowel {\n                count += 1\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpnevylt3y_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpnevylt3y_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpnevylt3y_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpnevylt3y_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i, c := range s {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n   \
    \     }\n        if c == 'y' && i != len(s) - 1 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n \
    \ candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp_0m30bym_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp_0m30bym_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp_0m30bym_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp_0m30bym_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp_0m30bym_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwhfc5q7y_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        if string(v) == \"y\" {\n         \
    \   if len(s) == 1 {\n                count++\n            } else if len(s) >\
    \ 1 && string(s[len(s)-1]) == \"y\" {\n                count++\n            }\n\
    \        } else if contains(vowels, string(v)) {\n            count++\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_d2nuq6_test.go:27:19: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkp96y4wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            count++\n        }\n        if s[i] == 'y' && i == len(s) - 1 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprt0potrs_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprt0potrs_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprt0potrs_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i < len(s) - 1 {\n            count++\n        }\n   \
    \ }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmppdr7v052_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmppdr7v052_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmppdr7v052_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmppdr7v052_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmppdr7v052_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vv := range vowels {\n     \
    \       if v == rune(vv[0]) {\n                count++\n            }\n      \
    \  }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpw3d_q15j_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpw3d_q15j_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpw3d_q15j_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpw3d_q15j_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || s[1] != 'y' {\n                count++\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp8q_vlcgf_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp8q_vlcgf_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp8q_vlcgf_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        } else\
    \ if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp9ylcaaf9_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            (c == 'y' && i\
    \ == len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpptdt3sc8_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpptdt3sc8_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpptdt3sc8_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmp49m68ir8_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp49m68ir8_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       count++\n        }\n        if s[i] == 'y' && i == len(s)-1 {\n      \
    \      count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgsc3je___test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgsc3je___test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) > 1 && s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp5y98lq9f_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp5y98lq9f_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp5y98lq9f_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpvdmrcux7_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpvdmrcux7_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpvdmrcux7_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        switch s[i]\
    \ {\n        case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case\
    \ 'y':\n            if i == len(s) - 1 {\n                count++\n          \
    \  }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgqr2hy_r_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpgqr2hy_r_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpgqr2hy_r_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        switch c {\n  \
    \      case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n\
    \            if i == len(s) - 1 {\n                count++\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmphms9azl9_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmphms9azl9_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmphms9azl9_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, c := range s {\n        if vowels[c] {\n            count++\n\
    \        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n    }\n    return\
    \ count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpe0vpp4wt_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpe0vpp4wt_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpe0vpp4wt_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            (c == 'y' && i\
    \ == len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpptdt3sc8_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpptdt3sc8_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpptdt3sc8_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            (c == 'y' && i\
    \ == len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpptdt3sc8_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpptdt3sc8_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpptdt3sc8_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1\n        }\n\
    \    }\n    if s[len(s)-1] == 'y' {\n        count += 1\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpoiy8k3kg_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpoiy8k3kg_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpoiy8k3kg_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i, c := range s {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           (c == 'y' &&\
    \ i == len(s)-1) {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp4dtimoev_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp4dtimoev_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp4dtimoev_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n\
    \            count++\n        }\n        if s[i] == 'y' && i == len(s) - 1 {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprt0potrs_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprt0potrs_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprt0potrs_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkp96y4wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var v int\n    for _, c := range s {\n        switch c {\n      \
    \  case 'a', 'e', 'i', 'o', 'u', 'y':\n            v++\n        }\n    }\n   \
    \ return v\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpgvymujm__test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpgvymujm__test.go:47:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpgvymujm__test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpgvymujm__test.go:47:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwhfc5q7y_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if c == s[len(s)-1] {\n                count++\n            }\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmidufie5_test.go:24:21: invalid operation: c == s[len(s) - 1] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count += 1\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzypivg5n_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpzypivg5n_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpzypivg5n_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpzypivg5n_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpzypivg5n_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    return 0\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__0\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__1 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__2\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestVowels_Count/test_num__5 (0.00s)\n        tmpv5dffovh_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpv5dffovh_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]bool{\n        \"a\": true,\n        \"e\":\
    \ true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n  \
    \  }\n    count := 0\n    for i, c := range s {\n        if vowels[string(c)]\
    \ {\n            count++\n        }\n        if string(c) == \"y\" && i == len(s)-1\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp7t1ffip1_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp7t1ffip1_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp7t1ffip1_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           (c == 'y' && i ==\
    \ len(s)-1) {\n            count++\n        }\n    }\n    return count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpr0sh3oo__test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpr0sh3oo__test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for _, c := range s {\n        switch c {\n     \
    \   case 'a', 'e', 'i', 'o', 'u':\n            count++\n        case 'y':\n  \
    \          if len(s) == 1 || s[len(s)-1] == 'y' {\n                count++\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp90cqqiik_test.go:51: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp90cqqiik_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp90cqqiik_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpkp96y4wj_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpkp96y4wj_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            (c == 'y' && i == len(s)-1)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpdqhcrs56_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpdqhcrs56_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpdqhcrs56_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n\
    \        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n        \"y\": 1,\n\
    \    }\n    count := 0\n    for i, c := range s {\n        if i == len(s) - 1\
    \ && string(c) == \"y\" {\n            continue\n        }\n        if _, ok :=\
    \ vowels[string(c)]; ok {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp6gvj1pno_test.go:57: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmp6gvj1pno_test.go:57:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmp6gvj1pno_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp6gvj1pno_test.go:57:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp6gvj1pno_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, c := range s {\n        if vowels[c] {\n            count++\n\
    \        }\n    }\n    if count > 0 && s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp91cyrubn_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp91cyrubn_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp91cyrubn_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n\
    \        if c == 'y' && i != len(s) - 1 {\n            count++\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__3\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpeitk66gv_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpeitk66gv_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n        \
    \    count++\n        }\n    }\n    if s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmprp7bjze1_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmprp7bjze1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for _, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__3 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpzit8cwag_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpzit8cwag_test.go:46:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwhfc5q7y_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n    }\n    count\
    \ := 0\n    for _, c := range s {\n        if vowels[c] {\n            count++\n\
    \        }\n    }\n    if count > 0 && s[len(s)-1] == 'y' {\n        count++\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp91cyrubn_test.go:56: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp91cyrubn_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp91cyrubn_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count\
    \ := 0\n    for _, v := range s {\n        for _, vowel := range vowels {\n  \
    \          if string(v) == vowel {\n                count++\n            }\n \
    \       }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpm4e42xpq_test.go:49: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__2 (0.00s)\n        tmpm4e42xpq_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__4\
    \ (0.00s)\n        tmpm4e42xpq_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n\
    \    --- FAIL: TestVowels_Count/test_num__6 (0.00s)\n        tmpm4e42xpq_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    vowels := \"aeiou\"\n    count := 0\n    for _, c := range s {\n\
    \        if string(c) == \"y\" && len(s) == 1 {\n            count++\n       \
    \ } else if string(c) == \"y\" && string(s[len(s)-1]) == \"y\" {\n           \
    \ count++\n        } else if string(c) == \"y\" {\n            continue\n    \
    \    } else if string(c) == \"A\" || string(c) == \"E\" || string(c) == \"I\"\
    \ || string(c) == \"O\" || string(c) == \"U\" {\n            count++\n       \
    \ } else if string(c) == \"a\" || string(c) == \"e\" || string(c) == \"i\" ||\
    \ string(c) == \"o\" || string(c) == \"u\" {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprclg9o4g_test.go:18:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    count := 0\n    for i, c := range s {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        } else\
    \ if c == 'y' && i == len(s) - 1 {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmp9ylcaaf9_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmp9ylcaaf9_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"\
    abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string)\
    \ int {\n    var count int\n    for i, c := range s {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == len(s)-1)\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestVowels_Count (0.00s)\n    --- FAIL: TestVowels_Count/test_num__1\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n\
    \    --- FAIL: TestVowels_Count/test_num__4 (0.00s)\n        tmpwhfc5q7y_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestVowels_Count/test_num__6\
    \ (0.00s)\n        tmpwhfc5q7y_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
