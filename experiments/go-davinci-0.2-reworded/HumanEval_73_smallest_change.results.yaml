language: go_test.go
name: HumanEval_73_smallest_change
results:
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] {\n            return 0\n \
    \       } else {\n            return 1\n        }\n    }\n    if len(arr) == 5\
    \ {\n        if arr[0] == arr[4] {\n            return 0\n        } else {\n \
    \           return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0]\
    \ == arr[5] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 9 {\n        if arr[0] == arr[8] {\n            return 0\n        } else {\n\
    \            return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 11 {\n        if arr[0] == arr[10] {\n \
    \           return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 13 {\n        if arr[0\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppf93rkav_test.go:103:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    var change int\n    for i := 0; i < len(arr) / 2; i++ {\n\
    \        if arr[i] != arr[len(arr) - 1 - i] {\n            change++\n        }\n\
    \    }\n    return change\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    var count int\n    for i := 0; i < len(arr) / 2; i++ {\n \
    \       if arr[i] != arr[len(arr) - 1 - i] {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] && arr[1] == arr[2] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 6 {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2]\
    \ == arr[3] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] && arr[1]\
    \ == arr[5] && arr[2] == arr[4] {\n            return 0\n        } else {\n  \
    \          return 1\n        }\n    }\n    if len(arr) == 8 {\n        if arr[0]\
    \ == arr[7] && arr[1] == arr[6] && arr[2] == arr[5] && arr[3] == arr[4] {\n  \
    \          return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 9 {\n        if arr[0] == arr[8] && arr[1] == arr[7] && arr[2]\
    \ == arr[6] && arr[3] == arr[5] {\n            return 0\n        } else {\n  \
    \          return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9]\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxi8t8bax_test.go:83:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpb68bfauz_test.go:102: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpb68bfauz_test.go:102:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] {\n            return 0\n \
    \       } else {\n            return 1\n        }\n    }\n    if len(arr) == 5\
    \ {\n        if arr[0] == arr[4] {\n            return 0\n        } else {\n \
    \           return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0]\
    \ == arr[5] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 9 {\n        if arr[0] == arr[8] {\n            return 0\n        } else {\n\
    \            return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 11 {\n        if arr[0] == arr[10] {\n \
    \           return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 13 {\n        if arr[0\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppf93rkav_test.go:103:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if arr[0]\
    \ == arr[len(arr)-1] {\n        return smallest_change(arr[1:len(arr)-1])\n  \
    \  }\n    return 1 + min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpachwdfs6_test.go:34:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if arr[0] == arr[len(arr)-1] {\n        return smallest_change(arr[1:len(arr)-1])\n\
    \    } else {\n        return 1 + min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n\
    \    }\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyzl5t7za_test.go:35:20: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 4 {\n        if arr[0] == arr[3] {\n            return 0\n        }\n      \
    \  if arr[0] == arr[2] || arr[1] == arr[3] {\n            return 1\n        }\n\
    \        return 2\n    }\n    if len(arr) == 5 {\n        if arr[0] == arr[4]\
    \ {\n            return 0\n        }\n        if arr[0] == arr[3] || arr[1] ==\
    \ arr[4] {\n            return 1\n        }\n        if arr[0] == arr[2] || arr[1]\
    \ == arr[3] {\n            return 2\n        }\n        return 3\n    }\n    if\
    \ len(arr) == 6 {\n        if arr[0] == arr[5] {\n            return 0\n     \
    \   }\n        if arr[0] == arr[4] || arr[1] == arr[5] {\n            return 1\n\
    \        }\n        if arr[0] == arr[3] || arr[1] == arr[4] || arr[2] == arr[5]\
    \ {\n            return 2\n        }\n        if arr[0] == arr[2] || arr[1] ==\
    \ arr[3] {\n            return 3\n        }\n        return 4\n    }\n    if len(arr)\
    \ == 7 {\n        if arr[0] == arr[6] {\n            return 0\n        }\n   \
    \     if arr[0] == arr[5] || arr[1] == arr[6] {\n            return 1\n      \
    \  }\n        if arr[0] == arr[4] || arr[1] == arr[5] || arr[2] == arr[6] {\n\
    \            return 2\n        }\n        if arr[0] == arr[3] || arr[1] == arr[\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6qgcqjef_test.go:81:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    l := len(arr)\n    if l == 0 {\n        return 0\n    }\n\
    \    if l == 1 {\n        return 0\n    }\n    if l == 2 {\n        return 1\n\
    \    }\n    if l == 3 {\n        return 2\n    }\n    if l == 4 {\n        return\
    \ 3\n    }\n    if l == 5 {\n        return 4\n    }\n    if l == 6 {\n      \
    \  return 5\n    }\n    if l == 7 {\n        return 6\n    }\n    if l == 8 {\n\
    \        return 7\n    }\n    if l == 9 {\n        return 8\n    }\n    if l ==\
    \ 10 {\n        return 9\n    }\n    if l == 11 {\n        return 10\n    }\n\
    \    if l == 12 {\n        return 11\n    }\n    if l == 13 {\n        return\
    \ 12\n    }\n    if l == 14 {\n        return 13\n    }\n    if l == 15 {\n  \
    \      return 14\n    }\n    if l == 16 {\n        return 15\n    }\n    if l\
    \ == 17 {\n        return 16\n    }\n    if l == 18 {\n        return 17\n   \
    \ }\n    if l == 19 {\n        return 18\n    }\n    if l == 20 {\n        return\
    \ 19\n    }\n    if l == 21 {\n        return 20\n    }\n    if l == 22 {\n  \
    \      return 21\n    }\n    if l == 23 {\n        return 22\n    }\n    if l\
    \ == 24 {\n        return 23\n    }\n    if l == 25 {\n        return 24\n   \
    \ }\n    if l == 26 {\n        return 25\n    }\n    if l == 27 {\n        return\
    \ 26\n    }\n    if l == 28 {\n        return 27\n    }\n    if l == 29 {\n  \
    \      return 28\n    }\n    if l == 30 {\n        return 29\n    }\n    if l\
    \ == 31 {\n        return 30\n    }\n    if l == 32 {\n        return 31\n   \
    \ }\n    if l == 33 {\n        return 32\n    }\n    if l == 34 {\n        return\
    \ 33\n    }\n    if l == 35 {\n        return 34\n    }\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa4bld5hf_test.go:128:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if arr[0]\
    \ == arr[len(arr)-1] {\n        return smallest_change(arr[1:len(arr)-1])\n  \
    \  }\n    return 1 + min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpachwdfs6_test.go:34:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    var count int\n    for i := 0; i < len(arr)/2; i++ {\n   \
    \     if arr[i] != arr[len(arr)-i-1] {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 4 {\n        if arr[0] == arr[3] {\n            return 0\n        }\n      \
    \  if arr[0] == arr[2] && arr[1] == arr[3] {\n            return 0\n        }\n\
    \        return 1\n    }\n    if len(arr) == 5 {\n        if arr[0] == arr[4]\
    \ {\n            return 0\n        }\n        if arr[0] == arr[3] && arr[1] ==\
    \ arr[4] {\n            return 0\n        }\n        if arr[0] == arr[2] && arr[1]\
    \ == arr[3] && arr[2] == arr[4] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n          \
    \  return 0\n        }\n        if arr[0] == arr[4] && arr[1] == arr[5] {\n  \
    \          return 0\n        }\n        if arr[0] == arr[3] && arr[1] == arr[4]\
    \ && arr[2] == arr[5] {\n            return 0\n        }\n        if arr[0] ==\
    \ arr[2] && arr[1] == arr[3] && arr[2] == arr[4] && arr[3] == arr[5] {\n     \
    \       return 0\n        }\n        return 1\n    }\n    if len(arr) == 7 {\n\
    \        if arr[0] == arr[6] {\n            return 0\n        }\n        if arr[0]\
    \ == arr[5] && arr[1] == arr[6] {\n            return 0\n        }\n        if\
    \ arr[0] == arr[4] && arr[1] == arr[5] && arr[2] == arr[\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg1qzbwrh_test.go:78:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) % 2 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpaw5r5vq1_test.go:69: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpaw5r5vq1_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpaw5r5vq1_test.go:69: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ % 2 == 0 {\n        return smallest_change_even(arr)\n    }\n    return smallest_change_odd(arr)\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe3dl6fna_test.go:32:16: undefined: smallest_change_even

    /tmp/tmpe3dl6fna_test.go:34:12: undefined: smallest_change_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    var count int\n    for i := 0; i < len(arr) / 2; i++ {\n \
    \       if arr[i] != arr[len(arr) - 1 - i] {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement this function\n    return -1\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0ey4x315_test.go:43: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0ey4x315_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0ey4x315_test.go:43: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0ey4x315_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0ey4x315_test.go:43: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0ey4x315_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp0ey4x315_test.go:43: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp0ey4x315_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if arr[0]\
    \ == arr[len(arr)-1] {\n        return smallest_change(arr[1:len(arr)-1])\n  \
    \  }\n    return 1 + min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpachwdfs6_test.go:34:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return -1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpt118w5xp_test.go:43: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpt118w5xp_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpt118w5xp_test.go:43: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpt118w5xp_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpt118w5xp_test.go:43: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpt118w5xp_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpt118w5xp_test.go:43: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpt118w5xp_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) % 2 == 0 {\n        return smallest_change_even(arr)\n\
    \    } else {\n        return smallest_change_odd(arr)\n    }\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl_fr07fv_test.go:33:16: undefined: smallest_change_even

    /tmp/tmpl_fr07fv_test.go:35:16: undefined: smallest_change_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if arr[0]\
    \ == arr[len(arr)-1] {\n        return smallest_change(arr[1:len(arr)-1])\n  \
    \  }\n    return 1 + min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpachwdfs6_test.go:34:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] {\n            return 0\n \
    \       } else {\n            return 1\n        }\n    }\n    if len(arr) == 5\
    \ {\n        if arr[0] == arr[4] {\n            return 0\n        } else {\n \
    \           return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0]\
    \ == arr[5] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 9 {\n        if arr[0] == arr[8] {\n            return 0\n        } else {\n\
    \            return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 11 {\n        if arr[0] == arr[10] {\n \
    \           return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 13 {\n        if arr[0\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppf93rkav_test.go:103:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    // len(arr)\
    \ >= 3\n    if arr[0] == arr[len(arr)-1] {\n        return smallest_change(arr[1:len(arr)-1])\n\
    \    }\n    return 1 + min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6qbbcvj5_test.go:35:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 6\
    \ {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] && arr[1] == arr[5] && arr[2] == arr[4] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 8\
    \ {\n        if arr[0] == arr[7] && arr[1] == arr[6] && arr[2] == arr[5] && arr[3]\
    \ == arr[4] {\n            return 0\n        }\n        return 1\n    }\n    if\
    \ len(arr) == 9 {\n        if arr[0] == arr[8] && arr[1] == arr[7] && arr[2] ==\
    \ arr[6] && arr[3] == arr[5] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] && arr[1] ==\
    \ arr[8] && arr[2] == arr[7] && arr[3] == arr[6] && arr[4] == arr[5]\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnusneu7n_test.go:75:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) % 2 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpaw5r5vq1_test.go:69: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpaw5r5vq1_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpaw5r5vq1_test.go:69: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    var count int\n    for i := 0; i < len(arr)/2; i++ {\n   \
    \     if arr[i] != arr[len(arr)-i-1] {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] {\n            return 0\n \
    \       } else {\n            return 1\n        }\n    }\n    if len(arr) == 5\
    \ {\n        if arr[0] == arr[4] {\n            return 0\n        } else {\n \
    \           return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0]\
    \ == arr[5] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 9 {\n        if arr[0] == arr[8] {\n            return 0\n        } else {\n\
    \            return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4xttg_cg_test.go:111: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n\
    \            return 0\n        }\n        return 1\n    }\n    var i, j int\n\
    \    for i, j = 0, len(arr) - 1; i < j; i, j = i + 1, j - 1 {\n        if arr[i]\
    \ != arr[j] {\n            break\n        }\n    }\n    if i >= j {\n        return\
    \ 0\n    }\n    if i + 1 == j {\n        return 1\n    }\n    if arr[i] == arr[j\
    \ - 1] && arr[i + 1] == arr[j] {\n        return 2\n    }\n    return 1\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxkngykhm_test.go:72: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwbht44k3_test.go:60: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwbht44k3_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpwbht44k3_test.go:60: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpwbht44k3_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    var i, j, cnt int\n    for i, j = 0, len(arr) - 1;\
    \ i < j; i, j = i + 1, j - 1 {\n        if arr[i] != arr[j] {\n            cnt++\n\
    \        }\n    }\n    return cnt\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmprjnp2on8_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmprjnp2on8_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp37czl1l4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp37czl1l4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp37czl1l4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp37czl1l4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp37czl1l4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) % 2 == 0 {\n        return smallest_change_even(arr)\n\
    \    }\n    return smallest_change_odd(arr)\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyyd6swk3_test.go:38:16: undefined: smallest_change_even

    /tmp/tmpyyd6swk3_test.go:40:12: undefined: smallest_change_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    var count int\n    for i := 0; i < len(arr) / 2; i++ {\n \
    \       if arr[i] != arr[len(arr) - 1 - i] {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) % 2 == 0 {\n        return smallest_change_even(arr)\n\
    \    }\n    return smallest_change_odd(arr)\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyyd6swk3_test.go:38:16: undefined: smallest_change_even

    /tmp/tmpyyd6swk3_test.go:40:12: undefined: smallest_change_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) % 2\
    \ == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2sp5yonw_test.go:69: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2sp5yonw_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp2sp5yonw_test.go:69: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 6\
    \ {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] && arr[1] == arr[5] && arr[2] == arr[4] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 8\
    \ {\n        if arr[0] == arr[7] && arr[1] == arr[6] && arr[2] == arr[5] && arr[3]\
    \ == arr[4] {\n            return 0\n        }\n        return 1\n    }\n    if\
    \ len(arr) == 9 {\n        if arr[0] == arr[8] && arr[1] == arr[7] && arr[2] ==\
    \ arr[6] && arr[3] == arr[5] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] && arr[1] ==\
    \ arr[8] && arr[2] == arr[7] && arr[3] == arr[6] && arr[4] == arr[5]\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnusneu7n_test.go:75:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpb68bfauz_test.go:102: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpb68bfauz_test.go:102:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    var count int\n    for i := 0; i < len(arr) / 2; i++ {\n \
    \       if arr[i] != arr[len(arr) - 1 - i] {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpljg29_0n_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpljg29_0n_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpljg29_0n_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpljg29_0n_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpljg29_0n_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp37czl1l4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp37czl1l4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp37czl1l4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp37czl1l4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp37czl1l4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if arr[0] == arr[len(arr)-1]\
    \ {\n        return smallest_change(arr[1:len(arr)-1])\n    }\n    return 1 +\
    \ min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ufk5073_test.go:37:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpb68bfauz_test.go:102: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpb68bfauz_test.go:102:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    var\
    \ i, j int\n    var count int\n    for i, j = 0, len(arr) - 1; i < j; i, j = i\
    \ + 1, j - 1 {\n        if arr[i] != arr[j] {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpqf5zvio7_test.go:61: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    return 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpvpjwdhe3_test.go:102: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpvpjwdhe3_test.go:102:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 6\
    \ {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] && arr[1] == arr[5] && arr[2] == arr[4] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 8\
    \ {\n        if arr[0] == arr[7] && arr[1] == arr[6] && arr[2] == arr[5] && arr[3]\
    \ == arr[4] {\n            return 0\n        }\n        return 1\n    }\n    if\
    \ len(arr) == 9 {\n        if arr[0] == arr[8] && arr[1] == arr[7] && arr[2] ==\
    \ arr[6] && arr[3] == arr[5] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] && arr[1] ==\
    \ arr[8] && arr[2] == arr[7] && arr[3] == arr[6] && arr[4] == arr[5]\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnusneu7n_test.go:75:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 6\
    \ {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] && arr[1] == arr[5] && arr[2] == arr[4] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 8\
    \ {\n        if arr[0] == arr[7] && arr[1] == arr[6] && arr[2] == arr[5] && arr[3]\
    \ == arr[4] {\n            return 0\n        }\n        return 1\n    }\n    if\
    \ len(arr) == 9 {\n        if arr[0] == arr[8] && arr[1] == arr[7] && arr[2] ==\
    \ arr[6] && arr[3] == arr[5] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] && arr[1] ==\
    \ arr[8] && arr[2] == arr[7] && arr[3] == arr[6] && arr[4] == arr[5]\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnusneu7n_test.go:75:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] {\n            return 0\n \
    \       } else {\n            return 1\n        }\n    }\n    if len(arr) == 5\
    \ {\n        if arr[0] == arr[4] {\n            return 0\n        } else {\n \
    \           return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0]\
    \ == arr[5] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 9 {\n        if arr[0] == arr[8] {\n            return 0\n        } else {\n\
    \            return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 11 {\n        if arr[0] == arr[10] {\n \
    \           return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 13 {\n        if arr[0\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppf93rkav_test.go:103:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n\
    \            return 0\n        }\n        return 1\n    }\n    var count int\n\
    \    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] != arr[len(arr) -\
    \ 1 - i] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 6\
    \ {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] && arr[1] == arr[5] && arr[2] == arr[4] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 8\
    \ {\n        if arr[0] == arr[7] && arr[1] == arr[6] && arr[2] == arr[5] && arr[3]\
    \ == arr[4] {\n            return 0\n        }\n        return 1\n    }\n    return\
    \ 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpbrev78ix_test.go:90: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpbrev78ix_test.go:90:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 6\
    \ {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] && arr[1] == arr[5] && arr[2] == arr[4] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 8\
    \ {\n        if arr[0] == arr[7] && arr[1] == arr[6] && arr[2] == arr[5] && arr[3]\
    \ == arr[4] {\n            return 0\n        }\n        return 1\n    }\n    return\
    \ 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpbrev78ix_test.go:90: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpbrev78ix_test.go:90:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] {\n            return 0\n \
    \       } else {\n            return 1\n        }\n    }\n    if len(arr) == 5\
    \ {\n        if arr[0] == arr[4] {\n            return 0\n        } else {\n \
    \           return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0]\
    \ == arr[5] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 9 {\n        if arr[0] == arr[8] {\n            return 0\n        } else {\n\
    \            return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 11 {\n        if arr[0] == arr[10] {\n \
    \           return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 13 {\n        if arr[0\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppf93rkav_test.go:103:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) % 2 == 0 {\n        return 1\n    }\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpaw5r5vq1_test.go:69: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpaw5r5vq1_test.go:69:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpaw5r5vq1_test.go:69: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if arr[0] == arr[len(arr)-1] {\n        return smallest_change(arr[1:len(arr)-1])\n\
    \    }\n    return 1 + min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppngjzxqv_test.go:31:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075050
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    var count int\n    for i, j := 0, len(arr)-1; i < j; i, j\
    \ = i+1, j-1 {\n        if arr[i] != arr[j] {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpb68bfauz_test.go:102: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpb68bfauz_test.go:102:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpb68bfauz_test.go:102: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpb68bfauz_test.go:102:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 0
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    var count int\n    for i := 0; i < len(arr) / 2; i++ {\n \
    \       if arr[i] != arr[len(arr) - 1 - i] {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp9_baqwao_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp9_baqwao_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 6\
    \ {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] && arr[1] == arr[5] && arr[2] == arr[4] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 8\
    \ {\n        if arr[0] == arr[7] && arr[1] == arr[6] && arr[2] == arr[5] && arr[3]\
    \ == arr[4] {\n            return 0\n        }\n        return 1\n    }\n    if\
    \ len(arr) == 9 {\n        if arr[0] == arr[8] && arr[1] == arr[7] && arr[2] ==\
    \ arr[6] && arr[3] == arr[5] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] && arr[1] ==\
    \ arr[8] && arr[2] == arr[7] && arr[3] == arr[6] && arr[4] == arr[5]\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnusneu7n_test.go:75:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] {\n            return 0\n \
    \       } else {\n            return 1\n        }\n    }\n    if len(arr) == 5\
    \ {\n        if arr[0] == arr[4] {\n            return 0\n        } else {\n \
    \           return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0]\
    \ == arr[5] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 9 {\n        if arr[0] == arr[8] {\n            return 0\n        } else {\n\
    \            return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 11 {\n        if arr[0] == arr[10] {\n \
    \           return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 13 {\n        if arr[0\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppf93rkav_test.go:103:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] {\n            return 0\n \
    \       } else {\n            return 1\n        }\n    }\n    if len(arr) == 5\
    \ {\n        if arr[0] == arr[4] {\n            return 0\n        } else {\n \
    \           return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0]\
    \ == arr[5] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 9 {\n        if arr[0] == arr[8] {\n            return 0\n        } else {\n\
    \            return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4xttg_cg_test.go:111: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] {\n            return 0\n \
    \       } else {\n            return 1\n        }\n    }\n    if len(arr) == 5\
    \ {\n        if arr[0] == arr[4] {\n            return 0\n        } else {\n \
    \           return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0]\
    \ == arr[5] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    if len(arr) == 7 {\n        if arr[0] == arr[6] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n            return 0\n\
    \        } else {\n            return 1\n        }\n    }\n    if len(arr) ==\
    \ 9 {\n        if arr[0] == arr[8] {\n            return 0\n        } else {\n\
    \            return 1\n        }\n    }\n    if len(arr) == 10 {\n        if arr[0]\
    \ == arr[9] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4xttg_cg_test.go:111: expected '%!s(int=4)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpfexbjqqk_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpfexbjqqk_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    // if len(arr) > 2 {\n    //     if arr[0] == arr[len(arr)-1]\
    \ {\n    //         return smallest_change(arr[1:len(arr)-1])\n    //     }\n\
    \    //     return 1 + min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n\
    \    // }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpb2z28xqk_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpb2z28xqk_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpb2z28xqk_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpb2z28xqk_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmclsq3ga_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmclsq3ga_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] &&\
    \ arr[1] == arr[2] {\n            return 0\n        }\n        return 1\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 6\
    \ {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2] == arr[3] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] && arr[1] == arr[5] && arr[2] == arr[4] {\n \
    \           return 0\n        }\n        return 1\n    }\n    if len(arr) == 8\
    \ {\n        if arr[0] == arr[7] && arr[1] == arr[6] && arr[2] == arr[5] && arr[3]\
    \ == arr[4] {\n            return 0\n        }\n        return 1\n    }\n    if\
    \ len(arr) == 9 {\n        if arr[0] == arr[8] && arr[1] == arr[7] && arr[2] ==\
    \ arr[6] && arr[3] == arr[5] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] && arr[1] ==\
    \ arr[8] && arr[2] == arr[7] && arr[3] == arr[6] && arr[4] == arr[5]\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnusneu7n_test.go:75:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp06z4q1i4_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp06z4q1i4_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    if len(arr) == 11 {\n        if arr[0]\
    \ == arr[10] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 12 {\n        if arr[0] == arr[11] {\n            return 0\n\
    \        }\n        return 1\n    }\n    if len(arr) == 13 {\n        if arr[0]\
    \ == arr[12] {\n            return 0\n        }\n        return 1\n    }\n   \
    \ if len(arr) == 14 {\n        if arr[0] == arr[13] {\n            return 0\n\
    \        }\n        return 1\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps2_an4vk_test.go:102:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075047
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        }\n        return 1\n    }\n    if len(arr)\
    \ == 3 {\n        if arr[0] == arr[2] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[3] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if len(arr) ==\
    \ 5 {\n        if arr[0] == arr[4] {\n            return 0\n        }\n      \
    \  return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] == arr[5] {\n  \
    \          return 0\n        }\n        return 1\n    }\n    if len(arr) == 7\
    \ {\n        if arr[0] == arr[6] {\n            return 0\n        }\n        return\
    \ 1\n    }\n    if len(arr) == 8 {\n        if arr[0] == arr[7] {\n          \
    \  return 0\n        }\n        return 1\n    }\n    if len(arr) == 9 {\n    \
    \    if arr[0] == arr[8] {\n            return 0\n        }\n        return 1\n\
    \    }\n    if len(arr) == 10 {\n        if arr[0] == arr[9] {\n            return\
    \ 0\n        }\n        return 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpb68bfauz_test.go:102: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpb68bfauz_test.go:102:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    if len(arr)\
    \ == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n   \
    \     return 1\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n\
    \            return 0\n        }\n        return 1\n    }\n    if arr[0] == arr[len(arr)-1]\
    \ {\n        return smallest_change(arr[1:len(arr)-1])\n    }\n    return 1 +\
    \ min(smallest_change(arr[1:]), smallest_change(arr[:len(arr)-1]))\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw96p_p4g_test.go:37:16: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr)\
    \ == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] ==\
    \ arr[1] {\n            return 0\n        } else {\n            return 1\n   \
    \     }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[2] {\n      \
    \      return 0\n        } else {\n            return 1\n        }\n    }\n  \
    \  if len(arr) == 4 {\n        if arr[0] == arr[3] && arr[1] == arr[2] {\n   \
    \         return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 5 {\n        if arr[0] == arr[4] && arr[1] == arr[3] {\n \
    \           return 0\n        } else {\n            return 1\n        }\n    }\n\
    \    if len(arr) == 6 {\n        if arr[0] == arr[5] && arr[1] == arr[4] && arr[2]\
    \ == arr[3] {\n            return 0\n        } else {\n            return 1\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpdsr9ia2g_test.go:83: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpdsr9ia2g_test.go:83:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a list arr of integers, find the minimum number of elements that\n\
    // need to be changed to make the list palindromic. A palindromic list is a list\
    \ that\n// is read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps78q1xsi_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmps78q1xsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075049
