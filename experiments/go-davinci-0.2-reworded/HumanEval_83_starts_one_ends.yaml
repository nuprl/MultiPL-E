name: HumanEval_83_starts_one_ends
language: go_test.go
prompt: "package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunc starts_one_ends(n int) int\
  \ {\n"
tests: "func TestStarts_One_Ends(t *testing.T) {\n  candidate := starts_one_ends\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
  \ candidate(2), expected: 18 },\n     { actual: candidate(3), expected: 180 },\n\
  \     { actual: candidate(4), expected: 1800 },\n     { actual: candidate(5), expected:\
  \ 18000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
  \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n       \
    \ return 3\n    }\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n}\n",
  "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 10\n\
    \    }\n    if n == 3 {\n        return 100\n    }\n    if n == 4 {\n        return\
    \ 1000\n    }\n    if n == 5 {\n        return 10000\n    }\n    if n == 6 {\n\
    \        return 100000\n    }\n    if n == 7 {\n        return 1000000\n    }\n\
    \    if n == 8 {\n        return 10000000\n    }\n    if n == 9 {\n        return\
    \ 100000000\n    }\n    if n == 10 {\n        return 1000000000\n    }\n    return\
    \ 0\n}\n", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 10\n    }\n    if n == 3 {\n        return 100\n    }\n    if n == 4\
    \ {\n        return 1000\n    }\n    if n == 5 {\n        return 10000\n    }\n\
    \    if n == 6 {\n        return 100000\n    }\n    return 0\n}\n", "    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    return starts_one_ends(n-1) + starts_one_ends(n-2)\n}\n", "    if n == 1\
    \ {\n        return 1\n    }\n\n    if n == 2 {\n        return 10\n    }\n\n\
    \    return 9 * pow(10, n - 2)\n}\n", "    if n == 1 {\n        return 2\n   \
    \ }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2)\n}\n", "    if n == 1 {\n        return 1\n    }\n  \
    \  if n == 2 {\n        return 10\n    }\n    if n == 3 {\n        return 100\n\
    \    }\n    if n == 4 {\n        return 1000\n    }\n    if n == 5 {\n       \
    \ return 10000\n    }\n    if n == 6 {\n        return 100000\n    }\n    if n\
    \ == 7 {\n        return 1000000\n    }\n    if n == 8 {\n        return 10000000\n\
    \    }\n    if n == 9 {\n        return 100000000\n    }\n    if n == 10 {\n \
    \       return 1000000000\n    }\n    return 0\n}\n", "    if n == 1 {\n     \
    \   return 1\n    }\n    if n == 2 {\n        return 10\n    }\n    if n == 3\
    \ {\n        return 100\n    }\n    if n == 4 {\n        return 1000\n    }\n\
    \    if n == 5 {\n        return 10000\n    }\n    if n == 6 {\n        return\
    \ 100000\n    }\n    if n == 7 {\n        return 1000000\n    }\n    if n == 8\
    \ {\n        return 10000000\n    }\n    if n == 9 {\n        return 100000000\n\
    \    }\n    if n == 10 {\n        return 1000000000\n    }\n    return 0\n}\n",
  "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n \
    \   }\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n}\n", "    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n\
    \    return starts_one_ends(n-1) + starts_one_ends(n-2)\n}\n", "    if n == 1\
    \ {\n        return 1\n    }\n    if n == 2 {\n        return 10\n    }\n    return\
    \ 9 * pow(10, n - 2)\n}\n", "    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 3\n    }\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 10\n    }\n    if n == 3 {\n        return 100\n    }\n    if n == 4 {\n   \
    \     return 1000\n    }\n    if n == 5 {\n        return 10000\n    }\n    if\
    \ n == 6 {\n        return 100000\n    }\n    if n == 7 {\n        return 1000000\n\
    \    }\n    if n == 8 {\n        return 10000000\n    }\n    if n == 9 {\n   \
    \     return 100000000\n    }\n    if n == 10 {\n        return 1000000000\n \
    \   }\n    return 0\n}\n", "    if n == 1 {\n        return 2\n    }\n    if n\
    \ == 2 {\n        return 4\n    }\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 10\n    }\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n}\n", " \
    \   if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n\
    \    }\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n}\n", "    if\
    \ n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 10\n    }\n\
    \    if n == 3 {\n        return 100\n    }\n    if n == 4 {\n        return 1000\n\
    \    }\n    if n == 5 {\n        return 10000\n    }\n    if n == 6 {\n      \
    \  return 100000\n    }\n    if n == 7 {\n        return 1000000\n    }\n    if\
    \ n == 8 {\n        return 10000000\n    }\n    if n == 9 {\n        return 100000000\n\
    \    }\n    if n == 10 {\n        return 1000000000\n    }\n    return 0\n}\n",
  "    if n == 1 {\n        return 1\n    }\n\n    if n == 2 {\n        return 10\n\
    \    }\n\n    return 9 * pow(10, n - 2)\n}\n", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2)\n}\n", "    if n == 1 {\n        return 1\n    }\n\n\
    \    if n == 2 {\n        return 2\n    }\n\n    return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
