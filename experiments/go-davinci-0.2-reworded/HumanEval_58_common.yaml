name: HumanEval_58_common
language: go_test.go
prompt: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique common elements for two lists.\n// >>> common([]int{1, 4, 3, 34,\
  \ 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n// >>> common([]int{5,\
  \ 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1 []int, l2 []int) []int\
  \ {\n"
tests: "func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
  \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
  \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: implement\n    return []int{}\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var result []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: implement\n    return []int{}\n}\n", "    // TODO:\
    \ implement\n    return []int{}\n}\n", "    // TODO: Implement me!\n    return\
    \ []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    // TODO:\
    \ implement\n    return []int{}\n}\n", "    m := make(map[int]int)\n    for _,\
    \ v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2 {\n     \
    \   if m[v] == 1 {\n            m[v] = 2\n        }\n    }\n    var result []int\n\
    \    for k, v := range m {\n        if v == 2 {\n            result = append(result,\
    \ k)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var r []int\n   \
    \ for _, v := range l2 {\n        if m[v] {\n            r = append(r, v)\n  \
    \      }\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        m[v] = true\n    }\n    var r []int\n    for _, v :=\
    \ range l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n   \
    \ }\n    return r\n}\n", "    // TODO: Implement me!\n    return []int{}\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    m[v]++\n    }\n    var result []int\n    for k, v := range m {\n        if\
    \ v == 2 {\n            result = append(result, k)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var res []int\n \
    \   for _, v := range l2 {\n        if m[v] {\n            res = append(res, v)\n\
    \        }\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n   \
    \ for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n \
    \   for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        m[v] = true\n    }\n    var r []int\n    for k, _ := range m {\n\
    \        r = append(r, k)\n    }\n    return r\n}\n", "    // TODO: implement\
    \ this function\n    return []int{}\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var res []int\n    for _,\
    \ v := range l2 {\n        if m[v] {\n            res = append(res, v)\n     \
    \   }\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n    for _, v\
    \ := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n    \
    \    m[v] = true\n    }\n    var r []int\n    for k, _ := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n", "    var result []int\n    for _,\
    \ v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var result []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    m := make(map[int]int)\n    for _, v :=\
    \ range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n\
    \    }\n    var result []int\n    for k, v := range m {\n        if v > 1 {\n\
    \            result = append(result, k)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    // TODO\n\
    \    return []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var res []int\n    for _, v := range l2\
    \ {\n        if m[v] {\n            res = append(res, v)\n        }\n    }\n \
    \   return res\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n\
    \        m[v] = true\n    }\n    var result []int\n    for _, v := range l2 {\n\
    \        if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]int)\n    for _, v := range l1\
    \ {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n\
    \    var r []int\n    for k, v := range m {\n        if v > 1 {\n            r\
    \ = append(r, k)\n        }\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2\
    \ {\n        if _, ok := m[v]; ok {\n            m[v]++\n        }\n    }\n  \
    \  res := make([]int, 0)\n    for k, v := range m {\n        if v > 1 {\n    \
    \        res = append(res, k)\n        }\n    }\n    return res\n}\n", "    var\
    \ result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n\
    \            if v1 == v2 {\n                result = append(result, v1)\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, i := range l1 {\n        for _, j := range l2 {\n            if i\
    \ == j {\n                result = append(result, i)\n            }\n        }\n\
    \    }\n    return result\n}\n", "    m := make(map[int]int)\n    for _, v :=\
    \ range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2 {\n        if\
    \ _, ok := m[v]; ok {\n            m[v] = 2\n        }\n    }\n    var res []int\n\
    \    for k, v := range m {\n        if v == 2 {\n            res = append(res,\
    \ k)\n        }\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n \
    \   for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    // TODO: Implement me!\n\
    \    return nil\n}\n", "    var result []int\n    for _, v1 := range l1 {\n  \
    \      for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    // TODO: Implement me!\n    return []int{}\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var r []int\n   \
    \ for _, v := range l2 {\n        if m[v] {\n            r = append(r, v)\n  \
    \      }\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n  \
    \      m[v] = true\n    }\n    var r []int\n    for k, _ := range m {\n      \
    \  r = append(r, k)\n    }\n    return r\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n   \
    \     m[v] = true\n    }\n    var result []int\n    for _, v := range l2 {\n \
    \       if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    r := make([]int, 0)\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n  \
    \  return r\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    var result []int\n\
    \    for k, v := range m {\n        if v == 2 {\n            result = append(result,\
    \ k)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n    \
    \    m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    var\
    \ result []int\n    for k, v := range m {\n        if v == 2 {\n            result\
    \ = append(result, k)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        if m[v] > 0 {\n            result\
    \ = append(result, v)\n            m[v] = 0\n        }\n    }\n    return result\n\
    }\n", "    // TODO: Implement me!\n    return []int{}\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    for _, v1\
    \ := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var result []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    m := make(map[int]int)\n    for _, v :=\
    \ range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n\
    \    }\n    var r []int\n    for k, v := range m {\n        if v == 2 {\n    \
    \        r = append(r, k)\n        }\n    }\n    return r\n}\n", "    // TODO:\
    \ implement\n    return []int{}\n}\n", "    var result []int\n    for _, v1 :=\
    \ range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n   \
    \             result = append(result, v1)\n            }\n        }\n    }\n \
    \   return result\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        m[v] = true\n    }\n    var res []int\n    for _, v := range l2 {\n\
    \        if m[v] {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for _,\
    \ v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    // TODO:\
    \ Implement me!\n    return []int{}\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n    for\
    \ _, v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2 {\n  \
    \      if m[v] == 1 {\n            m[v] = 2\n        }\n    }\n    var r []int\n\
    \    for k, v := range m {\n        if v == 2 {\n            r = append(r, k)\n\
    \        }\n    }\n    return r\n}\n", "    m := make(map[int]int)\n    for _,\
    \ v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2 {\n     \
    \   if m[v] == 1 {\n            m[v] = 2\n        }\n    }\n    var result []int\n\
    \    for k, v := range m {\n        if v == 2 {\n            result = append(result,\
    \ k)\n        }\n    }\n    return result\n}\n", "    // TODO: implement\n   \
    \ return []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n \
    \       for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n\
    \    for _, v := range l2 {\n        m[v]++\n    }\n    var result []int\n   \
    \ for k, v := range m {\n        if v > 1 {\n            result = append(result,\
    \ k)\n        }\n    }\n    return result\n}\n", "    // TODO: Implement me!\n\
    \    return []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var r []int\n    for _, v := range l2\
    \ {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for _,\
    \ v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v] = 1\n    }\n    for _, v := range l2 {\n        if _, ok\
    \ := m[v]; ok {\n            m[v] = 2\n        }\n    }\n    var res []int\n \
    \   for k, v := range m {\n        if v == 2 {\n            res = append(res,\
    \ k)\n        }\n    }\n    return res\n}\n", "    var result []int\n    for _,\
    \ i := range l1 {\n        for _, j := range l2 {\n            if i == j {\n \
    \               result = append(result, i)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    // TODO: Implement me!\n    return []int{}\n}\n",
  "    return nil\n}\n", "    var result []int\n    for _, v1 := range l1 {\n    \
    \    for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    // TODO: implement\n    return []int{}\n}\n", "    // TODO: Implement me!\n\
    \    return []int{}\n}\n", "    m := make(map[int]int)\n    for _, v := range\
    \ l1 {\n        m[v] = 1\n    }\n    for _, v := range l2 {\n        if m[v] ==\
    \ 1 {\n            m[v] = 2\n        }\n    }\n    var result []int\n    for k,\
    \ v := range m {\n        if v == 2 {\n            result = append(result, k)\n\
    \        }\n    }\n    return result\n}\n", "    if len(l1) == 0 || len(l2) ==\
    \ 0 {\n        return []int{}\n    }\n    m := make(map[int]int)\n    for _, v\
    \ := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n\
    \    }\n    var res []int\n    for k, v := range m {\n        if v > 1 {\n   \
    \         res = append(res, k)\n        }\n    }\n    return res\n}\n", "    m\
    \ := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n  \
    \  for _, v := range l2 {\n        m[v]++\n    }\n    var res []int\n    for k,\
    \ v := range m {\n        if v > 1 {\n            res = append(res, k)\n     \
    \   }\n    }\n    return res\n}\n", "    // TODO: implement me\n    return nil\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    // TODO: Implement me!\n\
    \    return []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v] = 1\n    }\n\
    \    for _, v := range l2 {\n        if _, ok := m[v]; ok {\n            m[v]++\n\
    \        }\n    }\n    var result []int\n    for k, v := range m {\n        if\
    \ v > 1 {\n            result = append(result, k)\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: implement\n    return []int{}\n}\n", "    // TODO:\
    \ Implement me!\n    return []int{}\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    // TODO: implement\n    return []int{}\n}\n", " \
    \   var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range\
    \ l2 {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    // TODO: implement me\n\
    \    return []int{}\n}\n", "    return nil\n}\n", "    // TODO: implement\n  \
    \  return []int{}\n}\n", "    // TODO: implement\n    return []int{}\n}\n", " \
    \   m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    var result []int\n    for _, v := range l2 {\n        if m[v] {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2\
    \ {\n        if _, ok := m[v]; ok {\n            m[v] = 2\n        }\n    }\n\
    \    var r []int\n    for k, v := range m {\n        if v == 2 {\n           \
    \ r = append(r, k)\n        }\n    }\n    return r\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    for _, v1\
    \ := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]int)\n    for _, v := range l1\
    \ {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n\
    \    var result []int\n    for k, v := range m {\n        if v > 1 {\n       \
    \     result = append(result, k)\n        }\n    }\n    return result\n}\n", " \
    \   // TODO: Implement me!\n    return []int{}\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var r []int\n    for _, v := range l2\
    \ {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v]\
    \ = true\n    }\n    var result []int\n    for _, v := range l2 {\n        if\
    \ m[v] {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n    \
    \    m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    var\
    \ result []int\n    for k, v := range m {\n        if v > 1 {\n            result\
    \ = append(result, k)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        m[v] = true\n    }\n    var res []int\n    for k, _ := range m\
    \ {\n        res = append(res, k)\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var ret []int\n \
    \   for _, v := range l2 {\n        if m[v] {\n            ret = append(ret, v)\n\
    \        }\n    }\n    return ret\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n    for\
    \ _, v := range l2 {\n        if m[v] {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: Implement me!\n    return\
    \ []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    var r []int\n    for _, v := range l2 {\n     \
    \   if m[v] {\n            r = append(r, v)\n        }\n    }\n    return r\n\
    }\n", "    // TODO: implement\n    return []int{}\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    var result []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    // TODO: implement\n    return []int{}\n\
    }\n", "    // TODO: implement\n    return []int{}\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n\
    \        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n  \
    \  var res []int\n    for k, v := range m {\n        if v > 1 {\n            res\
    \ = append(res, k)\n        }\n    }\n    return res\n}\n", "    // TODO: Implement\
    \ me!\n    return []int{}\n}\n", "    // TODO: Implement me!\n    return []int{}\n\
    }\n", "    // TODO: implement me\n    return []int{}\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    // TODO: implement\n    return []int{}\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] =\
    \ true\n    }\n    res := make([]int, 0)\n    for _, v := range l2 {\n       \
    \ if m[v] {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] =\
    \ true\n    }\n    var result []int\n    for _, v := range l2 {\n        if m[v]\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    // TODO: implement me\n    return []int{}\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    // TODO: implement\n   \
    \ return []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1\
    \ {\n        m[v] = true\n    }\n    var r []int\n    for _, v := range l2 {\n\
    \        if m[v] {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v]\
    \ = true\n    }\n    var result []int\n    for _, v := range l2 {\n        if\
    \ m[v] {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n   \
    \     m[v] = true\n    }\n    var result []int\n    for _, v := range l2 {\n \
    \       if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    m := make(map[int]int)\n    for _, v := range l1\
    \ {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]++\n    }\n\
    \    var result []int\n    for k, v := range m {\n        if v > 1 {\n       \
    \     result = append(result, k)\n        }\n    }\n    return result\n}\n", " \
    \   // TODO: implement\n    return []int{}\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    var res []int\n    for k, v := range m {\n       \
    \ if v > 1 {\n            res = append(res, k)\n        }\n    }\n    return res\n\
    }\n", "    // TODO: Implement me!\n    return []int{}\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, n1 := range l1 {\n        for _, n2 := range l2 {\n            if n1 == n2\
    \ {\n                result = append(result, n1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    m := make(map[int]bool)\n    for _, v :=\
    \ range l1 {\n        m[v] = true\n    }\n    var r []int\n    for _, v := range\
    \ l2 {\n        if m[v] {\n            r = append(r, v)\n        }\n    }\n  \
    \  return r\n}\n", "    // TODO: Implement me!\n    return []int{}\n}\n", "  \
    \  m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    var result []int\n    for _, v := range l2 {\n        if m[v] {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] =\
    \ true\n    }\n    var result []int\n    for _, v := range l2 {\n        if m[v]\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]++\n    }\n    res := make([]int,\
    \ 0)\n    for k, v := range m {\n        if v > 1 {\n            res = append(res,\
    \ k)\n        }\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n \
    \   for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    // TODO: Implement me!\n\
    \    return nil\n}\n", "    // TODO: Implement me!\n    return []int{}\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    var res []int\n    for _, v := range l2 {\n        if m[v] {\n   \
    \         res = append(res, v)\n        }\n    }\n    return res\n}\n", "    var\
    \ result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n\
    \            if v1 == v2 {\n                result = append(result, v1)\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var common []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            common = append(common,\
    \ v)\n        }\n    }\n    return common\n}\n", "    var common []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                common = append(common, v1)\n            }\n        }\n \
    \   }\n    return common\n}\n", "    // TODO: Implement me!\n    return []int{}\n\
    }\n", "    // TODO: implement me\n    return nil\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    // TODO: implement\n    return []int{}\n}\n", "  \
    \  m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    var r []int\n    for _, v := range l2 {\n        if m[v] {\n     \
    \       r = append(r, v)\n        }\n    }\n    return r\n}\n", "    var result\
    \ []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n      \
    \      if v1 == v2 {\n                result = append(result, v1)\n          \
    \  }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    var res []int\n    for k, v := range m {\n       \
    \ if v > 1 {\n            res = append(res, k)\n        }\n    }\n    return res\n\
    }\n", "    // TODO: implement\n    return []int{}\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    r := make([]int,\
    \ 0)\n    for _, v := range l2 {\n        if m[v] {\n            r = append(r,\
    \ v)\n        }\n    }\n    return r\n}\n", "    m := make(map[int]int)\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    m[v]++\n    }\n    var r []int\n    for k, v := range m {\n        if v ==\
    \ 2 {\n            r = append(r, k)\n        }\n    }\n    return r\n}\n", " \
    \   // TODO: Implement me!\n    return []int{}\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    var res []int\n    for _,\
    \ v := range l2 {\n        if m[v] {\n            res = append(res, v)\n     \
    \   }\n    }\n    return res\n}\n", "    // TODO: implement me\n    return []int{}\n\
    }\n", "    // TODO: Implement me!\n    return []int{}\n}\n", "    // TODO: Implement\
    \ me!\n    return nil\n}\n", "    m := make(map[int]bool)\n    for _, v := range\
    \ l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n        m[v] =\
    \ true\n    }\n    var result []int\n    for k, _ := range m {\n        result\
    \ = append(result, k)\n    }\n    return result\n}\n", "    var l3 []int\n   \
    \ for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1\
    \ == v2 {\n                l3 = append(l3, v1)\n            }\n        }\n   \
    \ }\n    return l3\n}\n", "    // TODO: Implement me!\n    return nil\n}\n", " \
    \   // TODO: Implement me!\n    return []int{}\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    // sort l1 and l2\n    //\
    \ iterate over l1 and l2\n    // if l1[i] == l2[j]\n    //   add l1[i] to result\n\
    \    //   increment i and j\n    // else if l1[i] < l2[j]\n    //   increment\
    \ i\n    // else\n    //   increment j\n    // return result\n    return []int{}\n\
    }\n", "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 :=\
    \ range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v] = 1\n    }\n    for _, v := range l2\
    \ {\n        if m[v] == 1 {\n            m[v] = 2\n        }\n    }\n    var r\
    \ []int\n    for k, v := range m {\n        if v == 2 {\n            r = append(r,\
    \ k)\n        }\n    }\n    return r\n}\n", "    // TODO: implement\n    return\
    \ []int{}\n}\n", "    var result []int\n    var m = make(map[int]bool)\n    for\
    \ _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range l2 {\n\
    \        if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v1 := range l1 {\n        for _, v2 := range l2\
    \ {\n            if v1 == v2 {\n                result = append(result, v1)\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if\
    \ v1 == v2 {\n                result = append(result, v1)\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    // TODO\n    return []int{}\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    var r []int\n    for _, v := range l2 {\n        if m[v] {\n     \
    \       r = append(r, v)\n        }\n    }\n    return r\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        m[v] = true\n    }\n    var result []int\n    for k, _ := range\
    \ m {\n        result = append(result, k)\n    }\n    return result\n}\n", " \
    \   m := make(map[int]int)\n    for _, v := range l1 {\n        m[v]++\n    }\n\
    \    for _, v := range l2 {\n        m[v]++\n    }\n    var res []int\n    for\
    \ k, v := range m {\n        if v == 2 {\n            res = append(res, k)\n \
    \       }\n    }\n    return res\n}\n", "    // TODO: Implement me!\n    return\
    \ []int{}\n}\n", "    // TODO\n    return []int{}\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    var result []int\n\
    \    for _, v := range l2 {\n        if m[v] {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    r := make([]int,\
    \ 0)\n    for _, v := range l2 {\n        if m[v] {\n            r = append(r,\
    \ v)\n        }\n    }\n    return r\n}\n", "    var result []int\n    for _,\
    \ v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n\
    \                result = append(result, v1)\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] = true\n\
    \    }\n    var result []int\n    for _, v := range l2 {\n        if m[v] {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    // TODO: implement\n    return []int{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
