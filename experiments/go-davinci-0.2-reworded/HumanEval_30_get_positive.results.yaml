language: go_test.go
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, x := range l {\n        if x >\
    \ 0 {\n            res = append(res, x)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return\
    \ positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    return nil\n}\n\nfunc TestGet_Positive(t *testing.T) {\n\
    \  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp_kw631ol_test.go:33: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestGet_Positive/test_num__1 (0.00s)\n        tmp_kw631ol_test.go:33:\
    \ expected '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9)\
    \ %!s(int=123) %!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positives []int\n    for _, v := range l {\n       \
    \ if v > 0 {\n            positives = append(positives, v)\n        }\n    }\n\
    \    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, n := range l {\n        if\
    \ n > 0 {\n            result = append(result, n)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, n := range l {\n        if n >\
    \ 0 {\n            res = append(res, n)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, n := range l {\n        if n > 0\
    \ {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var positive []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            positive = append(positive, v)\n        }\n    }\n    return\
    \ positive\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, n := range l {\n        if\
    \ n > 0 {\n            result = append(result, n)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var r []int\n    for _, v := range l {\n        if v > 0\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestGet_Positive(t\
    \ *testing.T) {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual:\
    \ candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3,\
    \ 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{}\
    \ },\n     { actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var res []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, i := range l {\n        if\
    \ i > 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
