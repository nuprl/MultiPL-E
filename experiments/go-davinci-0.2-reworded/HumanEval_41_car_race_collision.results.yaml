language: go_test.go
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to record the positions of\
    \ the cars.\n    // The hash table is a map from the position to the number of\
    \ cars at that position.\n    // We start with the left-to-right cars.  We iterate\
    \ through the cars, and for each car,\n    // we check whether there is a car\
    \ at the same position in the hash table.  If so,\n    // we increment the collision\
    \ count.  Then we add the car to the hash table.\n    // We then repeat the same\
    \ process for the right-to-left cars.\n    // The time complexity is O(n), and\
    \ the space complexity is O(n).\n    collisions := 0\n    positions := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        if positions[i] > 0 {\n            collisions++\n\
    \        }\n        positions[i]++\n    }\n    for i := n - 1; i >= 0; i-- {\n\
    \        if positions[i] > 0 {\n            collisions++\n        }\n        positions[i]++\n\
    \    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3lozocj7_test.go:58: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3lozocj7_test.go:58:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3lozocj7_test.go:58: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3lozocj7_test.go:58:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3lozocj7_test.go:58: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to keep track of the cars that are moving left\
    \ to right.\n    // The key is the car's position, and the value is the number\
    \ of cars at that position.\n    // For example, if there are three cars at position\
    \ 0, then the map will contain\n    // an entry of the form 0: 3.\n    left_to_right\
    \ := make(map[int]int)\n    // We use a map to keep track of the cars that are\
    \ moving right to left.\n    // The key is the car's position, and the value is\
    \ the number of cars at that position.\n    // For example, if there are three\
    \ cars at position 0, then the map will contain\n    // an entry of the form 0:\
    \ 3.\n    right_to_left := make(map[int]int)\n    // We use a variable to keep\
    \ track of the number of collisions.\n    collisions := 0\n    // We use a variable\
    \ to keep track of the current position of the car that's moving left to right.\n\
    \    // Initially, the car is at position 0.\n    left_to_right_position := 0\n\
    \    // We use a variable to keep track of the current position of the car that's\
    \ moving right to left.\n    // Initially, the car is at position 0.\n    right_to_left_position\
    \ := 0\n    // We use a variable to keep track of the number of cars that are\
    \ moving left to right.\n    // Initially, there are no cars.\n    left_to_right_cars\
    \ := 0\n    // We use a variable to keep track of the number of cars that are\
    \ moving right to left.\n    // Initially, there are no cars.\n    right_to_left_cars\
    \ := 0\n    // We use a variable to keep track of the number of cars that are\
    \ moving left to right\n    // and have already been processed.\n    // Initially,\
    \ there are no cars.\n    left_to_right_cars_processed := 0\n    // We use a variable\
    \ to keep track of the number of cars that are moving right to left\n    // and\
    \ have already been processed.\n    // Initially, there are no cars.\n    right_to_left_cars_processed\
    \ := 0\n    // We use a variable to keep track of the number of cars that have\
    \ been processed.\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppjqkqdl4_test.go:51:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We will use a binary tree to represent the cars.\n    //\
    \ The left child of a node represents a car moving left to right;\n    // the\
    \ right child of a node represents a car moving right to left.\n    // The value\
    \ of the node represents the position of the car.\n    // The root of the tree\
    \ represents the position of the cars at time 0.\n    // The left and right subtrees\
    \ of the root represent the positions of the cars\n    // at time 1 and time -1,\
    \ respectively.\n    // The left and right subtrees of the left child of the root\
    \ represent the positions\n    // of the cars at time 2 and time 0, respectively.\n\
    \    // The left and right subtrees of the right child of the root represent the\
    \ positions\n    // of the cars at time -2 and time 0, respectively.\n    // The\
    \ left and right subtrees of the left child of the left child of the root represent\n\
    \    // the positions of the cars at time 3 and time 1, respectively.\n    //\
    \ The left and right subtrees of the right child of the left child of the root\
    \ represent\n    // the positions of the cars at time 1 and time -1, respectively.\n\
    \    // The left and right subtrees of the left child of the right child of the\
    \ root represent\n    // the positions of the cars at time -1 and time -3, respectively.\n\
    \    // The left and right subtrees of the right child of the right child of the\
    \ root represent\n    // the positions of the cars at time -1 and time 1, respectively.\n\
    \    // The left and right subtrees of the left child of the left child of the\
    \ left child of the root represent\n    // the positions of the cars at time 4\
    \ and time 2, respectively.\n    // The left and right subtrees of the right child\
    \ of the left child of the left child of the root represent\n    // the positions\
    \ of the cars at time 2 and time 0, respectively.\n    // The left and right subtrees\
    \ of the left child of the right child of the left child of the root represent\n\
    \    // the positions of the cars at time 0 and time -2, respectively.\n    //\
    \ The left and right subtrees of the right child of the right child of the left\
    \ child of the root represent\n    // the positions of the cars at time 0 and\
    \ time 2, respectively.\n    // The left and\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3sm9imvy_test.go:45:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // the number of collisions is the number of cars that are moving\
    \ in the same direction\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmptnr308wj_test.go:38: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmptnr308wj_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmptnr308wj_test.go:38: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmptnr308wj_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmptnr308wj_test.go:38: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to store the cars\
    \ moving left to right.\n    // The key of the tree is the position of the car.\
    \  The value of the tree is the\n    // speed of the car.  The tree is sorted\
    \ by the key.\n    // We then iterate through the cars moving right to left. \
    \ For each car, we search\n    // the tree to find the first car that's moving\
    \ left to right and is to the right\n    // of the car moving right to left. \
    \ If the car moving right to left is moving\n    // faster than the car moving\
    \ left to right, then the two cars will collide.\n    // We then remove the car\
    \ moving left to right from the tree.\n    // We repeat this process until we\
    \ have iterated through all the cars moving right to left.\n    // The total number\
    \ of collisions is the number of cars moving left to right that\n    // we have\
    \ removed from the tree.\n    //\n    // The time complexity of this algorithm\
    \ is O(n log n).\n    // The space complexity of this algorithm is O(n).\n   \
    \ //\n    // The time complexity of this algorithm can be improved to O(n).\n\
    \    // The idea is to use a min heap to store the cars moving left to right.\n\
    \    // The key of the heap is the position of the car.  The value of the heap\
    \ is the\n    // speed of the car.  The heap is sorted by the key.\n    // We\
    \ then iterate through the cars moving right to left.  For each car, we search\n\
    \    // the heap to find the first car that's moving left to right and is to the\
    \ right\n    // of the car moving right to left.  If the car moving right to left\
    \ is moving\n    // faster than the car moving left to right, then the two cars\
    \ will collide.\n    // We then remove the car moving left to right from the heap.\n\
    \    // We repeat this process until we have iterated through all the cars moving\
    \ right to left.\n    // The total number of collisions is the number of cars\
    \ moving left to right that\n    // we have removed from the heap.\n    //\n \
    \   // The time complexity of this algorithm is O(n log n).\n    // The space\
    \ complexity of this algorithm is O(n).\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpcxcjy9tq_test.go:67: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpcxcjy9tq_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpcxcjy9tq_test.go:67: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpcxcjy9tq_test.go:67:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpcxcjy9tq_test.go:67: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ left to right\n    // that are in front of the cars that are moving right to\
    \ left.\n    // The cars that are moving left to right are the first n cars.\n\
    \    // The cars that are moving right to left are the last n cars.\n    // The\
    \ cars that are moving left to right are in front of the cars that are moving\n\
    \    // right to left if and only if the index of the car that's moving left to\
    \ right\n    // is less than the index of the car that's moving right to left.\n\
    \    // The index of the car that's moving left to right is the index of the car\
    \ in the\n    // first n cars.\n    // The index of the car that's moving right\
    \ to left is the index of the car in the\n    // last n cars.\n    // The index\
    \ of the car in the first n cars is the index of the car in the\n    // first\
    \ n cars.\n    // The index of the car in the last n cars is the index of the\
    \ car in the\n    // last n cars.\n    // The index of the car in the first n\
    \ cars is the index of the car in the\n    // first n cars.\n    // The index\
    \ of the car in the last n cars is the index of the car in the\n    // last n\
    \ cars.\n    // The index of the car in the first n cars is the index of the car\
    \ in the\n    // first n cars.\n    // The index of the car in the last n cars\
    \ is the index of the car in the\n    // last n cars.\n    // The index of the\
    \ car in the first n cars is the index of the car in the\n    // first n cars.\n\
    \    // The index of the car in the last n cars is the index of the car in the\n\
    \    // last n cars.\n    // The index of the car in the first n cars is the index\
    \ of the car in the\n    // first n cars.\n    // The index of the car in the\
    \ last n cars is the index of the car in the\n    // last n cars.\n    // The\
    \ index of the car in the first n cars is the index of the car in the\n    //\
    \ first n cars.\n    // The index of the car in the last n cars is the index of\
    \ the\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps5pcm4dy_test.go:51:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a map to keep track of the cars that are\
    \ moving left to right.\n    // The key is the position of the car; the value\
    \ is the number of cars at that position.\n    // The map is initialized with\
    \ the positions of the cars that are moving left to right.\n    // Then, we iterate\
    \ over the cars that are moving right to left.  For each car, we\n    // check\
    \ if there are any cars in the map that are at the same position.  If so,\n  \
    \  // we increment the number of collisions.  We then remove the car from the\
    \ map.\n    // The reason for removing the car is that we want to avoid double\
    \ counting.\n    // For example, if there are two cars moving left to right at\
    \ position 10, and\n    // one car moving right to left at position 10, we want\
    \ to count this as one collision.\n    // If we don't remove the car, we will\
    \ count this as two collisions.\n    // The time complexity is O(n) and the space\
    \ complexity is O(n).\n    m := make(map[int]int)\n    for i := 0; i < n; i++\
    \ {\n        m[i] = 1\n    }\n    collisions := 0\n    for i := n - 1; i >= 0;\
    \ i-- {\n        if _, ok := m[i]; ok {\n            collisions++\n          \
    \  delete(m, i)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp7l12pys3_test.go:59: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp7l12pys3_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp7l12pys3_test.go:59: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp7l12pys3_test.go:59:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp7l12pys3_test.go:59: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 1 to n.\n    // The cars moving\
    \ left to right are numbered 1 to n.\n    // The cars moving right to left are\
    \ numbered n+1 to 2n.\n    // We will use a map to keep track of the cars.\n \
    \   // The key of the map is the car number.\n    // The value of the map is the\
    \ car's position.\n    // Initially, the cars moving left to right are at position\
    \ 0.\n    // Initially, the cars moving right to left are at position 2n.\n  \
    \  car_positions := make(map[int]int)\n    for i := 1; i <= 2*n; i++ {\n     \
    \   if i <= n {\n            car_positions[i] = 0\n        } else {\n        \
    \    car_positions[i] = 2*n\n        }\n    }\n    // The cars move at the same\
    \ speed.\n    // Every second, the cars move one unit.\n    // We will simulate\
    \ the movement of the cars.\n    // We will keep track of the number of collisions.\n\
    \    num_collisions := 0\n    for i := 1; i <= 2*n; i++ {\n        for j := 1;\
    \ j <= 2*n; j++ {\n            // Move the cars.\n            if j <= n {\n  \
    \              car_positions[j] += 1\n            } else {\n                car_positions[j]\
    \ -= 1\n            }\n            // Check for collisions.\n            if j\
    \ <= n {\n                if car_positions[j] == car_positions[j+n] {\n      \
    \              num_collisions += 1\n                }\n            }\n       \
    \ }\n    }\n    return num_collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpjkjgzts1_test.go:74: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpjkjgzts1_test.go:74:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpjkjgzts1_test.go:74: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpjkjgzts1_test.go:74:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpjkjgzts1_test.go:74: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.  We use the following\
    \ arrays to\n    // keep track of the cars' positions.\n    // cars_left[i] is\
    \ the position of the car that's moving left to right and\n    // has number i.\n\
    \    // cars_right[i] is the position of the car that's moving right to left and\n\
    \    // has number i.\n    cars_left := make([]int, n)\n    cars_right := make([]int,\
    \ n)\n    // Initially, the cars are very far from each other.\n    for i := 0;\
    \ i < n; i++ {\n        cars_left[i] = i\n        cars_right[i] = i\n    }\n \
    \   // We simulate the cars' movements.\n    // The cars move in the same speed.\
    \  As a result, the cars that are closer to\n    // each other move faster.  We\
    \ simulate this by moving the cars in order of\n    // their distance from each\
    \ other.\n    // We use the following array to keep track of the cars' distances\
    \ from each other.\n    // distance[i] is the distance between the cars that are\
    \ moving left to right and\n    // have numbers i and i+1.\n    distance := make([]int,\
    \ n-1)\n    // Initially, the cars are very far from each other.\n    for i :=\
    \ 0; i < n-1; i++ {\n        distance[i] = n - 1 - i\n    }\n    // We simulate\
    \ the cars' movements.\n    // We keep track of the number of collisions.\n  \
    \  collisions := 0\n    // We simulate the cars' movements.\n    // We simulate\
    \ the cars' movements until all cars have reached the end of the road.\n    for\
    \ cars_left[n-1] < n-1 || cars_right[n-1] < n-1 {\n        // We find the car\
    \ that's closest to another car.\n        // We start by assuming that the closest\
    \ car is the car that's moving left to right\n        // and has number 0.\n \
    \       closest_car := 0\n        // We find the car that's closest to another\
    \ car.\n        // We start by assuming that the closest car is the car that's\
    \ moving left to right\n        // and has number 0\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz0rf0exs_test.go:55:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to keep track of the cars that are moving left\
    \ to right.\n    // The key is the car's position.  The value is the number of\
    \ cars at that position.\n    // We use a map to keep track of the cars that are\
    \ moving right to left.\n    // The key is the car's position.  The value is the\
    \ number of cars at that position.\n    left_to_right := make(map[int]int)\n \
    \   right_to_left := make(map[int]int)\n    // We use a map to keep track of the\
    \ collisions.\n    // The key is the car's position.  The value is the number\
    \ of collisions at that position.\n    collisions := make(map[int]int)\n    //\
    \ We use a map to keep track of the cars that are moving left to right.\n    //\
    \ The key is the car's position.  The value is the number of cars at that position.\n\
    \    // We use a map to keep track of the cars that are moving right to left.\n\
    \    // The key is the car's position.  The value is the number of cars at that\
    \ position.\n    for i := 0; i < n; i++ {\n        left_to_right[i] = 1\n    \
    \    right_to_left[-i] = 1\n    }\n    // We use a map to keep track of the collisions.\n\
    \    // The key is the car's position.  The value is the number of collisions\
    \ at that position.\n    for i := 0; i < n; i++ {\n        for j := 0; j < n;\
    \ j++ {\n            if _, ok := left_to_right[i]; ok {\n                if _,\
    \ ok := right_to_left[-i]; ok {\n                    collisions[i] = 1\n     \
    \           }\n            }\n        }\n    }\n    // We use a map to keep track\
    \ of the collisions.\n    // The key is the car's position.  The value is the\
    \ number of collisions at that position.\n    collision_count := 0\n    for _,\
    \ v := range collisions {\n        collision_count += v\n    }\n    return collision_count\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpafsieqs5_test.go:71: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpafsieqs5_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpafsieqs5_test.go:71: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpafsieqs5_test.go:71:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpafsieqs5_test.go:71: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars at that position.  As we iterate\
    \ through the cars that are\n    // moving right to left, we check if the hash\
    \ table contains the position of\n    // the car.  If it does, we increment the\
    \ number of collisions by the value\n    // of the hash table at that position.\n\
    \    // We use a hash table because it allows us to check if a key exists in O(1)\
    \ time.\n    // We use a hash table instead of a sorted array because it allows\
    \ us to insert\n    // a key in O(1) time.\n    // We use a hash table instead\
    \ of a sorted linked list because it allows us to\n    // check if a key exists\
    \ in O(1) time.\n    // We use a hash table instead of a binary search tree because\
    \ it allows us to\n    // insert a key in O(1) time.\n    // We use a hash table\
    \ instead of a balanced binary search tree because it allows\n    // us to insert\
    \ a key in O(1) time.\n    // We use a hash table instead of a red-black tree\
    \ because it allows us to insert\n    // a key in O(1) time.\n    // We use a\
    \ hash table instead of a B-tree because it allows us to insert a key\n    //\
    \ in O(1) time.\n    // We use a hash table instead of a B+-tree because it allows\
    \ us to insert a key\n    // in O(1) time.\n    // We use a hash table instead\
    \ of a B*-tree because it allows us to insert a key\n    // in O(1) time.\n  \
    \  // We use a hash table instead of a B**-tree because it allows us to insert\
    \ a key\n    // in O(1) time.\n    // We use a hash table instead of a B***-tree\
    \ because it allows us to insert a key\n    // in O(1) time.\n    // We use a\
    \ hash table instead of a B****-tree because it allows us to insert a key\n  \
    \  // in O(1) time.\n    // We use a hash table instead of a B*****-tree because\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe39fynvi_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that n is a positive integer.\n    // Assume that\
    \ the cars are numbered from 0 to n-1.\n    // Assume that the cars moving left\
    \ to right are numbered 0 to n-1.\n    // Assume that the cars moving right to\
    \ left are numbered n to 2n-1.\n    // Assume that the cars moving left to right\
    \ start at position 0.\n    // Assume that the cars moving right to left start\
    \ at position 2n.\n    // Assume that all cars move at the same speed.\n    //\
    \ Assume that the cars are infinitely strong and sturdy.\n    // Assume that the\
    \ road is infinitely long and straight.\n    // Assume that the cars are infinitely\
    \ small.\n    // Assume that the cars are infinitely thin.\n    // Assume that\
    \ the cars are infinitely light.\n    // Assume that the cars are infinitely fast.\n\
    \    // Assume that the cars are infinitely precise.\n    // Assume that the cars\
    \ are infinitely accurate.\n    // Assume that the cars are infinitely perfect.\n\
    \    // Assume that the cars are infinitely precise.\n    // Assume that the cars\
    \ are infinitely accurate.\n    // Assume that the cars are infinitely perfect.\n\
    \    // Assume that the cars are infinitely precise.\n    // Assume that the cars\
    \ are infinitely accurate.\n    // Assume that the cars are infinitely perfect.\n\
    \    // Assume that the cars are infinitely precise.\n    // Assume that the cars\
    \ are infinitely accurate.\n    // Assume that the cars are infinitely perfect.\n\
    \    // Assume that the cars are infinitely precise.\n    // Assume that the cars\
    \ are infinitely accurate.\n    // Assume that the cars are infinitely perfect.\n\
    \    // Assume that the cars are infinitely precise.\n    // Assume that the cars\
    \ are infinitely accurate.\n    // Assume that the cars are infinitely perfect.\n\
    \    // Assume that the cars are infinitely precise.\n    // Assume that the cars\
    \ are infinitely accurate.\n    // Assume that the cars are infinitely perfect.\n\
    \    // Assume that the cars are infinitely precise.\n    // Assume that the cars\
    \ are infinitely accurate.\n    // Assume that the cars are infinitely perfect.\n\
    \    // Assume that the cars are infinitely precise.\n    // Assume that the cars\
    \ are infinitely accurate.\n    // Assume\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphpv875ae_test.go:57:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This function is a stub.  You need to implement it.\n   \
    \ return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpowv7l4xk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpowv7l4xk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpowv7l4xk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpowv7l4xk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpowv7l4xk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The input is the number of cars in each direction.\n    //\
    \ The output is the number of collisions.\n    // The time complexity is O(n)\
    \ and the space complexity is O(1).\n    // The idea is to use two pointers to\
    \ scan the cars from both directions.\n    // The left pointer starts from the\
    \ leftmost car and the right pointer starts\n    // from the rightmost car.  The\
    \ left pointer moves right and the right pointer\n    // moves left.  If the left\
    \ pointer is less than the right pointer, there is a\n    // collision.  The left\
    \ pointer moves right and the right pointer moves left.\n    // The left pointer\
    \ moves right and the right pointer moves left.\n    // The left pointer moves\
    \ right and the right pointer moves left.\n    // The left pointer moves right\
    \ and the right pointer moves left.\n    // The left pointer moves right and the\
    \ right pointer moves left.\n    // The left pointer moves right and the right\
    \ pointer moves left.\n    // The left pointer moves right and the right pointer\
    \ moves left.\n    // The left pointer moves right and the right pointer moves\
    \ left.\n    // The left pointer moves right and the right pointer moves left.\n\
    \    // The left pointer moves right and the right pointer moves left.\n    //\
    \ The left pointer moves right and the right pointer moves left.\n    // The left\
    \ pointer moves right and the right pointer moves left.\n    // The left pointer\
    \ moves right and the right pointer moves left.\n    // The left pointer moves\
    \ right and the right pointer moves left.\n    // The left pointer moves right\
    \ and the right pointer moves left.\n    // The left pointer moves right and the\
    \ right pointer moves left.\n    // The left pointer moves right and the right\
    \ pointer moves left.\n    // The left pointer moves right and the right pointer\
    \ moves left.\n    // The left pointer moves right and the right pointer moves\
    \ left.\n    // The left pointer moves right and the right pointer moves left.\n\
    \    // The left pointer moves right and the right pointer moves left.\n    //\
    \ The left pointer moves right and the right pointer moves left.\n    // The left\
    \ pointer moves right and the right pointer moves left.\n    // The left pointer\
    \ moves right and the right pointer moves left.\n    // The left pointer moves\
    \ right and the right pointer moves left.\n    // The left pointer moves right\
    \ and the right pointer moves left\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf9mcdxsf_test.go:50:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    return n - 1\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphhej144c_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphhej144c_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to record the position of\
    \ the cars.\n    // The key is the position of the car, and the value is the number\
    \ of cars\n    // at that position.\n    // The hash table is initialized with\
    \ all the cars moving left to right.\n    // Then, we iterate through the hash\
    \ table, and for each position, we\n    // move the cars right to left.  If there\
    \ are cars moving left to right\n    // at the same position, then we have a collision.\n\
    \    // We keep track of the number of collisions.\n    // We repeat the process\
    \ until there are no cars moving left to right.\n    // The number of collisions\
    \ is the answer.\n    //\n    // The time complexity is O(n), and the space complexity\
    \ is O(n).\n    //\n    // The following code is not optimized for speed.  It's\
    \ optimized for\n    // clarity and simplicity.\n    //\n    // The following\
    \ code assumes that n is a positive integer.\n    //\n    // The following code\
    \ assumes that the cars are infinitely strong and\n    // sturdy, and that they\
    \ do not collide with each other.\n    //\n    // The following code assumes that\
    \ the cars are infinitely small.\n    //\n    // The following code assumes that\
    \ the cars are infinitely fast.\n    //\n    // The following code assumes that\
    \ the cars are infinitely precise.\n    //\n    // The following code assumes\
    \ that the cars are infinitely intelligent.\n    //\n    // The following code\
    \ assumes that the cars are infinitely patient.\n    //\n    // The following\
    \ code assumes that the cars are infinitely polite.\n    //\n    // The following\
    \ code assumes that the cars are infinitely kind.\n    //\n    // The following\
    \ code assumes that the cars are infinitely gentle.\n    //\n    // The following\
    \ code assumes that the cars are infinitely considerate.\n    //\n    // The following\
    \ code assumes that the cars are infinitely forgiving.\n    //\n    // The following\
    \ code assumes that the cars are infinitely honest.\n    //\n    // The following\
    \ code assumes that the cars are infinitely trustworthy.\n    //\n    // The following\
    \ code assumes that the cars are infinitely loyal.\n    //\n    // The following\
    \ code assumes that the cars are infinitely helpful.\n    //\n    // The following\
    \ code assumes that the cars are infinitely friendly.\n   \nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp7y522e3_test.go:68:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 0 {\n        return 0\n    }\n    // The idea is to\
    \ use a hash table to keep track of the cars that are moving\n    // left to right.\
    \  The key is the position of the car, and the value is the\n    // number of\
    \ cars at that position.  We start with an empty hash table.\n    // We then iterate\
    \ through the cars that are moving right to left.  For each\n    // car, we look\
    \ up the hash table to see if there are any cars that are moving\n    // left\
    \ to right that are at the same position.  If so, we add the number of\n    //\
    \ cars at that position to the total number of collisions.  We then update the\n\
    \    // hash table to reflect the fact that the car that's moving right to left\
    \ is\n    // now moving left to right.\n    // We then iterate through the cars\
    \ that are moving left to right.  For each\n    // car, we update the hash table\
    \ to reflect the fact that the car that's moving\n    // left to right is now\
    \ moving right to left.\n    // The time complexity is O(n), and the space complexity\
    \ is O(n).\n    collisions := 0\n    left_to_right := make(map[int]int)\n    for\
    \ i := 0; i < n; i++ {\n        collisions += left_to_right[i]\n        left_to_right[i]++\n\
    \    }\n    for i := n - 1; i >= 0; i-- {\n        left_to_right[i]--\n    }\n\
    \    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppvqptsq2_test.go:62: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppvqptsq2_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppvqptsq2_test.go:62: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppvqptsq2_test.go:62:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppvqptsq2_test.go:62: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to store the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    left_to_right := make(map[int]int)\n    // We use\
    \ a map to store the cars that are moving right to left.\n    // The key is the\
    \ position of the car, and the value is the number of cars\n    // at that position.\n\
    \    right_to_left := make(map[int]int)\n    // We use a variable to store the\
    \ number of collisions.\n    collisions := 0\n    // We use a variable to store\
    \ the current position of the car.\n    position := 0\n    // We use a variable\
    \ to store the current direction of the car.\n    // -1 means the car is moving\
    \ left to right.\n    // 1 means the car is moving right to left.\n    direction\
    \ := -1\n    // We use a variable to store the current speed of the car.\n   \
    \ speed := 1\n    // We use a variable to store the current number of cars.\n\
    \    num_cars := 0\n    // We use a variable to store the current number of cars\
    \ that are moving\n    // left to right.\n    num_left_to_right := 0\n    // We\
    \ use a variable to store the current number of cars that are moving\n    // right\
    \ to left.\n    num_right_to_left := 0\n    // We use a variable to store the\
    \ current number of cars that are moving\n    // left to right at the current\
    \ position.\n    num_left_to_right_at_position := 0\n    // We use a variable\
    \ to store the current number of cars that are moving\n    // right to left at\
    \ the current position.\n    num_right_to_left_at_position := 0\n    // We use\
    \ a variable to store the current number of cars that are moving\n    // left\
    \ to right at the next position.\n    num_left_to_right_at_next_position := 0\n\
    \    // We use a variable to store the current number of cars that are moving\n\
    \    // right to left at the next position.\n    num_right_to_left_at_next_position\
    \ := 0\n    // We use a variable to store the next position\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpixxz8usu_test.go:56:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can model this problem as a collision of n points on a\
    \ line.\n    // The points are moving left to right and right to left.\n    //\
    \ We can model a point as a pair of integers (x, y) where x is the position\n\
    \    // of the point on the line and y is the direction of the point.\n    //\
    \ y = 1 means the point is moving left to right, and y = -1 means the point\n\
    \    // is moving right to left.\n    // We can sort the points by x.  Then, we\
    \ can iterate through the points\n    // and count the number of points that have\
    \ the same x value.\n    // The number of points that have the same x value is\
    \ the number of collisions.\n    // The time complexity is O(n log n) and the\
    \ space complexity is O(n).\n    points := make([]Point, 2 * n)\n    for i :=\
    \ 0; i < n; i++ {\n        points[i] = Point{i, 1}\n        points[i + n] = Point{i,\
    \ -1}\n    }\n    sort.Sort(Points(points))\n    collisions := 0\n    for i :=\
    \ 1; i < len(points); i++ {\n        if points[i].x == points[i - 1].x {\n   \
    \         collisions += 1\n        }\n    }\n    return collisions\n}\n\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp104mfv99_test.go:27:22: undefined: Point

    /tmp/tmp104mfv99_test.go:29:21: undefined: Point

    /tmp/tmp104mfv99_test.go:30:25: undefined: Point

    /tmp/tmp104mfv99_test.go:32:5: undefined: sort

    /tmp/tmp104mfv99_test.go:32:15: undefined: Points

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073157
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree.\n    // The tree\
    \ will contain the positions of the cars that are moving left to right.\n    //\
    \ We will insert the cars into the tree in the order in which they appear.\n \
    \   // We will then search for the cars that are moving right to left in the tree.\n\
    \    // If we find a car that's moving right to left, we will remove it from the\
    \ tree.\n    // We will count the number of cars that we remove from the tree.\n\
    \    // The number of cars that we remove from the tree is the number of collisions.\n\
    \    // The reason is that if a car that's moving right to left is found in the\
    \ tree,\n    // it means that it collided with a car that's moving left to right.\n\
    \    // The number of cars that we remove from the tree is the number of collisions.\n\
    \    // The reason is that if a car that's moving right to left is found in the\
    \ tree,\n    // it means that it collided with a car that's moving left to right.\n\
    \    // The number of cars that we remove from the tree is the number of collisions.\n\
    \    // The reason is that if a car that's moving right to left is found in the\
    \ tree,\n    // it means that it collided with a car that's moving left to right.\n\
    \    // The number of cars that we remove from the tree is the number of collisions.\n\
    \    // The reason is that if a car that's moving right to left is found in the\
    \ tree,\n    // it means that it collided with a car that's moving left to right.\n\
    \    // The number of cars that we remove from the tree is the number of collisions.\n\
    \    // The reason is that if a car that's moving right to left is found in the\
    \ tree,\n    // it means that it collided with a car that's moving left to right.\n\
    \    // The number of cars that we remove from the tree is the number of collisions.\n\
    \    // The reason is that if a car that's moving right to left is found in the\
    \ tree,\n    // it means that it collided with a car that's moving left to right.\n\
    \    // The number of cars that we remove from the tree is the number of collisions.\n\
    \    // The reason is that if a car that's moving right to left is found in the\
    \ tree,\n    // it means that\nfunc TestCar_Race_Collision(t *testing.T) {\n \
    \ candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoxuo9zfa_test.go:44:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume n is a positive integer.\n    // Assume n is not too\
    \ large.\n    // Assume n is not too small.\n    // Assume n is not zero.\n  \
    \  // Assume n is not negative.\n    // Assume n is not a float.\n    // Assume\
    \ n is not a string.\n    // Assume n is not a boolean.\n    // Assume n is not\
    \ an array.\n    // Assume n is not a map.\n    // Assume n is not a \nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxwpvxi1d_test.go:28:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var left_to_right_cars []int\n    var right_to_left_cars []int\n\
    \    var collisions int\n\n    for i := 0; i < n; i++ {\n        left_to_right_cars\
    \ = append(left_to_right_cars, i)\n        right_to_left_cars = append(right_to_left_cars,\
    \ i)\n    }\n\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n\
    \            if left_to_right_cars[i] == right_to_left_cars[j] {\n           \
    \     collisions++\n            }\n        }\n    }\n\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_bes7mz9_test.go:54: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_bes7mz9_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_bes7mz9_test.go:54: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_bes7mz9_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_bes7mz9_test.go:54: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073157
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can simulate the race by imagining that the cars are moving\
    \ on a number line.\n    // The cars moving left to right are at positions 1,\
    \ 2, 3, ..., n.\n    // The cars moving right to left are at positions -1, -2,\
    \ -3, ..., -n.\n    // We can simulate the race by moving the cars one step at\
    \ a time.\n    // At each step, we check to see if any of the cars have collided.\n\
    \    // If so, we increment the collision count.\n    // We keep doing this until\
    \ all the cars have moved past each other.\n    // We can stop the simulation\
    \ when the leftmost car moving right to left\n    // has moved past the rightmost\
    \ car moving left to right.\n    // The number of collisions is the number of\
    \ times that the leftmost car\n    // moving right to left is to the right of\
    \ the rightmost car moving left to right.\n    // We can keep track of the leftmost\
    \ car moving right to left by keeping track of\n    // the minimum position of\
    \ the cars moving right to left.\n    // We can keep track of the rightmost car\
    \ moving left to right by keeping track of\n    // the maximum position of the\
    \ cars moving left to right.\n    // We can keep track of the number of collisions\
    \ by keeping track of the number of\n    // times that the minimum position of\
    \ the cars moving right to left is to the right\n    // of the maximum position\
    \ of the cars moving left to right.\n    // We can keep track of the minimum position\
    \ of the cars moving right to left by\n    // keeping track of the minimum position\
    \ of the cars moving right to left.\n    // We can keep track of the maximum position\
    \ of the cars moving left to right by\n    // keeping track of the maximum position\
    \ of the cars moving left to right.\n    // We can keep track of the minimum position\
    \ of the cars moving right to left by\n    // keeping track of the minimum position\
    \ of the cars moving right to left.\n    // We can keep track of the maximum position\
    \ of the cars moving left to right by\n    // keeping track of the maximum position\
    \ of the cars moving left to right.\n    // We can keep track of the minimum position\
    \ of the cars moving right to left by\n    // keeping track of the minimum position\
    \ of the cars moving right to left.\n    // We can keep track\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp94kappf8_test.go:46:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We then iterate through the\
    \ cars that are moving right to left.  For each car, we\n    // check if there\
    \ are any cars moving left to right at the same position.  If so, we\n    // add\
    \ the number of cars moving left to right at that position to the total number\
    \ of collisions.\n    // We then remove the car that's moving right to left from\
    \ the hash table.\n    // The time complexity is O(n), and the space complexity\
    \ is O(n).\n    collisions := 0\n    left_to_right := make(map[int]int)\n    for\
    \ i := 0; i < n; i++ {\n        left_to_right[i]++\n    }\n    for i := n - 1;\
    \ i >= 0; i-- {\n        collisions += left_to_right[i]\n        delete(left_to_right,\
    \ i)\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpwibfxrkm_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpwibfxrkm_test.go:53:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpwibfxrkm_test.go:53: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpwibfxrkm_test.go:53:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpwibfxrkm_test.go:53: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073157
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 1 to n.  The cars moving left\
    \ to right are\n    // numbered 1 to n, and the cars moving right to left are\
    \ numbered n+1 to 2n.\n    // The cars are initially very far from each other.\
    \  We can assume that\n    // the cars moving left to right are at position -infinity,\
    \ and the cars\n    // moving right to left are at position +infinity.\n    //\n\
    \    // We'll use a map to track the position of each car.  The map key is the\n\
    \    // car number, and the map value is the position of the car.\n    //\n  \
    \  // We'll also use a slice to track the cars that are moving left to right.\n\
    \    // The slice will contain the car numbers.\n    //\n    // We'll also use\
    \ a slice to track the cars that are moving right to left.\n    // The slice will\
    \ contain the car numbers.\n    //\n    // We'll also use a slice to track the\
    \ cars that have collided.\n    // The slice will contain the car numbers.\n \
    \   //\n    // We'll also use a variable to track the number of collisions.\n\
    \    //\n    // We'll also use a variable to track the number of cars that have\
    \ moved.\n    //\n    // We'll also use a variable to track the number of cars\
    \ that have moved\n    // left to right.\n    //\n    // We'll also use a variable\
    \ to track the number of cars that have moved\n    // right to left.\n    //\n\
    \    // We'll also use a variable to track the number of cars that have collided.\n\
    \    //\n    // We'll also use a variable to track the number of cars that have\
    \ collided\n    // left to right.\n    //\n    // We'll also use a variable to\
    \ track the number of cars that have collided\n    // right to left.\n    //\n\
    \    // We'll also use a variable to track the number of cars that have collided\n\
    \    // left to right and right to left.\n    //\n    // We'll also use a variable\
    \ to track the number of cars that have collided\n    // left to right and right\
    \ to left and left to right.\n    //\n    // We'll also use a variable to track\
    \ the number of cars that have collided\n    // left to right and right to left\
    \ and left\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3npw9gio_test.go:61:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to simulate the race.  We'll have a slice of\
    \ n cars, each of which\n    // is represented by a pair of integers (x, y). \
    \ x is the position of the car on the\n    // road, and y is the direction of\
    \ the car.  y is either 1 or -1.  If y is 1, the car\n    // is moving left to\
    \ right.  If y is -1, the car is moving right to left.\n    // We'll simulate\
    \ the race by moving each car one step at a time.  We'll keep track\n    // of\
    \ the number of collisions.  We'll return the number of collisions.\n    cars\
    \ := make([]int, 2*n)\n    for i := 0; i < n; i++ {\n        cars[2*i] = -i\n\
    \        cars[2*i+1] = i\n    }\n    collisions := 0\n    for i := 0; i < 2*n;\
    \ i++ {\n        for j := i+1; j < 2*n; j++ {\n            if cars[i] == cars[j]\
    \ {\n                collisions++\n            }\n        }\n        cars[i] +=\
    \ 1\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpufc0jf0q_test.go:57: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpufc0jf0q_test.go:57:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpufc0jf0q_test.go:57: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpufc0jf0q_test.go:57:\
    \ expected '%!s(int=64)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpufc0jf0q_test.go:57: expected '%!s(int=100)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073157
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ left to right\n    // that are in front of the cars that are moving right to\
    \ left.\n    // So, we need to find the number of cars that are moving left to\
    \ right that\n    // are in front of the cars that are moving right to left.\n\
    \    // We can do this by sorting the cars that are moving left to right and the\
    \ cars\n    // that are moving right to left.  Then, we can do a merge sort to\
    \ find the number\n    // of cars that are moving left to right that are in front\
    \ of the cars that are\n    // moving right to left.\n    // The time complexity\
    \ is O(n log n), where n is the number of cars.\n    // The space complexity is\
    \ O(n).\n    left_to_right := make([]int, n)\n    right_to_left := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    merge_sort(left_to_right)\n    merge_sort(right_to_left)\n\
    \    return merge_sort_count_collisions(left_to_right, right_to_left)\n}\n\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd6_typ_3_test.go:33:5: undefined: merge_sort

    /tmp/tmpd6_typ_3_test.go:34:5: undefined: merge_sort

    /tmp/tmpd6_typ_3_test.go:35:12: undefined: merge_sort_count_collisions

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073157
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is simply the number of cars that\
    \ are moving in the\n    // same direction.\n    return n\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpf3by4kz0_test.go:39: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpf3by4kz0_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpf3by4kz0_test.go:39: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpf3by4kz0_test.go:39:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpf3by4kz0_test.go:39: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This function is a stub.  It's not correct.  It's just a\
    \ placeholder.\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpn812y0at_test.go:38: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpn812y0at_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpn812y0at_test.go:38: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpn812y0at_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpn812y0at_test.go:38: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that n is a positive integer.\n    // Assume that\
    \ n is not too large.\n    // Assume that n is not too small.\n    // Assume that\
    \ n is not zero.\n    // Assume that n is not negative.\n    // Assume that n\
    \ is not a float.\n    // Assume that n is not a string.\n    // Assume that n\
    \ is not a character.\n    // Assume that n is not a boolean.\n    // Assume that\
    \ n is not a slice.\n    // Assume that n is not a map.\n    // Assume that n\
    \ is not a \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpajwzf57k_test.go:29:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n*(n-1)/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash map to keep track of the cars that\
    \ are moving\n    // left to right.  The key is the position of the car, and the\
    \ value is the\n    // number of cars at that position.  The hash map is initialized\
    \ with all\n    // the cars that are moving right to left.  Then, for each car\
    \ that is moving\n    // left to right, we check if there is a car that is moving\
    \ right to left at\n    // the same position.  If so, we increase the number of\
    \ collisions by the number\n    // of cars that are moving right to left at that\
    \ position.\n    //\n    // The time complexity is O(n), and the space complexity\
    \ is O(n).\n    m := make(map[int]int)\n    for i := 0; i < n; i++ {\n       \
    \ m[i] = n - i - 1\n    }\n    collisions := 0\n    for i := 0; i < n; i++ {\n\
    \        collisions += m[i]\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp9w4j2e5a_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp9w4j2e5a_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp9w4j2e5a_test.go:54: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp9w4j2e5a_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp9w4j2e5a_test.go:54: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can model the cars as a list of integers.  The integers\
    \ are the positions\n    // of the cars.  A positive integer means a car moving\
    \ left to right; a negative\n    // integer means a car moving right to left.\
    \  The absolute value of the integer\n    // is the position of the car.\n   \
    \ //\n    // We can sort the list of integers.  Then, we can iterate through the\
    \ list.\n    // If we find two consecutive integers with the same absolute value,\
    \ then we\n    // have a collision.\n    //\n    // The time complexity is O(n\
    \ log n) because we sort the list.  The space complexity\n    // is O(n) because\
    \ we store the list.\n    //\n    // We can improve the time complexity to O(n)\
    \ by using a hash table.  We can\n    // store the absolute value of the integers\
    \ as keys and the number of times\n    // we see the absolute value as values.\
    \  Then, we can iterate through the\n    // list and increment the values in the\
    \ hash table.  The number of collisions\n    // is the sum of the values in the\
    \ hash table.\n    //\n    // The time complexity is O(n) because we iterate through\
    \ the list.  The space\n    // complexity is O(n) because we store the hash table.\n\
    \    //\n    // We can improve the space complexity to O(1) by using a counter.\
    \  We can\n    // iterate through the list and increment the counter when we see\
    \ a positive\n    // integer.  Then, we can iterate through the list again and\
    \ increment the\n    // counter when we see a negative integer.  The number of\
    \ collisions is the\n    // counter.\n    //\n    // The time complexity is O(n)\
    \ because we iterate through the list twice.\n    // The space complexity is O(1)\
    \ because we store the counter.\n    //\n    // We can improve the time complexity\
    \ to O(n) by using a counter.  We can\n    // iterate through the list and increment\
    \ the counter when we see a positive\n    // integer.  Then, we can iterate through\
    \ the list again and increment the\n    // counter when we see a negative integer.\
    \  The number of collisions is the\n    // counter.\n    //\n    // The time complexity\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp87ov2ihh_test.go:54:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash map to record the number of cars\
    \ that are moving\n    // left to right at a given position.  The key is the position,\
    \ and the value\n    // is the number of cars.\n    // We start with all n cars\
    \ moving left to right at position 0.\n    // We then move all cars one step to\
    \ the right.  If there are any cars moving\n    // right to left at the same position,\
    \ we have a collision.  We then record\n    // the number of cars moving left\
    \ to right at the new position.\n    // We repeat this process until all cars\
    \ have moved to the right of the road.\n    // The total number of collisions\
    \ is the sum of the number of collisions at each\n    // position.\n    // We\
    \ use a hash map to record the number of cars moving left to right at each\n \
    \   // position.  The key is the position, and the value is the number of cars.\n\
    \    // We also use a hash map to record the number of cars moving right to left\
    \ at\n    // each position.  The key is the position, and the value is the number\
    \ of cars.\n    // We also use an integer to record the number of collisions.\n\
    \    var left_to_right_cars map[int]int\n    var right_to_left_cars map[int]int\n\
    \    var collisions int\n    // We initialize the hash maps.\n    left_to_right_cars\
    \ = make(map[int]int)\n    right_to_left_cars = make(map[int]int)\n    // We initialize\
    \ the number of collisions.\n    collisions = 0\n    // We initialize the number\
    \ of cars moving left to right at position 0.\n    left_to_right_cars[0] = n\n\
    \    // We initialize the number of cars moving right to left at position 0.\n\
    \    right_to_left_cars[0] = n\n    // We move the cars one step at a time.\n\
    \    for i := 0; i < n; i++ {\n        // We move all cars one step to the right.\n\
    \        for position, number_of_cars := range left_to_right_cars {\n        \
    \    // We delete the number of cars at the old position.\n            delete(left_to_right_cars,\
    \ position)\n            //\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpovg2xhrr_test.go:51:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car and the value\
    \ is the number of cars at that position.\n    // The hash table is initialized\
    \ with n cars at position -n.\n    // We then iterate through the hash table and\
    \ for each car, we move it one step to the right.\n    // If the car is at position\
    \ 0, we increment the number of collisions.\n    // If the car is at position\
    \ n, we remove it from the hash table.\n    // If the car is at position x, where\
    \ x is between 0 and n, we increment the number of cars\n    // at position x.\n\
    \    // The time complexity is O(n) and the space complexity is O(n).\n    collisions\
    \ := 0\n    cars := make(map[int]int)\n    for i := 0; i < n; i++ {\n        cars[-n]++\n\
    \    }\n    for i := -n; i <= n; i++ {\n        if cars[i] > 0 {\n           \
    \ if i == 0 {\n                collisions += cars[i]\n            } else if i\
    \ == n {\n                delete(cars, i)\n            } else {\n            \
    \    cars[i]++\n            }\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3yb8eja4_test.go:62: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3yb8eja4_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3yb8eja4_test.go:62: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3yb8eja4_test.go:62:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3yb8eja4_test.go:62: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ moving left to right.\n    // The key is the car's position, and the value is\
    \ the number of cars at that position.\n    // We start with an empty hash table.\
    \  As we iterate through the cars moving left to right,\n    // we insert the\
    \ car's position into the hash table.  If the position is already in the\n   \
    \ // hash table, we increment the value.\n    // As we iterate through the cars\
    \ moving right to left, we check if the car's position\n    // is in the hash\
    \ table.  If it is, we increment the number of collisions by the value\n    //\
    \ of the hash table.  We then decrement the value of the hash table.  If the value\n\
    \    // becomes zero, we remove the position from the hash table.\n    // The\
    \ time complexity is O(n), and the space complexity is O(n).\n    ht := make(map[int]int)\n\
    \    collisions := 0\n    for i := 0; i < n; i++ {\n        ht[i]++\n    }\n \
    \   for i := n - 1; i >= 0; i-- {\n        if _, ok := ht[i]; ok {\n         \
    \   collisions += ht[i]\n            ht[i]--\n            if ht[i] == 0 {\n  \
    \              delete(ht, i)\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpwapigd9g_test.go:61: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpwapigd9g_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpwapigd9g_test.go:61: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpwapigd9g_test.go:61:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpwapigd9g_test.go:61: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: null
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars at that position.  We start with\
    \ a hash table that has\n    // n keys, each key being a different position. \
    \ We then iterate through the\n    // hash table, and for each key, we add the\
    \ value of the key to the key,\n    // and then we delete the key.  We keep doing\
    \ this until the hash table is\n    // empty.  The number of collisions is the\
    \ number of times we try to add a\n    // key to the hash table that already exists.\n\
    \    ht := make(map[int]int)\n    for i := 0; i < n; i++ {\n        ht[i] = 1\n\
    \    }\n    collisions := 0\n    for len(ht) > 0 {\n        for k, v := range\
    \ ht {\n            if _, ok := ht[k + v]; ok {\n                collisions++\n\
    \            } else {\n                ht[k + v] = v\n            }\n        \
    \    delete(ht, k)\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073171
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We will use a binary tree to represent the cars.\n    //\
    \ The root of the tree will be the leftmost car.\n    // The left child of a node\
    \ will be the car to the left of the node.\n    // The right child of a node will\
    \ be the car to the right of the node.\n    // The value of a node will be the\
    \ position of the car.\n    // The position of the car is the distance from the\
    \ leftmost car.\n    // The position of the car is a positive integer.\n    //\
    \ The position of the car is unique.\n    // The position of the car is the same\
    \ for both sets of cars.\n    // The position of the car is the same for both\
    \ sets of cars.\n    // The position of the car is the same for both sets of cars.\n\
    \    // The position of the car is the same for both sets of cars.\n    // The\
    \ position of the car is the same for both sets of cars.\n    // The position\
    \ of the car is the same for both sets of cars.\n    // The position of the car\
    \ is the same for both sets of cars.\n    // The position of the car is the same\
    \ for both sets of cars.\n    // The position of the car is the same for both\
    \ sets of cars.\n    // The position of the car is the same for both sets of cars.\n\
    \    // The position of the car is the same for both sets of cars.\n    // The\
    \ position of the car is the same for both sets of cars.\n    // The position\
    \ of the car is the same for both sets of cars.\n    // The position of the car\
    \ is the same for both sets of cars.\n    // The position of the car is the same\
    \ for both sets of cars.\n    // The position of the car is the same for both\
    \ sets of cars.\n    // The position of the car is the same for both sets of cars.\n\
    \    // The position of the car is the same for both sets of cars.\n    // The\
    \ position of the car is the same for both sets of cars.\n    // The position\
    \ of the car is the same for both sets of cars.\n    // The position of the car\
    \ is the same for both sets of cars.\n    // The position of the car is the same\
    \ for both sets of cars.\n    // The position of the car is the same for\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpau3d7hqv_test.go:48:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ left to right\n    // that are in the same position as a car that's moving right\
    \ to left.\n    //\n    // We can use a hash table to keep track of the cars that\
    \ are moving left to right.\n    // We can use a hash table to keep track of the\
    \ cars that are moving right to left.\n    //\n    // We can use a hash table\
    \ to keep track of the cars that are moving left to right.\n    // We can use\
    \ a hash table to keep track of the cars that are moving right to left.\n    //\n\
    \    // We can use a hash table to keep track of the cars that are moving left\
    \ to right.\n    // We can use a hash table to keep track of the cars that are\
    \ moving right to left.\n    //\n    // We can use a hash table to keep track\
    \ of the cars that are moving left to right.\n    // We can use a hash table to\
    \ keep track of the cars that are moving right to left.\n    //\n    // We can\
    \ use a hash table to keep track of the cars that are moving left to right.\n\
    \    // We can use a hash table to keep track of the cars that are moving right\
    \ to left.\n    //\n    // We can use a hash table to keep track of the cars that\
    \ are moving left to right.\n    // We can use a hash table to keep track of the\
    \ cars that are moving right to left.\n    //\n    // We can use a hash table\
    \ to keep track of the cars that are moving left to right.\n    // We can use\
    \ a hash table to keep track of the cars that are moving right to left.\n    //\n\
    \    // We can use a hash table to keep track of the cars that are moving left\
    \ to right.\n    // We can use a hash table to keep track of the cars that are\
    \ moving right to left.\n    //\n    // We can use a hash table to keep track\
    \ of the cars that are moving left to right.\n    // We can use a hash table to\
    \ keep track of the cars that are moving right to left.\n    //\n    // We can\
    \ use a hash table to keep track of the cars that are moving left to right.\n\
    \    // We can use a hash table to keep track of the cars that are moving right\
    \ to left.\n    //\n   \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5n9k1_jo_test.go:51:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return (n*(n-1))/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbac6w7bx_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbac6w7bx_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbac6w7bx_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbac6w7bx_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbac6w7bx_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n*(n-1)/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // the idea is to use a map to store the cars that are moving\
    \ left to right.\n    // the key is the position of the car, and the value is\
    \ the number of cars\n    // at that position.\n    // we also need to keep track\
    \ of the current position of the cars that are\n    // moving right to left.\n\
    \    // we start with the cars that are moving left to right.\n    // we iterate\
    \ through the map and check if there are any cars that are\n    // moving right\
    \ to left that are at the same position as the cars that are\n    // moving left\
    \ to right.\n    // if there are, we increment the number of collisions.\n   \
    \ // we then move the cars that are moving left to right to the next position.\n\
    \    // we then do the same thing for the cars that are moving right to left.\n\
    \    // we keep doing this until all the cars have passed each other.\n    //\
    \ the time complexity is O(n) and the space complexity is O(n).\n    left_to_right\
    \ := make(map[int]int)\n    for i := 0; i < n; i++ {\n        left_to_right[i]\
    \ = 1\n    }\n    right_to_left := n - 1\n    collisions := 0\n    for len(left_to_right)\
    \ > 0 && right_to_left >= 0 {\n        for k, v := range left_to_right {\n   \
    \         if k == right_to_left {\n                collisions += v\n         \
    \   }\n        }\n        for k, v := range left_to_right {\n            if k\
    \ == right_to_left {\n                delete(left_to_right, k)\n            }\
    \ else {\n                left_to_right[k + 1] += v\n                delete(left_to_right,\
    \ k)\n            }\n        }\n        right_to_left--\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmps7bweeks_test.go:73: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmps7bweeks_test.go:73:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmps7bweeks_test.go:73: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmps7bweeks_test.go:73:\
    \ expected '%!s(int=64)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmps7bweeks_test.go:73: expected '%!s(int=100)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We iterate through the cars\
    \ that are moving right to left, and for each car, we\n    // check if there are\
    \ cars at the same position in the hash table.  If so, we increment\n    // the\
    \ number of collisions.  We then remove the car from the hash table.\n    // The\
    \ time complexity is O(n), and the space complexity is O(n).\n    left_to_right\
    \ := make(map[int]int)\n    for i := 0; i < n; i++ {\n        left_to_right[i]\
    \ = 1\n    }\n    collisions := 0\n    for i := n - 1; i >= 0; i-- {\n       \
    \ if left_to_right[i] > 0 {\n            collisions += left_to_right[i]\n    \
    \        delete(left_to_right, i)\n        }\n    }\n    return collisions\n}\n\
    \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmput3te6k9_test.go:54: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmput3te6k9_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmput3te6k9_test.go:54: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmput3te6k9_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmput3te6k9_test.go:54: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that the cars are numbered from 0 to n-1.\n    //\
    \ Assume that the cars moving left to right are numbered 0 to n-1, and the cars\n\
    \    // moving right to left are numbered n to 2n-1.\n    // Assume that the cars\
    \ moving left to right start at position 0, and the cars\n    // moving right\
    \ to left start at position 2n-1.\n    // Assume that the cars moving left to\
    \ right move at speed 1, and the cars\n    // moving right to left move at speed\
    \ -1.\n    // Assume that the cars moving left to right are at positions 0, 1,\
    \ 2, ..., n-1, and\n    // the cars moving right to left are at positions 2n-1,\
    \ 2n-2, ..., n.\n    // Assume that the cars moving left to right are at positions\
    \ 0, 1, 2, ..., n-1, and\n    // the cars moving right to left are at positions\
    \ 2n-1, 2n-2, ..., n.\n    // Assume that the cars moving left to right are at\
    \ positions 0, 1, 2, ..., n-1, and\n    // the cars moving right to left are at\
    \ positions 2n-1, 2n-2, ..., n.\n    // Assume that the cars moving left to right\
    \ are at positions 0, 1, 2, ..., n-1, and\n    // the cars moving right to left\
    \ are at positions 2n-1, 2n-2, ..., n.\n    // Assume that the cars moving left\
    \ to right are at positions 0, 1, 2, ..., n-1, and\n    // the cars moving right\
    \ to left are at positions 2n-1, 2n-2, ..., n.\n    // Assume that the cars moving\
    \ left to right are at positions 0, 1, 2, ..., n-1, and\n    // the cars moving\
    \ right to left are at positions 2n-1, 2n-2, ..., n.\n    // Assume that the cars\
    \ moving left to right are at positions 0, 1, 2, ..., n-1, and\n    // the cars\
    \ moving right to left are at positions 2n-1, 2n-2, ..., n.\n    // Assume that\
    \ the cars moving left\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1zbx63hf_test.go:39:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    return n - 1\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphhej144c_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphhej144c_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This function is a stub.  You need to implement it.\n   \
    \ return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpowv7l4xk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpowv7l4xk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpowv7l4xk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpowv7l4xk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpowv7l4xk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a map to keep track of the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We start with a map that has\
    \ n entries, each with a key of 0 and a value of 1.\n    // We then iterate through\
    \ the map, and for each entry, we update the map by adding\n    // a new entry\
    \ with a key of the current key + 1, and a value of the current value.\n    //\
    \ We then delete the current entry.\n    // We then iterate through the map again,\
    \ and for each entry, we update the map by adding\n    // a new entry with a key\
    \ of the current key - 1, and a value of the current value.\n    // We then delete\
    \ the current entry.\n    // We then iterate through the map again, and for each\
    \ entry, we update the map by adding\n    // a new entry with a key of the current\
    \ key + 1, and a value of the current value.\n    // We then delete the current\
    \ entry.\n    // We then iterate through the map again, and for each entry, we\
    \ update the map by adding\n    // a new entry with a key of the current key -\
    \ 1, and a value of the current value.\n    // We then delete the current entry.\n\
    \    // We then iterate through the map again, and for each entry, we update the\
    \ map by adding\n    // a new entry with a key of the current key + 1, and a value\
    \ of the current value.\n    // We then delete the current entry.\n    // We then\
    \ iterate through the map again, and for each entry, we update the map by adding\n\
    \    // a new entry with a key of the current key - 1, and a value of the current\
    \ value.\n    // We then delete the current entry.\n    // We then iterate through\
    \ the map again, and for each entry, we update the map by adding\n    // a new\
    \ entry with a key of the current key + 1, and a value of the current value.\n\
    \    // We then delete the current entry.\n    // We then iterate through the\
    \ map again, and for each entry, we update the map by adding\n    // a new entry\
    \ with a key of the current key - 1, and a value\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa8rwwsmv_test.go:43:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the car's position on the\
    \ road.  The value is\n    // the number of cars that are at that position.  We\
    \ start with an empty hash table.\n    // We then iterate through the cars that\
    \ are moving right to left.  For each car,\n    // we check if there are any cars\
    \ that are moving left to right at the same position.\n    // If so, we increment\
    \ the number of collisions by the number of cars that are\n    // moving left\
    \ to right at that position.  We then remove the cars that are moving\n    //\
    \ left to right at that position from the hash table.\n    // We then iterate\
    \ through the cars that are moving left to right.  For each car,\n    // we add\
    \ the car to the hash table.\n    // We then repeat the above two steps.\n   \
    \ // The time complexity is O(n) and the space complexity is O(n).\n    collisions\
    \ := 0\n    left_to_right := make(map[int]int)\n    for i := 0; i < n; i++ {\n\
    \        for j := 0; j < n; j++ {\n            if _, ok := left_to_right[j]; ok\
    \ {\n                collisions += left_to_right[j]\n                delete(left_to_right,\
    \ j)\n            }\n        }\n        left_to_right[i]++\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpr25v9gnj_test.go:60: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpr25v9gnj_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpr25v9gnj_test.go:60: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpr25v9gnj_test.go:60:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpr25v9gnj_test.go:60: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ in the same direction.\n    // There are n cars moving left to right, and n\
    \ cars moving right to left.\n    // So the number of collisions is n.\n    return\
    \ n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpyne7bds0_test.go:40: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpyne7bds0_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpyne7bds0_test.go:40: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpyne7bds0_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpyne7bds0_test.go:40: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to store the cars\
    \ that are moving\n    // left to right.  The cars that are moving right to left\
    \ will be stored in a\n    // slice.  We will iterate through the slice, and for\
    \ each car, we will\n    // search the binary search tree to see if there is a\
    \ car that's moving\n    // left to right that's in the same position as the car\
    \ that's moving\n    // right to left.  If there is, then we have a collision.\n\
    \    //\n    // The binary search tree will be a red-black tree.  The key will\
    \ be the\n    // position of the car.  The value will be the number of cars that\
    \ are\n    // in that position.\n    //\n    // We will use a slice to store the\
    \ cars that are moving right to left.\n    // The slice will be sorted in ascending\
    \ order.\n    //\n    // The time complexity will be O(n log n).  The space complexity\
    \ will be\n    // O(n).\n    //\n    // We will use the following \nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp74av5sn_test.go:35:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO:  implement this function.\n    // Hint:  you can use\
    \ a map to keep track of the cars that are moving left to right.\n    // Another\
    \ hint:  you can use a map to keep track of the cars that are moving right to\
    \ left.\n    // Another hint:  you can use a map to keep track of the cars that\
    \ are moving left to right.\n    // Another hint:  you can use a map to keep track\
    \ of the cars that are moving right to left.\n    // Another hint:  you can use\
    \ a map to keep track of the cars that are moving left to right.\n    // Another\
    \ hint:  you can use a map to keep track of the cars that are moving right to\
    \ left.\n    // Another hint:  you can use a map to keep track of the cars that\
    \ are moving left to right.\n    // Another hint:  you can use a map to keep track\
    \ of the cars that are moving right to left.\n    // Another hint:  you can use\
    \ a map to keep track of the cars that are moving left to right.\n    // Another\
    \ hint:  you can use a map to keep track of the cars that are moving right to\
    \ left.\n    // Another hint:  you can use a map to keep track of the cars that\
    \ are moving left to right.\n    // Another hint:  you can use a map to keep track\
    \ of the cars that are moving right to left.\n    // Another hint:  you can use\
    \ a map to keep track of the cars that are moving left to right.\n    // Another\
    \ hint:  you can use a map to keep track of the cars that are moving right to\
    \ left.\n    // Another hint:  you can use a map to keep track of the cars that\
    \ are moving left to right.\n    // Another hint:  you can use a map to keep track\
    \ of the cars that are moving right to left.\n    // Another hint:  you can use\
    \ a map to keep track of the cars that are moving left to right.\n    // Another\
    \ hint:  you can use a map to keep track of the cars that are moving right to\
    \ left.\n    // Another hint:  you can use a map to keep track of the cars that\
    \ are moving left to right.\n    // Another hint:  you can use a map to keep track\
    \ of the cars that are moving right to left.\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmbp37etj_test.go:39:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a map to keep track of the cars that are\
    \ moving left to right.\n    // The key is the position of the car.  The value\
    \ is the number of cars at that position.\n    // We start with an empty map.\n\
    \    // We then iterate through the cars that are moving right to left.  For each\
    \ car,\n    // we check if there are any cars that are moving left to right at\
    \ the same position.\n    // If so, we increment the collision count.\n    //\
    \ We then add the car to the map.\n    // At the end, we return the collision\
    \ count.\n    //\n    // The time complexity is O(n), where n is the number of\
    \ cars.\n    // The space complexity is O(n).\n    m := make(map[int]int)\n  \
    \  collision_count := 0\n    for i := 0; i < n; i++ {\n        if _, ok := m[i];\
    \ ok {\n            collision_count++\n        }\n        m[i]++\n    }\n    return\
    \ collision_count\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppbn6ivil_test.go:56: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppbn6ivil_test.go:56:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppbn6ivil_test.go:56: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppbn6ivil_test.go:56:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppbn6ivil_test.go:56: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here.\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the car's position, and the\
    \ value is the number\n    // of cars at that position.  When a car moves left\
    \ to right, we increment the\n    // value of the key.  When a car moves right\
    \ to left, we decrement the value of\n    // the key.  If the value of the key\
    \ becomes zero, we remove the key from the\n    // hash table.  The number of\
    \ collisions is the number of keys in the hash table.\n    //\n    // The hash\
    \ table is implemented as an array of size n.  The key is the position\n    //\
    \ of the car, and the value is the number of cars at that position.  The array\n\
    \    // is initialized to all zeros.  When a car moves left to right, we increment\
    \ the\n    // value of the array element.  When a car moves right to left, we\
    \ decrement the\n    // value of the array element.  If the value of the array\
    \ element becomes zero,\n    // we set the array element to -1.  The number of\
    \ collisions is the number of\n    // array elements that are not -1.\n    //\n\
    \    // The time complexity is O(n).  The space complexity is O(n).\n    //\n\
    \    // The following code assumes that n is positive.\n    if n <= 0 {\n    \
    \    return 0\n    }\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n\
    \        a[i] = 0\n    }\n    for i := 0; i < n; i++ {\n        a[i]++\n     \
    \   if a[i] == 0 {\n            a[i] = -1\n        }\n    }\n    for i := n -\
    \ 1; i >= 0; i-- {\n        a[i]--\n        if a[i] == 0 {\n            a[i] =\
    \ -1\n        }\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n       \
    \ if a[i] != -1 {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp1cdpbxk5_test.go:80: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp1cdpbxk5_test.go:80:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp1cdpbxk5_test.go:80: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp1cdpbxk5_test.go:80:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp1cdpbxk5_test.go:80: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // The hash table is initialized\
    \ with all values being zero.\n    // Then, we iterate through the cars that are\
    \ moving right to left.  For each car,\n    // we check the hash table to see\
    \ if there are any cars at the position of the car.\n    // If there are, we add\
    \ the number of cars at that position to the total number of collisions.\n   \
    \ // Then, we add the car to the hash table.\n    // The total number of collisions\
    \ is the number of collisions between the cars moving\n    // left to right and\
    \ the cars moving right to left.\n    // The time complexity is O(n), and the\
    \ space complexity is O(n).\n    hash_table := make(map[int]int)\n    for i :=\
    \ 0; i < n; i++ {\n        hash_table[i] = 0\n    }\n    collisions := 0\n   \
    \ for i := n - 1; i >= 0; i-- {\n        collisions += hash_table[i]\n       \
    \ hash_table[i]++\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmplyyvjqfs_test.go:56: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmplyyvjqfs_test.go:56:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmplyyvjqfs_test.go:56: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmplyyvjqfs_test.go:56:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmplyyvjqfs_test.go:56: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that n is a positive integer.\n    if n <= 0 {\n \
    \       return 0\n    }\n    // Assume that the cars are numbered from 1 to n.\n\
    \    // The cars are moving in the same speed.\n    // The cars are moving in\
    \ the same speed.\n    // The cars are moving in the same speed.\n    // The cars\
    \ are moving in the same speed.\n    // The cars are moving in the same speed.\n\
    \    // The cars are moving in the same speed.\n    // The cars are moving in\
    \ the same speed.\n    // The cars are moving in the same speed.\n    // The cars\
    \ are moving in the same speed.\n    // The cars are moving in the same speed.\n\
    \    // The cars are moving in the same speed.\n    // The cars are moving in\
    \ the same speed.\n    // The cars are moving in the same speed.\n    // The cars\
    \ are moving in the same speed.\n    // The cars are moving in the same speed.\n\
    \    // The cars are moving in the same speed.\n    // The cars are moving in\
    \ the same speed.\n    // The cars are moving in the same speed.\n    // The cars\
    \ are moving in the same speed.\n    // The cars are moving in the same speed.\n\
    \    // The cars are moving in the same speed.\n    // The cars are moving in\
    \ the same speed.\n    // The cars are moving in the same speed.\n    // The cars\
    \ are moving in the same speed.\n    // The cars are moving in the same speed.\n\
    \    // The cars are moving in the same speed.\n    // The cars are moving in\
    \ the same speed.\n    // The cars are moving in the same speed.\n    // The cars\
    \ are moving in the same speed.\n    // The cars are moving in the same speed.\n\
    \    // The cars are moving in the same speed.\n    // The cars are moving in\
    \ the same speed.\n    // The cars are moving in the same speed.\n    // The cars\
    \ are moving in the same speed.\n    // The cars are moving in the same speed.\n\
    \    // The cars are moving in the same speed.\n    // The cars are moving in\
    \ the same speed.\n    // The cars are moving in the same speed.\n    // The cars\
    \ are moving in the same speed.\n    //\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprrstyoo2_test.go:62:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // We will use\
    \ a map to keep track of the cars.\n    // The key of the map is the car number.\n\
    \    // The value of the map is the position of the car.\n    // Initially, all\
    \ cars are at position 0.\n    cars := make(map[int]int)\n    for i := 0; i <\
    \ n; i++ {\n        cars[i] = 0\n    }\n    // We will keep track of the number\
    \ of collisions.\n    collisions := 0\n    // We will keep track of the number\
    \ of cars that have moved.\n    cars_moved := 0\n    // We will keep track of\
    \ the number of cars that have moved left to right.\n    cars_moved_ltr := 0\n\
    \    // We will keep track of the number of cars that have moved right to left.\n\
    \    cars_moved_rtl := 0\n    // We will keep track of the number of cars that\
    \ have collided.\n    cars_collided := 0\n    // We will keep track of the number\
    \ of cars that have collided left to right.\n    cars_collided_ltr := 0\n    //\
    \ We will keep track of the number of cars that have collided right to left.\n\
    \    cars_collided_rtl := 0\n    // We will keep track of the number of cars that\
    \ have moved and collided.\n    cars_moved_and_collided := 0\n    // We will keep\
    \ track of the number of cars that have moved and collided left to right.\n  \
    \  cars_moved_and_collided_ltr := 0\n    // We will keep track of the number of\
    \ cars that have moved and collided right to left.\n    cars_moved_and_collided_rtl\
    \ := 0\n    // We will keep track of the number of cars that have moved and collided\
    \ and collided left to right.\n    cars_moved_and_collided_and_collided_ltr :=\
    \ 0\n    // We will keep track of the number of cars that have moved and collided\
    \ and collided right to left.\n    cars_moved_and_collided_and_collided_rtl :=\
    \ 0\n    // We will keep track of the number of cars that have moved and collided\
    \ and collided left to right and collided right to left\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm9m__th1_test.go:51:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is equal to the number of cars that\
    \ are moving\n    // right to left.\n    return n\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpv3un3vx2_test.go:39: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpv3un3vx2_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpv3un3vx2_test.go:39: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpv3un3vx2_test.go:39:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpv3un3vx2_test.go:39: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // The cars that\
    \ are moving left to right are called \"left\" cars.\n    // The cars that are\
    \ moving right to left are called \"right\" cars.\n    // The cars are sorted\
    \ in the order of their position on the road.\n    // The left cars are sorted\
    \ from left to right.\n    // The right cars are sorted from right to left.\n\
    \    // The left cars are in the range [0, n/2).\n    // The right cars are in\
    \ the range [n/2, n).\n    // The left cars are in the range [0, n/2).\n    //\
    \ The right cars are in the range [n/2, n).\n    // The left cars are in the range\
    \ [0, n/2).\n    // The right cars are in the range [n/2, n).\n    // The left\
    \ cars are in the range [0, n/2).\n    // The right cars are in the range [n/2,\
    \ n).\n    // The left cars are in the range [0, n/2).\n    // The right cars\
    \ are in the range [n/2, n).\n    // The left cars are in the range [0, n/2).\n\
    \    // The right cars are in the range [n/2, n).\n    // The left cars are in\
    \ the range [0, n/2).\n    // The right cars are in the range [n/2, n).\n    //\
    \ The left cars are in the range [0, n/2).\n    // The right cars are in the range\
    \ [n/2, n).\n    // The left cars are in the range [0, n/2).\n    // The right\
    \ cars are in the range [n/2, n).\n    // The left cars are in the range [0, n/2).\n\
    \    // The right cars are in the range [n/2, n).\n    // The left cars are in\
    \ the range [0, n/2).\n    // The right cars are in the range [n/2, n).\n    //\
    \ The left cars are in the range [0, n/2).\n    // The right cars are in the range\
    \ [n/2, n).\n    // The left cars are in the range [\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvh8u1j9_test.go:48:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    return n - 1\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphhej144c_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphhej144c_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // speed of the car.  When a car that's moving right\
    \ to left hits a car that's\n    // moving left to right, we remove the car that's\
    \ moving left to right from the\n    // hash table.  The number of collisions\
    \ is the number of cars that are removed\n    // from the hash table.\n    //\n\
    \    // The hash table is implemented as a slice of size n.  Each element of the\
    \ slice\n    // is a linked list.  The key of the hash table is the position of\
    \ the car, and\n    // the value is the speed of the car.  The key is used to\
    \ compute the index of the\n    // slice.  The value is used to compute the position\
    \ of the linked list.\n    //\n    // The linked list is implemented as a slice\
    \ of size n.  Each element of the slice\n    // is a linked list node.  The linked\
    \ list node contains the speed of the car.\n    // The position of the linked\
    \ list node is computed from the speed of the car.\n    //\n    // The position\
    \ of the linked list node is computed as follows:\n    //\n    //     position\
    \ = (speed - 1) % n\n    //\n    // The position of the linked list node is computed\
    \ as follows:\n    //\n    //     index = (position - speed) % n\n    //\n   \
    \ // The position of the linked list node is computed as follows:\n    //\n  \
    \  //     index = (position - speed) % n\n    //\n    // The position of the linked\
    \ list node is computed as follows:\n    //\n    //     index = (position - speed)\
    \ % n\n    //\n    // The position of the linked list node is computed as follows:\n\
    \    //\n    //     index = (position - speed) % n\n    //\n    // The position\
    \ of the linked list node is computed as follows:\n    //\n    //     index =\
    \ (position - speed) % n\n    //\n    // The position of the linked list node\
    \ is computed as follows:\n    //\n    //     index = (position - speed) % n\n\
    \    //\n    // The position of\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphvk6r4mn_test.go:62:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the positions of\
    \ the cars that are\n    // moving left to right.  Then, we iterate through the\
    \ cars that are moving\n    // right to left, and check if they collide with any\
    \ of the cars that are\n    // moving left to right.\n    // The hash table is\
    \ implemented as a slice of integers.  The slice is of size\n    // n, and each\
    \ element of the slice is either 0 or 1.  If the element is 1,\n    // then it\
    \ means that there is a car at that position.\n    // The hash table is initialized\
    \ to all zeros.\n    hash_table := make([]int, n)\n    // The number of collisions\
    \ is initialized to zero.\n    num_collisions := 0\n    // We iterate through\
    \ the cars that are moving left to right.\n    for i := 0; i < n; i++ {\n    \
    \    // We set the hash table element to 1, which means that there is a car\n\
    \        // at that position.\n        hash_table[i] = 1\n        // We iterate\
    \ through the cars that are moving right to left.\n        for j := n - 1; j >=\
    \ 0; j-- {\n            // If the hash table element is 1, then it means that\
    \ there is a car\n            // at that position.  Therefore, we have a collision.\n\
    \            if hash_table[j] == 1 {\n                num_collisions++\n     \
    \       }\n        }\n    }\n    // We return the number of collisions.\n    return\
    \ num_collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp7efrzjxe_test.go:63: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp7efrzjxe_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp7efrzjxe_test.go:63: expected '%!s(int=16)', got '%!s(int=10)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp7efrzjxe_test.go:63:\
    \ expected '%!s(int=64)', got '%!s(int=36)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp7efrzjxe_test.go:63: expected '%!s(int=100)', got '%!s(int=55)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars that are\n    // at that position.\n    // We then iterate\
    \ through the cars that are moving right to left, and check if there\n    // are\
    \ cars that are moving left to right at the same position.\n    // If there are,\
    \ we add the number of cars that are moving left to right to the\n    // total\
    \ number of collisions.\n    // We then update the hash table by decrementing\
    \ the number of cars that are moving\n    // left to right at that position.\n\
    \    // We then return the total number of collisions.\n    collisions := 0\n\
    \    left_to_right := make(map[int]int)\n    for i := 0; i < n; i++ {\n      \
    \  left_to_right[i] = 1\n    }\n    for i := 0; i < n; i++ {\n        collisions\
    \ += left_to_right[i]\n        left_to_right[i]--\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpti04vm5x_test.go:56: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpti04vm5x_test.go:56:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpti04vm5x_test.go:56: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpti04vm5x_test.go:56:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpti04vm5x_test.go:56: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // We then iterate through the cars that are moving\
    \ right to left.  For each car\n    // moving right to left, we check if there\
    \ is a car moving left to right that\n    // has the same position.  If so, we\
    \ increment the collision count.\n    // Note that the hash table stores the position\
    \ of the car as the key, and the\n    // value is the number of cars that are\
    \ at that position.\n    // The hash table is implemented as a map.\n    // The\
    \ key is the position of the car, and the value is the number of cars\n    //\
    \ at that position.\n    left_to_right_cars := make(map[int]int)\n    collision_count\
    \ := 0\n    for i := 0; i < n; i++ {\n        // Add a car to the hash table.\n\
    \        left_to_right_cars[i]++\n    }\n    for i := 0; i < n; i++ {\n      \
    \  // Check if there is a car moving left to right that has the same position.\n\
    \        // If so, increment the collision count.\n        if _, ok := left_to_right_cars[i];\
    \ ok {\n            collision_count++\n        }\n    }\n    return collision_count\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp5cqe78d__test.go:59: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp5cqe78d__test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp5cqe78d__test.go:59: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp5cqe78d__test.go:59:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp5cqe78d__test.go:59: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that the cars are numbered from 1 to n.\n    // The\
    \ cars that are moving left to right are numbered 1 to n.\n    // The cars that\
    \ are moving right to left are numbered n+1 to 2n.\n    // The cars are initially\
    \ very far from each other.\n    // The cars are moving at the same speed.\n \
    \   // The cars are infinitely sturdy and strong.\n    // The cars continue moving\
    \ in their trajectory as if they did not collide.\n    // This function outputs\
    \ the number of such collisions.\n    //\n    // The cars are moving in the same\
    \ speed.\n    // The cars are infinitely sturdy and strong.\n    // The cars continue\
    \ moving in their trajectory as if they did not collide.\n    //\n    // The cars\
    \ are moving in the same speed.\n    // The cars are infinitely sturdy and strong.\n\
    \    // The cars continue moving in their trajectory as if they did not collide.\n\
    \    //\n    // The cars are moving in the same speed.\n    // The cars are infinitely\
    \ sturdy and strong.\n    // The cars continue moving in their trajectory as if\
    \ they did not collide.\n    //\n    // The cars are moving in the same speed.\n\
    \    // The cars are infinitely sturdy and strong.\n    // The cars continue moving\
    \ in their trajectory as if they did not collide.\n    //\n    // The cars are\
    \ moving in the same speed.\n    // The cars are infinitely sturdy and strong.\n\
    \    // The cars continue moving in their trajectory as if they did not collide.\n\
    \    //\n    // The cars are moving in the same speed.\n    // The cars are infinitely\
    \ sturdy and strong.\n    // The cars continue moving in their trajectory as if\
    \ they did not collide.\n    //\n    // The cars are moving in the same speed.\n\
    \    // The cars are infinitely sturdy and strong.\n    // The cars continue moving\
    \ in their trajectory as if they did not collide.\n    //\n    // The cars are\
    \ moving in the same speed.\n    // The cars are infinitely sturdy and strong.\n\
    \    // The cars continue moving in their trajectory as if they did not collide.\n\
    \    //\n    // The cars are moving in the same speed.\n    // The cars are infinitely\
    \ sturdy and strong.\n    // The cars continue moving in their trajectory as if\
    \ they did not collide.\n    //\n    // The cars\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_a6ckzpa_test.go:63:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to store the cars\
    \ that are moving\n    // left to right.  The key of the tree is the position\
    \ of the car.  The value\n    // of the tree is the number of cars at that position.\
    \  When a car that's moving\n    // right to left hits a car that's moving left\
    \ to right, we increment the value\n    // of the tree at the position of the\
    \ car that's moving left to right.\n    // The number of collisions is the sum\
    \ of all values in the tree.\n    tree := make(map[int]int)\n    for i := 0; i\
    \ < n; i++ {\n        tree[i] = 0\n    }\n    for i := 0; i < n; i++ {\n     \
    \   // The car that's moving right to left is at position i.\n        // The car\
    \ that's moving left to right is at position n - i - 1.\n        // The car that's\
    \ moving right to left hits the car that's moving left to right\n        // if\
    \ and only if the car that's moving left to right is at position i or less.\n\
    \        // The car that's moving left to right is at position i or less if and\
    \ only if\n        // the car that's moving right to left is at position n - i\
    \ - 1 or more.\n        // The car that's moving right to left is at position\
    \ n - i - 1 or more if and only if\n        // the car that's moving left to right\
    \ is at position i or less.\n        // The car that's moving left to right is\
    \ at position i or less if and only if\n        // the car that's moving right\
    \ to left is at position n - i - 1 or more.\n        // The car that's moving\
    \ right to left is at position n - i - 1 or more if and only if\n        // the\
    \ car that's moving left to right is at position i or less.\n        // The car\
    \ that's moving left to right is at position i or less if and only if\n      \
    \  // the car that's moving right to left is at position n - i - 1 or more.\n\
    \        // The car that's moving right to left is at position n - i - 1 or more\
    \ if and only if\n        // the car that's moving left to right is at position\
    \ i or less.\n        // The car\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3po7ok5s_test.go:45:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is the number of collisions.\n    var collisions int\
    \ = 0\n    // This is the number of cars that have not yet collided.\n    var\
    \ cars_left int = n\n    // This is the number of cars that have not yet collided.\n\
    \    var cars_right int = n\n    // This is the number of cars that have not yet\
    \ collided.\n    var cars_left_to_right int = n\n    // This is the number of\
    \ cars that have not yet collided.\n    var cars_right_to_left int = n\n    //\
    \ This is the number of cars that have not yet collided.\n    var cars_left_to_right_collided\
    \ int = 0\n    // This is the number of cars that have not yet collided.\n   \
    \ var cars_right_to_left_collided int = 0\n    // This is the number of cars that\
    \ have not yet collided.\n    var cars_left_to_right_collided_and_passed int =\
    \ 0\n    // This is the number of cars that have not yet collided.\n    var cars_right_to_left_collided_and_passed\
    \ int = 0\n    // This is the number of cars that have not yet collided.\n   \
    \ var cars_left_to_right_collided_and_passed_and_passed_by_others int = 0\n  \
    \  // This is the number of cars that have not yet collided.\n    var cars_right_to_left_collided_and_passed_and_passed_by_others\
    \ int = 0\n    // This is the number of cars that have not yet collided.\n   \
    \ var cars_left_to_right_collided_and_passed_and_passed_by_others_and_passed_by_others\
    \ int = 0\n    // This is the number of cars that have not yet collided.\n   \
    \ var cars_right_to_left_collided_and_passed_and_passed_by_others_and_passed_by_others\
    \ int = 0\n    // This is the number of cars that have not yet collided.\n   \
    \ var cars_left_to_right_collided_and_passed_and_passed_by_others_and_passed_by_others\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp84tnphrv_test.go:44:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving right to left.\n    // We then iterate through the cars that are moving\
    \ left to right.  For each car,\n    // we check if it's in the hash table.  If\
    \ it is, we remove it from the hash table\n    // and increment the number of\
    \ collisions.  If it's not, we add it to the hash table.\n    // The time complexity\
    \ is O(n) and the space complexity is O(n).\n    collisions := 0\n    cars :=\
    \ make(map[int]bool)\n    for i := 0; i < n; i++ {\n        if _, ok := cars[i];\
    \ ok {\n            collisions++\n            delete(cars, i)\n        } else\
    \ {\n            cars[i] = true\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpubbsjmry_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpubbsjmry_test.go:52:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpubbsjmry_test.go:52: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpubbsjmry_test.go:52:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpubbsjmry_test.go:52: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can use a hash table to keep track of the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We can use a hash table to keep\
    \ track of the cars that are moving right to left.\n    // The key is the position\
    \ of the car, and the value is the number of cars at that position.\n    // We\
    \ can use a hash table to keep track of the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the number of cars\
    \ at that position.\n    // We can use a hash table to keep track of the cars\
    \ that are moving right to left.\n    // The key is the position of the car, and\
    \ the value is the number of cars at that position.\n    // We can use a hash\
    \ table to keep track of the cars that are moving left to right.\n    // The key\
    \ is the position of the car, and the value is the number of cars at that position.\n\
    \    // We can use a hash table to keep track of the cars that are moving right\
    \ to left.\n    // The key is the position of the car, and the value is the number\
    \ of cars at that position.\n    // We can use a hash table to keep track of the\
    \ cars that are moving left to right.\n    // The key is the position of the car,\
    \ and the value is the number of cars at that position.\n    // We can use a hash\
    \ table to keep track of the cars that are moving right to left.\n    // The key\
    \ is the position of the car, and the value is the number of cars at that position.\n\
    \    // We can use a hash table to keep track of the cars that are moving left\
    \ to right.\n    // The key is the position of the car, and the value is the number\
    \ of cars at that position.\n    // We can use a hash table to keep track of the\
    \ cars that are moving right to left.\n    // The key is the position of the car,\
    \ and the value is the number of cars at that position.\n    // We can use a hash\
    \ table to keep track of the cars that are moving left to right.\n    // The key\
    \ is the position of the car, and the value is the number of cars at that position.\n\
    \    // We can use\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxocvj2_t_test.go:40:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to keep track of\
    \ the cars that are\n    // moving left to right.  We insert the cars into the\
    \ tree as they move.\n    // When we insert a car, we check if there's a car in\
    \ the tree that's moving\n    // right to left and is at the same position as\
    \ the car we're inserting.\n    // If there is, we increment the collision count.\n\
    \    // We also delete cars that are moving left to right from the tree as they\
    \ move.\n    // We delete cars that are moving right to left from the tree as\
    \ they move.\n    // We do this so that we don't have to search the entire tree\
    \ to find cars that\n    // are moving right to left.\n    // The time complexity\
    \ is O(n log n).\n    // The space complexity is O(n).\n    collisions := 0\n\
    \    tree := NewBinarySearchTree()\n    for i := 0; i < n; i++ {\n        tree.Insert(i,\
    \ i)\n        collisions += tree.Count(i, i)\n    }\n    for i := 0; i < n; i++\
    \ {\n        tree.Delete(i, i)\n        collisions += tree.Count(i, i)\n    }\n\
    \    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9rwjcqg_test.go:29:13: undefined: NewBinarySearchTree

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ right to left\n    // that are to the left of the cars that are moving left\
    \ to right.\n    // We can do this by sorting the cars by their starting position,\
    \ and then\n    // iterating through the sorted list.\n    // We can sort the\
    \ cars in O(n log n) time.\n    // We can iterate through the sorted list in O(n)\
    \ time.\n    // Thus, the total time complexity is O(n log n).\n    // The space\
    \ complexity is O(n).\n    // We can do better.\n    // We can sort the cars in\
    \ O(n) time.\n    // We can iterate through the sorted list in O(n) time.\n  \
    \  // Thus, the total time complexity is O(n).\n    // The space complexity is\
    \ O(n).\n    // We can do even better.\n    // We can iterate through the cars\
    \ in O(n) time.\n    // We can count the number of collisions in O(1) time.\n\
    \    // Thus, the total time complexity is O(n).\n    // The space complexity\
    \ is O(1).\n    // We can do even better.\n    // We can iterate through the cars\
    \ in O(n) time.\n    // We can count the number of collisions in O(1) time.\n\
    \    // Thus, the total time complexity is O(n).\n    // The space complexity\
    \ is O(1).\n    // We can do even better.\n    // We can iterate through the cars\
    \ in O(n) time.\n    // We can count the number of collisions in O(1) time.\n\
    \    // Thus, the total time complexity is O(n).\n    // The space complexity\
    \ is O(1).\n    // We can do even better.\n    // We can iterate through the cars\
    \ in O(n) time.\n    // We can count the number of collisions in O(1) time.\n\
    \    // Thus, the total time complexity is O(n).\n    // The space complexity\
    \ is O(1).\n    // We can do even better.\n    // We can iterate through the cars\
    \ in O(n) time.\n    // We can count the number of collisions in O(1) time.\n\
    \    // Thus,\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3vmhrbd8_test.go:54:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to store the cars that are moving left to right.\n\
    \    // The key is the position of the car.\n    // The value is the number of\
    \ cars at that position.\n    // Initially, there are n cars at position -n.\n\
    \    left_to_right := make(map[int]int)\n    left_to_right[-n] = n\n\n    // We\
    \ use a map to store the cars that are moving right to left.\n    // The key is\
    \ the position of the car.\n    // The value is the number of cars at that position.\n\
    \    // Initially, there are n cars at position n.\n    right_to_left := make(map[int]int)\n\
    \    right_to_left[n] = n\n\n    // The number of collisions.\n    num_collisions\
    \ := 0\n\n    // The position of the leftmost car that's moving left to right.\n\
    \    leftmost_left_to_right := -n\n\n    // The position of the rightmost car\
    \ that's moving right to left.\n    rightmost_right_to_left := n\n\n    // The\
    \ cars move in steps of 1.\n    // We move the cars in steps of 1 until the leftmost\
    \ car that's moving left to right\n    // is at position 0.\n    for leftmost_left_to_right\
    \ < 0 {\n        // Move all cars that are moving left to right by 1.\n      \
    \  for pos, num_cars := range left_to_right {\n            if pos == leftmost_left_to_right\
    \ {\n                // This is the leftmost car that's moving left to right.\n\
    \                // Move it to the next position.\n                leftmost_left_to_right++\n\
    \                left_to_right[pos + 1] = num_cars\n            } else {\n   \
    \             // This is not the leftmost car that's moving left to right.\n \
    \               // Move it to the next position.\n                left_to_right[pos\
    \ + 1] = num_cars\n            }\n            // Remove the car from its old position.\n\
    \            delete(left_to_right, pos)\n        }\n\n        // Move all cars\
    \ that are moving right to left by 1.\n        for pos, num_cars := range right_to_left\
    \ {\n            if pos\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdvdscqyv_test.go:63:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is equal to the number of cars that\
    \ are moving\n    // in the same direction.\n    return n\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpg2cr6yac_test.go:39: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpg2cr6yac_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpg2cr6yac_test.go:39: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpg2cr6yac_test.go:39:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpg2cr6yac_test.go:39: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073161
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here.\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We then iterate through the\
    \ cars that are moving right to left, and check if there are\n    // any cars\
    \ that are moving left to right at the same position.  If so, we add the number\
    \ of\n    // cars at that position to the total number of collisions.\n    //\
    \ We can use a map to implement the hash table.\n    // We can use a slice to\
    \ store the cars that are moving right to left.\n    // We can use a slice to\
    \ store the cars that are moving left to right.\n    // We can use a variable\
    \ to store the total number of collisions.\n    // We can use a variable to store\
    \ the number of cars that are moving left to right.\n    // We can use a variable\
    \ to store the number of cars that are moving right to left.\n    // We can use\
    \ a variable to store the number of cars that are moving left to right at a given\
    \ position.\n    // We can use a variable to store the number of cars that are\
    \ moving right to left at a given position.\n    // We can use a variable to store\
    \ the position of a car that is moving left to right.\n    // We can use a variable\
    \ to store the position of a car that is moving right to left.\n    // We can\
    \ use a variable to store the position of a car that is moving left to right.\n\
    \    // We can use a variable to store the position of a car that is moving right\
    \ to left.\n    // We can use a variable to store the position of a car that is\
    \ moving left to right.\n    // We can use a variable to store the position of\
    \ a car that is moving right to left.\n    // We can use a variable to store the\
    \ position of a car that is moving left to right.\n    // We can use a variable\
    \ to store the position of a car that is moving right to left.\n    // We can\
    \ use a variable to store the position of a car that is moving left to right.\n\
    \    // We can use a variable to store the position of a car that is moving right\
    \ to left.\n    // We can use a variable to store the position of a car that is\
    \ moving left to right.\n    //\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsaayoc53_test.go:42:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We then iterate through the\
    \ cars that are moving right to left, and check if there are\n    // any cars\
    \ that are moving left to right at the same position.  If so, we increment the\n\
    \    // number of collisions.\n    // The time complexity is O(n), and the space\
    \ complexity is O(n).\n    left_to_right := make(map[int]int)\n    for i := 0;\
    \ i < n; i++ {\n        left_to_right[i] = 1\n    }\n    collisions := 0\n   \
    \ for i := 0; i < n; i++ {\n        if _, ok := left_to_right[i]; ok {\n     \
    \       collisions++\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpqs5owsz0_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpqs5owsz0_test.go:53:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpqs5owsz0_test.go:53: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpqs5owsz0_test.go:53:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpqs5owsz0_test.go:53: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073161
