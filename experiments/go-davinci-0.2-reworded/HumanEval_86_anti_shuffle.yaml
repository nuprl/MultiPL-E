name: HumanEval_86_anti_shuffle
language: go_test.go
prompt: "package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function that takes a string and returns an ordered version of it.\n\
  // Ordered version of string, is a string where all words (separated by space)\n\
  // are replaced by a new word where all the characters arranged in\n// ascending\
  \ order based on ascii value.\n// Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\
  \n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\"\
  )\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n"
tests: "func TestAnti_Shuffle(t *testing.T) {\n  candidate := anti_shuffle\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Hi\"), expected: \"Hi\" },\n     { actual:\
  \ candidate(\"hello\"), expected: \"ehllo\" },\n     { actual: candidate(\"number\"\
  ), expected: \"bemnru\" },\n     { actual: candidate(\"abcd\"), expected: \"abcd\"\
  \ },\n     { actual: candidate(\"Hello World!!!\"), expected: \"Hello !!!Wdlor\"\
  \ },\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
  Hi. My name is Mister Robot. How are you?\"), expected: \".Hi My aemn is Meirst\
  \ .Rboot How aer ?ouy\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n\
    }\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    //\
    \ Write your code here\n    return \"\"\n}\n", "    var result string\n    var\
    \ word string\n    for _, char := range s {\n        if char == ' ' {\n      \
    \      result += word + \" \"\n            word = \"\"\n        } else {\n   \
    \         word += string(char)\n        }\n    }\n    result += word\n    return\
    \ result\n}\n", "    var result string\n    var word string\n    for _, char :=\
    \ range s {\n        if char == ' ' {\n            result += word + \" \"\n  \
    \          word = \"\"\n        } else {\n            word += string(char)\n \
    \       }\n    }\n    result += word\n    return result\n}\n", "    // TODO: Implement\
    \ me\n    return \"\"\n}\n", "    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", " \
    \   return \"\"\n}\n", "    var result string\n    var word string\n    for _,\
    \ char := range s {\n        if char == ' ' {\n            result += word + \"\
    \ \"\n            word = \"\"\n        } else {\n            word += string(char)\n\
    \        }\n    }\n    result += word\n    return result\n}\n", "    // Write\
    \ your code here\n    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO:\
    \ Implement me\n    return \"\"\n}\n", "    var result string\n    var word string\n\
    \    for _, char := range s {\n        if string(char) == \" \" {\n          \
    \  result += word + \" \"\n            word = \"\"\n        } else {\n       \
    \     word += string(char)\n        }\n    }\n    result += word\n    return result\n\
    }\n", "    var result string\n    var word string\n    var word_map map[string]string\n\
    \    word_map = make(map[string]string)\n    for _, char := range s {\n      \
    \  if char == ' ' {\n            result += word_map[word] + \" \"\n          \
    \  word = \"\"\n        } else {\n            word += string(char)\n        }\n\
    \        if _, ok := word_map[word]; !ok {\n            word_map[word] = sort_word(word)\n\
    \        }\n    }\n    result += word_map[word]\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
