name: HumanEval_78_hex_key
language: go_test.go
prompt: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ have been tasked to write a function that receives \n// a hexadecimal number as\
  \ a string and counts the number of hexadecimal \n// digits that are primes (prime\
  \ number, or a prime, is a natural number \n// greater than 1 that is not a product\
  \ of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5,\
  \ 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
  // So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B\
  \ (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct\
  \ or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
  // >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"\
  ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"\
  2020\")\n// 2\nfunc hex_key(num string) int {\n"
tests: "func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"\
  ), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4 },\n    \
  \ { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"\
  ), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var count int\n    for _, v := range num {\n        if v == '2'\
    \ || v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    // your code here\n    return 0\n}\n", "    var primes = []string{\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    var count int\n    for _, v := range\
    \ num {\n        for _, p := range primes {\n            if string(v) == p {\n\
    \                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    var count int\n    for _, c := range num {\n        if c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n    for _, v :=\
    \ range num {\n        switch v {\n        case '2', '3', '5', '7', 'B', 'D':\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    var count\
    \ int\n    for _, v := range num {\n        switch v {\n        case '2', '3',\
    \ '5', '7', 'B', 'D':\n            count++\n        }\n    }\n    return count\n\
    }\n", "    var count int\n    for _, c := range num {\n        if c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    var count int\n    for _, v :=\
    \ range num {\n        switch v {\n        case '2', '3', '5', '7', 'B', 'D':\n\
    \            count++\n        }\n    }\n    return count\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    var count int\n    for _, v := range num {\n\
    \        if v == '2' || v == '3' || v == '5' || v == '7' || v == 'B' || v == 'D'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    if len(num)\
    \ == 0 {\n        return 0\n    }\n    primes := []string{\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"}\n    count := 0\n    for _, v := range num {\n        for\
    \ _, p := range primes {\n            if string(v) == p {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n", "    var count int\n\
    \    for _, v := range num {\n        switch v {\n        case '2', '3', '5',\
    \ '7', 'B', 'D':\n            count++\n        }\n    }\n    return count\n}\n",
  "    // your code here\n    return 0\n}\n", "    var count int\n    for _, v :=\
    \ range num {\n        if v == '2' || v == '3' || v == '5' || v == '7' || v ==\
    \ 'B' || v == 'D' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    if len(num) == 0 {\n        return 0\n    }\n    primes := []string{\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    count := 0\n    for _, v := range\
    \ num {\n        for _, p := range primes {\n            if string(v) == p {\n\
    \                count++\n            }\n        }\n    }\n    return count\n\
    }\n", "    // your code here\n    return 0\n}\n", "    // your code here\n   \
    \ return 0\n}\n", "    var count int\n    for _, v := range num {\n        switch\
    \ v {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n     \
    \   }\n    }\n    return count\n}\n", "    // your code here\n    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
