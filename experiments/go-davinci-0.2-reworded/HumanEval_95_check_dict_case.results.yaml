language: go_test.go
name: HumanEval_95_check_dict_case
results:
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            is_lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pe3gnti_test.go:29:17: undefined: strings

    /tmp/tmp4pe3gnti_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var all_lower,\
    \ all_upper bool\n    for key, _ := range dict {\n        if key == key {\n  \
    \          all_lower = true\n        } else {\n            all_upper = true\n\
    \        }\n    }\n    return all_lower || all_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmp__1c95hz_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmp__1c95hz_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmp__1c95hz_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    upper := true\n\
    \    lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz_b4asu_test.go:29:17: undefined: strings

    /tmp/tmphz_b4asu_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    var all_lower, all_upper bool\n    for k, _ := range dict {\n  \
    \      if all_lower && all_upper {\n            return false\n        }\n    \
    \    if all_lower && k == strings.ToUpper(k) {\n            all_upper = true\n\
    \        }\n        if all_upper && k == strings.ToLower(k) {\n            all_lower\
    \ = true\n        }\n    }\n    return all_lower || all_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkytct905_test.go:28:30: undefined: strings

    /tmp/tmpkytct905_test.go:31:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            lower = true\n            break\n        }\n    }\n    for k, _ :=\
    \ range dict {\n        if lower {\n            if k[0] >= 'A' && k[0] <= 'Z'\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n          \
    \  }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmpifs48pho_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmpifs48pho_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           is_lower = true\n        } else if k == strings.ToUpper(k) {\n   \
    \         is_lower = false\n        } else {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83plsfy2_test.go:26:9: is_lower declared but not used

    /tmp/tmp83plsfy2_test.go:28:17: undefined: strings

    /tmp/tmp83plsfy2_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, _ :=\
    \ range dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplizqk2gp_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            upper = false\n      \
    \      break\n        }\n    }\n    if upper {\n        return true\n    }\n \
    \   var lower bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else {\n            lower = false\n \
    \           break\n        }\n    }\n    if lower {\n        return true\n   \
    \ }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw7drl6k_test.go:28:17: undefined: strings

    /tmp/tmpjw7drl6k_test.go:40:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, _\
    \ := range dict {\n        if key == \"\" {\n            return false\n      \
    \  }\n        if key[0] >= 'A' && key[0] <= 'Z' {\n            for _, c := range\
    \ key {\n                if c < 'A' || c > 'Z' {\n                    return false\n\
    \                }\n            }\n        } else if key[0] >= 'a' && key[0] <=\
    \ 'z' {\n            for _, c := range key {\n                if c < 'a' || c\
    \ > 'z' {\n                    return false\n                }\n            }\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpi31wmygk_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmvayeha_test.go:29:17: undefined: strings

    /tmp/tmplmvayeha_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lowerCase = true\n        } else if k == strings.ToUpper(k) {\n  \
    \          lowerCase = false\n        } else {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowctxo9b_test.go:26:9: lowerCase declared but not used

    /tmp/tmpowctxo9b_test.go:28:17: undefined: strings

    /tmp/tmpowctxo9b_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower = true\n        } else if key == strings.ToUpper(key) {\n\
    \            lower = false\n        } else {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmbjg27fq_test.go:26:9: lower declared but not used

    /tmp/tmpmbjg27fq_test.go:28:19: undefined: strings

    /tmp/tmpmbjg27fq_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_upper :=\
    \ false\n    is_lower := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToUpper(k) {\n            is_upper = true\n        } else if k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_upper || is_lower\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf4j0dbyq_test.go:29:17: undefined: strings

    /tmp/tmpf4j0dbyq_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k[:1] + k[1:].ToLower() {\n                return false\n            }\n\
    \        } else {\n            if k != k[:1] + k[1:].ToUpper() {\n           \
    \     return false\n            }\n        }\n        is_lower = !is_lower\n \
    \   }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr1v5xqys_test.go:29:35: k[1:].ToLower undefined (type string has no field
    or method ToLower)

    /tmp/tmpr1v5xqys_test.go:33:35: k[1:].ToUpper undefined (type string has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwaekv01o_test.go:28:38: undefined: strings

    /tmp/tmpwaekv01o_test.go:30:44: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    upper := true\n\
    \    lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz_b4asu_test.go:29:17: undefined: strings

    /tmp/tmphz_b4asu_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if k == \"\" {\n            return\
    \ false\n        }\n        if is_upper == false {\n            is_upper = k ==\
    \ strings.ToUpper(k)\n        }\n        if is_upper != (k == strings.ToUpper(k))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl8fiu6n0_test.go:32:29: undefined: strings

    /tmp/tmpl8fiu6n0_test.go:34:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmvayeha_test.go:29:17: undefined: strings

    /tmp/tmplmvayeha_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    var is_upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if k == strings.ToUpper(k) {\n\
    \            is_upper = true\n        } else {\n            return false\n   \
    \     }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzy9ynzjn_test.go:29:17: undefined: strings

    /tmp/tmpzy9ynzjn_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            lower_case = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mn_xblo_test.go:26:9: lower_case declared but not used

    /tmp/tmp8mn_xblo_test.go:28:19: undefined: strings

    /tmp/tmp8mn_xblo_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_count,\
    \ upper_case_count int\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case_count++\n        } else if key == strings.ToUpper(key)\
    \ {\n            upper_case_count++\n        }\n    }\n    if lower_case_count\
    \ == len(dict) || upper_case_count == len(dict) {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxx7j8_6c_test.go:28:19: undefined: strings

    /tmp/tmpxx7j8_6c_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_keys,\
    \ upper_keys int\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_keys++\n        } else if key == strings.ToUpper(key) {\n\
    \            upper_keys++\n        }\n    }\n    if lower_keys == len(dict) ||\
    \ upper_keys == len(dict) {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsc1pw748_test.go:28:19: undefined: strings

    /tmp/tmpsc1pw748_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lowerCase = true\n        } else if k == strings.ToUpper(k) {\n  \
    \          lowerCase = false\n        } else {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowctxo9b_test.go:26:9: lowerCase declared but not used

    /tmp/tmpowctxo9b_test.go:28:17: undefined: strings

    /tmp/tmpowctxo9b_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if k == \"\" {\n            return\
    \ false\n        }\n        if is_upper == false {\n            is_upper = is_upper_case(k)\n\
    \        } else {\n            if is_upper_case(k) != is_upper {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqug2026_test.go:32:24: undefined: is_upper_case

    /tmp/tmplqug2026_test.go:34:16: undefined: is_upper_case

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            is_lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pe3gnti_test.go:29:17: undefined: strings

    /tmp/tmp4pe3gnti_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            lower_case = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mn_xblo_test.go:26:9: lower_case declared but not used

    /tmp/tmp8mn_xblo_test.go:28:19: undefined: strings

    /tmp/tmp8mn_xblo_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            upper = false\n      \
    \      break\n        }\n    }\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            upper = false\n        } else {\n        \
    \    upper = true\n            break\n        }\n    }\n    return upper\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8l9q1s43_test.go:28:17: undefined: strings

    /tmp/tmp8l9q1s43_test.go:36:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys,\
    \ upper_case_keys bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower_case_keys = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            upper_case_keys = true\n        } else {\n            return\
    \ false\n        }\n    }\n    return lower_case_keys || upper_case_keys\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7kr2z7g_test.go:28:17: undefined: strings

    /tmp/tmpw7kr2z7g_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else if k == strings.ToUpper(k) {\n      \
    \      lower = false\n        } else {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpja9ix77r_test.go:26:9: lower declared but not used

    /tmp/tmpja9ix77r_test.go:28:17: undefined: strings

    /tmp/tmpja9ix77r_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    var is_upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if k == strings.ToUpper(k) {\n\
    \            is_upper = true\n        } else {\n            return false\n   \
    \     }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzy9ynzjn_test.go:29:17: undefined: strings

    /tmp/tmpzy9ynzjn_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowercase\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            lowercase = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if lowercase {\n            if k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n                return false\n            }\n        } else {\n  \
    \          if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmp970rh541_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmp970rh541_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, _\
    \ := range dict {\n        if key != strings.ToLower(key) && key != strings.ToUpper(key)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1kfs813_test.go:27:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwaekv01o_test.go:28:38: undefined: strings

    /tmp/tmpwaekv01o_test.go:30:44: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k[:1] + k[1:len(k)].ToLower() {\n                return false\n         \
    \   }\n        } else {\n            if k != k[:1] + k[1:len(k)].ToUpper() {\n\
    \                return false\n            }\n        }\n        is_lower = !is_lower\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3bfmhvq6_test.go:29:41: k[1:len(k)].ToLower undefined (type string has
    no field or method ToLower)

    /tmp/tmp3bfmhvq6_test.go:33:41: k[1:len(k)].ToUpper undefined (type string has
    no field or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            is_lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pe3gnti_test.go:29:17: undefined: strings

    /tmp/tmp4pe3gnti_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            upper = false\n      \
    \      break\n        }\n    }\n    if upper {\n        return true\n    }\n \
    \   var lower bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else {\n            lower = false\n \
    \           break\n        }\n    }\n    if lower {\n        return true\n   \
    \ }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw7drl6k_test.go:28:17: undefined: strings

    /tmp/tmpjw7drl6k_test.go:40:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper_case\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'A' && k[0] <= 'Z' {\n\
    \            is_upper_case = true\n            break\n        }\n    }\n    for\
    \ k, _ := range dict {\n        if is_upper_case {\n            if k[0] >= 'a'\
    \ && k[0] <= 'z' {\n                return false\n            }\n        } else\
    \ {\n            if k[0] >= 'A' && k[0] <= 'Z' {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmppddbvmnd_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmppddbvmnd_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, _ :=\
    \ range dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplizqk2gp_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for key, _ := range dict {\n        if key == \"\" {\n           \
    \ return false\n        }\n        if is_upper == false {\n            is_upper\
    \ = key == strings.ToUpper(key)\n        }\n        if is_upper != (key == strings.ToUpper(key))\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9puyyqyh_test.go:32:31: undefined: strings

    /tmp/tmp9puyyqyh_test.go:34:32: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lowerCase = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            lowerCase = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_7ckkay0_test.go:26:9: lowerCase declared but not used

    /tmp/tmp_7ckkay0_test.go:28:19: undefined: strings

    /tmp/tmp_7ckkay0_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            is_lower = true\n            break\n        }\n    }\n    if !is_lower\
    \ {\n        return false\n    }\n    for k, _ := range dict {\n        if k[0]\
    \ >= 'A' && k[0] <= 'Z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmpxndnyby7_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpxndnyby7_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for key, _ := range dict {\n        if key\
    \ == strings.ToLower(key) {\n            is_lower = true\n        } else if key\
    \ == strings.ToUpper(key) {\n            is_upper = true\n        } else {\n \
    \           return false\n        }\n    }\n    return is_lower || is_upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwf9d5_vp_test.go:29:19: undefined: strings

    /tmp/tmpwf9d5_vp_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            is_lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pe3gnti_test.go:29:17: undefined: strings

    /tmp/tmp4pe3gnti_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            lower_case = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mn_xblo_test.go:26:9: lower_case declared but not used

    /tmp/tmp8mn_xblo_test.go:28:19: undefined: strings

    /tmp/tmp8mn_xblo_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__0\
    \ (0.00s)\n        tmpjt1g8lli_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpjt1g8lli_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Dict_Case/test_num__5\
    \ (0.00s)\n        tmpjt1g8lli_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    var all_lower, all_upper bool\n    for key, _ := range dict {\n\
    \        if key == \"\" {\n            return false\n        }\n        if key\
    \ == strings.ToLower(key) {\n            all_lower = true\n        } else if key\
    \ == strings.ToUpper(key) {\n            all_upper = true\n        } else {\n\
    \            return false\n        }\n    }\n    return all_lower || all_upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppvtivqvn_test.go:28:19: undefined: strings

    /tmp/tmppvtivqvn_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k[:1] + strings.ToLower(k[1:]) {\n                return false\n        \
    \    }\n        } else {\n            if k != k[:1] + strings.ToUpper(k[1:]) {\n\
    \                return false\n            }\n        }\n        is_lower = !is_lower\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpteeuf85x_test.go:29:29: undefined: strings

    /tmp/tmpteeuf85x_test.go:33:29: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper,\
    \ lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4dj6ze25_test.go:28:17: undefined: strings

    /tmp/tmp4dj6ze25_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    var upper_case bool\n    for key, _ := range dict {\n        if key\
    \ == strings.ToLower(key) {\n            lower_case = true\n        } else if\
    \ key == strings.ToUpper(key) {\n            upper_case = true\n        } else\
    \ {\n            return false\n        }\n    }\n    return lower_case || upper_case\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqegs1f34_test.go:29:19: undefined: strings

    /tmp/tmpqegs1f34_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lowerCase = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            lowerCase = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_7ckkay0_test.go:26:9: lowerCase declared but not used

    /tmp/tmp_7ckkay0_test.go:28:19: undefined: strings

    /tmp/tmp_7ckkay0_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case = true\n        } else {\n            lower_case = false\n\
    \            break\n        }\n    }\n    for k, _ := range dict {\n        if\
    \ lower_case {\n            if k != strings.ToLower(k) {\n                return\
    \ false\n            }\n        } else {\n            if k != strings.ToUpper(k)\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrozpstn_test.go:28:17: undefined: strings

    /tmp/tmphrozpstn_test.go:37:21: undefined: strings

    /tmp/tmphrozpstn_test.go:41:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwaekv01o_test.go:28:38: undefined: strings

    /tmp/tmpwaekv01o_test.go:30:44: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else if k == strings.ToUpper(k) {\n      \
    \      lower = false\n        } else {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpja9ix77r_test.go:26:9: lower declared but not used

    /tmp/tmpja9ix77r_test.go:28:17: undefined: strings

    /tmp/tmpja9ix77r_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ = true\n    var upperCase = true\n    for key, _ := range dict {\n        if\
    \ key != strings.ToLower(key) {\n            lowerCase = false\n        }\n  \
    \      if key != strings.ToUpper(key) {\n            upperCase = false\n     \
    \   }\n    }\n    return lowerCase || upperCase\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa31bse4y_test.go:29:19: undefined: strings

    /tmp/tmpa31bse4y_test.go:32:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            upper = false\n      \
    \      break\n        }\n    }\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            if upper {\n                return false\n\
    \            }\n        } else {\n            if !upper {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qu2sotd_test.go:28:17: undefined: strings

    /tmp/tmp4qu2sotd_test.go:36:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_upper :=\
    \ true\n    is_lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            is_upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            is_lower = false\n        }\n    }\n    return is_upper || is_lower\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5iq22zj_test.go:29:17: undefined: strings

    /tmp/tmpu5iq22zj_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for key, _\
    \ := range dict {\n        if key != strings.ToLower(key) && key != strings.ToUpper(key)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_1kfs813_test.go:27:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    var lower, upper bool\n    for k, _ := range dict {\n        if\
    \ k == strings.ToLower(k) {\n            lower = true\n        } else if k ==\
    \ strings.ToUpper(k) {\n            upper = true\n        } else {\n         \
    \   return false\n        }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8o431yb2_test.go:25:17: undefined: strings

    /tmp/tmp8o431yb2_test.go:27:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k.ToLower() {\n                return false\n            }\n        } else\
    \ {\n            if k != k.ToUpper() {\n                return false\n       \
    \     }\n        }\n        is_lower = !is_lower\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6j51a5bd_test.go:29:23: k.ToLower undefined (type string has no field
    or method ToLower)

    /tmp/tmp6j51a5bd_test.go:33:23: k.ToUpper undefined (type string has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            is_lower = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if is_lower {\n            if k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n                return false\n            }\n        } else {\n  \
    \          if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmp2lbt0224_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmp2lbt0224_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for key, _ := range dict {\n        if key == key {\n      \
    \      lower = true\n        }\n        if key == key {\n            upper = true\n\
    \        }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmp2j7gaf15_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmp2j7gaf15_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmp2j7gaf15_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case = true\n        } else {\n            lower_case = false\n\
    \            break\n        }\n    }\n    if lower_case {\n        return true\n\
    \    }\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcv_vplzx_test.go:28:17: undefined: strings

    /tmp/tmpcv_vplzx_test.go:39:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case = true\n        } else {\n            lower_case = false\n\
    \            break\n        }\n    }\n    if lower_case {\n        return true\n\
    \    }\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           lower_case = true\n        } else {\n            lower_case = false\n\
    \            break\n        }\n    }\n    return lower_case\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgoc8o9l8_test.go:28:17: undefined: strings

    /tmp/tmpgoc8o9l8_test.go:39:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    upper := true\n\
    \    lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz_b4asu_test.go:29:17: undefined: strings

    /tmp/tmphz_b4asu_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmvayeha_test.go:29:17: undefined: strings

    /tmp/tmplmvayeha_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmvayeha_test.go:29:17: undefined: strings

    /tmp/tmplmvayeha_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            is_lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pe3gnti_test.go:29:17: undefined: strings

    /tmp/tmp4pe3gnti_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for key, _ := range dict {\n        if key\
    \ == strings.ToLower(key) {\n            is_lower = true\n        } else if key\
    \ == strings.ToUpper(key) {\n            is_upper = true\n        } else {\n \
    \           return false\n        }\n    }\n    return is_lower || is_upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwf9d5_vp_test.go:29:19: undefined: strings

    /tmp/tmpwf9d5_vp_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    upper := true\n\
    \    lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz_b4asu_test.go:29:17: undefined: strings

    /tmp/tmphz_b4asu_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    var lower_case, upper_case bool\n    for k, _ := range dict {\n\
    \        if k == strings.ToLower(k) {\n            lower_case = true\n       \
    \ } else if k == strings.ToUpper(k) {\n            upper_case = true\n       \
    \ } else {\n            return false\n        }\n    }\n    return lower_case\
    \ || upper_case\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsklsllwt_test.go:25:17: undefined: strings

    /tmp/tmpsklsllwt_test.go:27:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            upper = false\n      \
    \      break\n        }\n    }\n    if upper {\n        return true\n    }\n \
    \   var lower bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else {\n            lower = false\n \
    \           break\n        }\n    }\n    if lower {\n        return true\n   \
    \ }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw7drl6k_test.go:28:17: undefined: strings

    /tmp/tmpjw7drl6k_test.go:40:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case = true\n        } else {\n            lower_case = false\n\
    \            break\n        }\n    }\n    for k, _ := range dict {\n        if\
    \ k == strings.ToUpper(k) {\n            lower_case = false\n        } else {\n\
    \            lower_case = true\n            break\n        }\n    }\n    return\
    \ lower_case\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb3ur0z51_test.go:28:17: undefined: strings

    /tmp/tmpb3ur0z51_test.go:36:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'A' && k[0] <= 'Z' {\n\
    \            is_upper = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if is_upper {\n            if k[0] >= 'a' && k[0]\
    \ <= 'z' {\n                return false\n            }\n        } else {\n  \
    \          if k[0] >= 'A' && k[0] <= 'Z' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmpmgvefbg2_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmpmgvefbg2_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    upper := true\n\
    \    lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz_b4asu_test.go:29:17: undefined: strings

    /tmp/tmphz_b4asu_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if is_upper {\n            if k\
    \ != k.ToUpper() {\n                return false\n            }\n        } else\
    \ {\n            if k != k.ToLower() {\n                return false\n       \
    \     }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbuqp1jb2_test.go:29:23: k.ToUpper undefined (type string has no field
    or method ToUpper)

    /tmp/tmpbuqp1jb2_test.go:33:23: k.ToLower undefined (type string has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for key, _ := range dict {\n        if is_upper == false && key ==\
    \ key {\n            is_upper = true\n        } else if is_upper == true && key\
    \ != key {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpyayhfwi__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpyayhfwi__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpyayhfwi__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if is_upper {\n            if k\
    \ != k.ToUpper() {\n                return false\n            }\n        } else\
    \ {\n            if k != k.ToLower() {\n                return false\n       \
    \     }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbuqp1jb2_test.go:29:23: k.ToUpper undefined (type string has no field
    or method ToUpper)

    /tmp/tmpbuqp1jb2_test.go:33:23: k.ToLower undefined (type string has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper,\
    \ lower bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmp44nfemqs_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmp44nfemqs_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmp44nfemqs_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            is_lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pe3gnti_test.go:29:17: undefined: strings

    /tmp/tmp4pe3gnti_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ true\n    for k, _ := range dict {\n        if k[0] >= 'A' && k[0] <= 'Z' {\n\
    \            is_lower = false\n            break\n        }\n    }\n    if is_lower\
    \ {\n        for k, _ := range dict {\n            if k[0] >= 'a' && k[0] <= 'z'\
    \ {\n                continue\n            } else {\n                return false\n\
    \            }\n        }\n    } else {\n        for k, _ := range dict {\n  \
    \          if k[0] >= 'A' && k[0] <= 'Z' {\n                continue\n       \
    \     } else {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpv960ski7_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else if k == strings.ToUpper(k) {\n      \
    \      lower = false\n        } else {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpja9ix77r_test.go:26:9: lower declared but not used

    /tmp/tmpja9ix77r_test.go:28:17: undefined: strings

    /tmp/tmpja9ix77r_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    upper := true\n\
    \    lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz_b4asu_test.go:29:17: undefined: strings

    /tmp/tmphz_b4asu_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper,\
    \ lower bool\n    for k, _ := range dict {\n        if k == k[0:1] {\n       \
    \     upper = true\n        } else {\n            lower = true\n        }\n  \
    \  }\n    return upper != lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpa49loftx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpa49loftx_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpa49loftx_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case = true\n        } else if k == strings.ToUpper(k) {\n \
    \           lower_case = false\n        } else {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmu7w9xj_test.go:26:9: lower_case declared but not used

    /tmp/tmpmmu7w9xj_test.go:28:17: undefined: strings

    /tmp/tmpmmu7w9xj_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower = true\n        } else if key == strings.ToUpper(key) {\n\
    \            upper = true\n        } else {\n            return false\n      \
    \  }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmq8u4dk5_test.go:28:19: undefined: strings

    /tmp/tmpmq8u4dk5_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            is_lower = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if is_lower {\n            if k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n                return false\n            }\n        } else {\n  \
    \          if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmp2lbt0224_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmp2lbt0224_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case,\
    \ upper_case bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower_case = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            upper_case = true\n        } else {\n            return false\n\
    \        }\n    }\n    return lower_case || upper_case\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr0pwbh_b_test.go:28:17: undefined: strings

    /tmp/tmpr0pwbh_b_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmvayeha_test.go:29:17: undefined: strings

    /tmp/tmplmvayeha_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for key, _ := range dict {\n        if key ==\
    \ strings.ToUpper(key) {\n            upper = true\n        } else if key == strings.ToLower(key)\
    \ {\n            lower = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_u4bh13h_test.go:29:19: undefined: strings

    /tmp/tmp_u4bh13h_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwaekv01o_test.go:28:38: undefined: strings

    /tmp/tmpwaekv01o_test.go:30:44: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lowerCase = true\n        } else if k == strings.ToUpper(k) {\n  \
    \          lowerCase = false\n        } else {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowctxo9b_test.go:26:9: lowerCase declared but not used

    /tmp/tmpowctxo9b_test.go:28:17: undefined: strings

    /tmp/tmpowctxo9b_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k[:1] + k[1:].ToLower() {\n                return false\n            }\n\
    \        } else {\n            if k != k[:1] + k[1:].ToUpper() {\n           \
    \     return false\n            }\n        }\n        is_lower = !is_lower\n \
    \   }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr1v5xqys_test.go:29:35: k[1:].ToLower undefined (type string has no field
    or method ToLower)

    /tmp/tmpr1v5xqys_test.go:33:35: k[1:].ToUpper undefined (type string has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            is_lower = true\n            break\n        }\n    }\n    if !is_lower\
    \ {\n        return false\n    }\n    for k, _ := range dict {\n        if k[0]\
    \ >= 'A' && k[0] <= 'Z' {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmpxndnyby7_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__4 (0.00s)\n        tmpxndnyby7_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwaekv01o_test.go:28:38: undefined: strings

    /tmp/tmpwaekv01o_test.go:30:44: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    upper := false\n\
    \    lower := false\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxk7rnot1_test.go:29:17: undefined: strings

    /tmp/tmpxk7rnot1_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    upper := true\n\
    \    lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz_b4asu_test.go:29:17: undefined: strings

    /tmp/tmphz_b4asu_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case_keys = true\n            break\n        }\n    }\n\
    \    for key, _ := range dict {\n        if lower_case_keys {\n            if\
    \ key != strings.ToLower(key) {\n                return false\n            }\n\
    \        } else {\n            if key != strings.ToUpper(key) {\n            \
    \    return false\n            }\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3aahqwf_test.go:28:19: undefined: strings

    /tmp/tmpj3aahqwf_test.go:35:23: undefined: strings

    /tmp/tmpj3aahqwf_test.go:39:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lowerCase = true\n        } else if k == strings.ToUpper(k) {\n  \
    \          lowerCase = false\n        } else {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowctxo9b_test.go:26:9: lowerCase declared but not used

    /tmp/tmpowctxo9b_test.go:28:17: undefined: strings

    /tmp/tmpowctxo9b_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys,\
    \ upper_case_keys bool\n    for key, _ := range dict {\n        if key == key\
    \ {\n            lower_case_keys = true\n        } else {\n            upper_case_keys\
    \ = true\n        }\n    }\n    if lower_case_keys && upper_case_keys {\n    \
    \    return false\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpoiiligu2_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpoiiligu2_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpoiiligu2_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys\
    \ []string\n    var upper_case_keys []string\n    for key, _ := range dict {\n\
    \        if key == strings.ToLower(key) {\n            lower_case_keys = append(lower_case_keys,\
    \ key)\n        } else {\n            upper_case_keys = append(upper_case_keys,\
    \ key)\n        }\n    }\n    if len(lower_case_keys) == 0 || len(upper_case_keys)\
    \ == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphv10rccp_test.go:29:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           is_lower = true\n        } else if k == strings.ToUpper(k) {\n   \
    \         is_lower = false\n        } else {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83plsfy2_test.go:26:9: is_lower declared but not used

    /tmp/tmp83plsfy2_test.go:28:17: undefined: strings

    /tmp/tmp83plsfy2_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case_keys = true\n            break\n        }\n    }\n    for\
    \ k, _ := range dict {\n        if lower_case_keys {\n            if k != strings.ToLower(k)\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k != strings.ToUpper(k) {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq27qpuqu_test.go:28:17: undefined: strings

    /tmp/tmpq27qpuqu_test.go:35:21: undefined: strings

    /tmp/tmpq27qpuqu_test.go:39:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for key, _ := range dict {\n        if key\
    \ == strings.ToLower(key) {\n            is_lower = true\n        } else if key\
    \ == strings.ToUpper(key) {\n            is_upper = true\n        } else {\n \
    \           return false\n        }\n    }\n    return is_lower || is_upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwf9d5_vp_test.go:29:19: undefined: strings

    /tmp/tmpwf9d5_vp_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := false\n\
    \    upper := false\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower = true\n        } else if key == strings.ToUpper(key) {\n\
    \            upper = true\n        } else {\n            return false\n      \
    \  }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0_m7isjn_test.go:29:19: undefined: strings

    /tmp/tmp0_m7isjn_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case,\
    \ upper_case bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            upper_case = true\n        } else {\n            return false\n\
    \        }\n    }\n    return lower_case || upper_case\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hsr9w2b_test.go:28:19: undefined: strings

    /tmp/tmp4hsr9w2b_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for key, _ := range dict {\n        if key == \"\" {\n     \
    \       return false\n        }\n        if key == strings.ToLower(key) {\n  \
    \          lower = true\n        } else if key == strings.ToUpper(key) {\n   \
    \         upper = true\n        } else {\n            return false\n        }\n\
    \    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10qx101a_test.go:31:19: undefined: strings

    /tmp/tmp10qx101a_test.go:33:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            is_lower = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if is_lower {\n            if k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n                return false\n            }\n        } else {\n  \
    \          if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmp2lbt0224_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmp2lbt0224_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k[:1] + strings.ToLower(k[1:]) {\n                return false\n        \
    \    }\n        } else {\n            if k != k[:1] + strings.ToUpper(k[1:]) {\n\
    \                return false\n            }\n        }\n        is_lower = !is_lower\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpteeuf85x_test.go:29:29: undefined: strings

    /tmp/tmpteeuf85x_test.go:33:29: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_upper :=\
    \ false\n    is_lower := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToUpper(k) {\n            is_upper = true\n        } else if k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_upper || is_lower\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf4j0dbyq_test.go:29:17: undefined: strings

    /tmp/tmpf4j0dbyq_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for key, _ := range dict {\n        if is_lower == false && key ==\
    \ strings.ToLower(key) {\n            is_lower = true\n        } else if is_lower\
    \ == true && key == strings.ToUpper(key) {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n \
    \ candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7agokjna_test.go:28:40: undefined: strings

    /tmp/tmp7agokjna_test.go:30:46: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            lowerCase = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if lowerCase {\n            if k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n                return false\n            }\n        } else {\n  \
    \          if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmpch57w0vj_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmpch57w0vj_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower = true\n        } else if key == strings.ToUpper(key) {\n\
    \            upper = true\n        } else {\n            return false\n      \
    \  }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmq8u4dk5_test.go:28:19: undefined: strings

    /tmp/tmpmq8u4dk5_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmvayeha_test.go:29:17: undefined: strings

    /tmp/tmplmvayeha_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           is_lower = true\n        } else if k == strings.ToUpper(k) {\n   \
    \         is_lower = false\n        } else {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83plsfy2_test.go:26:9: is_lower declared but not used

    /tmp/tmp83plsfy2_test.go:28:17: undefined: strings

    /tmp/tmp83plsfy2_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else if k == strings.ToUpper(k) {\n      \
    \      lower = false\n        } else {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpja9ix77r_test.go:26:9: lower declared but not used

    /tmp/tmpja9ix77r_test.go:28:17: undefined: strings

    /tmp/tmpja9ix77r_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper,\
    \ lower bool\n    for k, _ := range dict {\n        if k == k.ToUpper() {\n  \
    \          upper = true\n        } else if k == k.ToLower() {\n            lower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_n241t2_test.go:28:19: k.ToUpper undefined (type string has no field
    or method ToUpper)

    /tmp/tmp7_n241t2_test.go:30:26: k.ToLower undefined (type string has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lowerCase = true\n        } else if k == strings.ToUpper(k) {\n  \
    \          lowerCase = false\n        } else {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowctxo9b_test.go:26:9: lowerCase declared but not used

    /tmp/tmpowctxo9b_test.go:28:17: undefined: strings

    /tmp/tmpowctxo9b_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k.ToLower() {\n                return false\n            }\n        } else\
    \ {\n            if k != k.ToUpper() {\n                return false\n       \
    \     }\n        }\n        is_lower = !is_lower\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6j51a5bd_test.go:29:23: k.ToLower undefined (type string has no field
    or method ToLower)

    /tmp/tmp6j51a5bd_test.go:33:23: k.ToUpper undefined (type string has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    if len(dict)\
    \ == 1 {\n        return true\n    }\n    var first_key_is_lower bool\n    for\
    \ key, _ := range dict {\n        if key == \"\" {\n            return false\n\
    \        }\n        if key[0] >= 'a' && key[0] <= 'z' {\n            first_key_is_lower\
    \ = true\n            break\n        }\n        if key[0] >= 'A' && key[0] <=\
    \ 'Z' {\n            first_key_is_lower = false\n            break\n        }\n\
    \        return false\n    }\n    for key, _ := range dict {\n        if first_key_is_lower\
    \ {\n            if key[0] >= 'A' && key[0] <= 'Z' {\n                return false\n\
    \            }\n        } else {\n            if key[0] >= 'a' && key[0] <= 'z'\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmp960ovp8q_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmp960ovp8q_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for key, _ := range dict {\n        if key ==\
    \ strings.ToUpper(key) {\n            upper = true\n        } else if key == strings.ToLower(key)\
    \ {\n            lower = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_u4bh13h_test.go:29:19: undefined: strings

    /tmp/tmp_u4bh13h_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for k, _ := range dict {\n        if k == k[0:1] {\n            lowerCase\
    \ = true\n            break\n        }\n    }\n    for k, _ := range dict {\n\
    \        if lowerCase {\n            if k != k[0:1] {\n                return\
    \ false\n            }\n        } else {\n            if k == k[0:1] {\n     \
    \           return false\n            }\n        }\n    }\n    return true\n}\n\
    \nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpeshv8ykf_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpeshv8ykf_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpeshv8ykf_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            is_lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pe3gnti_test.go:29:17: undefined: strings

    /tmp/tmp4pe3gnti_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for key, _ := range dict {\n        if is_upper {\n            if\
    \ !is_upper_case(key) {\n                return false\n            }\n       \
    \ } else {\n            if !is_lower_case(key) {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplihy91by_test.go:29:17: undefined: is_upper_case

    /tmp/tmplihy91by_test.go:33:17: undefined: is_lower_case

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lowerCase = true\n        } else if k == strings.ToUpper(k) {\n  \
    \          lowerCase = false\n        } else {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowctxo9b_test.go:26:9: lowerCase declared but not used

    /tmp/tmpowctxo9b_test.go:28:17: undefined: strings

    /tmp/tmpowctxo9b_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           is_lower = true\n        } else if k == strings.ToUpper(k) {\n   \
    \         is_lower = false\n        } else {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83plsfy2_test.go:26:9: is_lower declared but not used

    /tmp/tmp83plsfy2_test.go:28:17: undefined: strings

    /tmp/tmp83plsfy2_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lowerCase = true\n        } else if k == strings.ToUpper(k) {\n  \
    \          lowerCase = false\n        } else {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowctxo9b_test.go:26:9: lowerCase declared but not used

    /tmp/tmpowctxo9b_test.go:28:17: undefined: strings

    /tmp/tmpowctxo9b_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwaekv01o_test.go:28:38: undefined: strings

    /tmp/tmpwaekv01o_test.go:30:44: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if is_upper {\n            if k\
    \ != k.ToUpper() {\n                return false\n            }\n        } else\
    \ {\n            if k != k.ToLower() {\n                return false\n       \
    \     }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbuqp1jb2_test.go:29:23: k.ToUpper undefined (type string has no field
    or method ToUpper)

    /tmp/tmpbuqp1jb2_test.go:33:23: k.ToLower undefined (type string has no field
    or method ToLower)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwaekv01o_test.go:28:38: undefined: strings

    /tmp/tmpwaekv01o_test.go:30:44: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmvayeha_test.go:29:17: undefined: strings

    /tmp/tmplmvayeha_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    for k, _ :=\
    \ range dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplizqk2gp_test.go:27:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == k {\n            lower\
    \ = true\n        } else {\n            upper = true\n        }\n    }\n    return\
    \ lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate :=\
    \ check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__2 (0.00s)\n        tmpo077bx3__test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Dict_Case/test_num__3\
    \ (0.00s)\n        tmpo077bx3__test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower,\
    \ upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6m3lj5t5_test.go:28:17: undefined: strings

    /tmp/tmp6m3lj5t5_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upperCase\
    \ bool\n    var lowerCase bool\n    for key, _ := range dict {\n        if key\
    \ == strings.ToUpper(key) {\n            upperCase = true\n        } else if key\
    \ == strings.ToLower(key) {\n            lowerCase = true\n        } else {\n\
    \            return false\n        }\n    }\n    return upperCase || lowerCase\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxo7595uo_test.go:29:19: undefined: strings

    /tmp/tmpxo7595uo_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    var is_lower bool\n    var is_upper bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToLower(k) {\n            is_lower = true\n\
    \        } else if k == strings.ToUpper(k) {\n            is_upper = true\n  \
    \      } else {\n            return false\n        }\n    }\n    return is_lower\
    \ || is_upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg_60kfu6_test.go:26:17: undefined: strings

    /tmp/tmpg_60kfu6_test.go:28:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            lower = true\n            break\n        }\n    }\n    for k, _ :=\
    \ range dict {\n        if lower {\n            if k[0] >= 'A' && k[0] <= 'Z'\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n          \
    \  }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__2\
    \ (0.00s)\n        tmpifs48pho_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_Dict_Case/test_num__3 (0.00s)\n        tmpifs48pho_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    var upper, lower bool\n    for k, _ := range dict {\n        if\
    \ k == strings.ToUpper(k) {\n            upper = true\n        } else if k ==\
    \ strings.ToLower(k) {\n            lower = true\n        } else {\n         \
    \   return false\n        }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx2e1zgqj_test.go:25:17: undefined: strings

    /tmp/tmpx2e1zgqj_test.go:27:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case,\
    \ upper_case bool\n    for key, _ := range dict {\n        if key == \"\" {\n\
    \            return false\n        }\n        if key == strings.ToLower(key) {\n\
    \            lower_case = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            upper_case = true\n        } else {\n            return false\n\
    \        }\n    }\n    return lower_case || upper_case\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tuzpra__test.go:31:19: undefined: strings

    /tmp/tmp4tuzpra__test.go:33:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lowerCase\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lowerCase = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            lowerCase = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_7ckkay0_test.go:26:9: lowerCase declared but not used

    /tmp/tmp_7ckkay0_test.go:28:19: undefined: strings

    /tmp/tmp_7ckkay0_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplpgn85pb_test.go:29:17: undefined: strings

    /tmp/tmplpgn85pb_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074715
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k[:1] + k[1:].ToLower() {\n                return false\n            }\n\
    \        } else {\n            if k != k[:1] + k[1:].ToUpper() {\n           \
    \     return false\n            }\n        }\n        is_lower = !is_lower\n \
    \   }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr1v5xqys_test.go:29:35: k[1:].ToLower undefined (type string has no field
    or method ToLower)

    /tmp/tmpr1v5xqys_test.go:33:35: k[1:].ToUpper undefined (type string has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if k == \"\" {\n            return\
    \ false\n        }\n        if k[0] >= 'A' && k[0] <= 'Z' {\n            is_upper\
    \ = true\n        } else if k[0] >= 'a' && k[0] <= 'z' {\n            is_upper\
    \ = false\n        } else {\n            return false\n        }\n        for\
    \ _, c := range k {\n            if is_upper {\n                if c >= 'a' &&\
    \ c <= 'z' {\n                    return false\n                }\n          \
    \  } else {\n                if c >= 'A' && c <= 'Z' {\n                    return\
    \ false\n                }\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_Dict_Case (0.00s)\n    --- FAIL: TestCheck_Dict_Case/test_num__1\
    \ (0.00s)\n        tmpz_uul2n6_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           is_upper = true\n        } else if k == strings.ToLower(k) {\n   \
    \         is_upper = false\n        } else {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n\
    \  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzt1wofeo_test.go:26:9: is_upper declared but not used

    /tmp/tmpzt1wofeo_test.go:28:17: undefined: strings

    /tmp/tmpzt1wofeo_test.go:30:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower\
    \ bool\n    var upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr2klr00n_test.go:29:17: undefined: strings

    /tmp/tmpr2klr00n_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    var lower, upper bool\n    for k, _ := range dict {\n        if\
    \ k == strings.ToLower(k) {\n            lower = true\n        } else if k ==\
    \ strings.ToUpper(k) {\n            upper = true\n        } else {\n         \
    \   return false\n        }\n    }\n    return lower || upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8o431yb2_test.go:25:17: undefined: strings

    /tmp/tmp8o431yb2_test.go:27:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k.ToLower() {\n                return false\n            }\n        } else\
    \ {\n            if k != k.ToUpper() {\n                return false\n       \
    \     }\n        }\n        is_lower = !is_lower\n    }\n    return true\n}\n\n\
    func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6j51a5bd_test.go:29:23: k.ToLower undefined (type string has no field
    or method ToLower)

    /tmp/tmp6j51a5bd_test.go:33:23: k.ToUpper undefined (type string has no field
    or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    var lower bool\n    for key, _ := range dict {\n        if key ==\
    \ strings.ToUpper(key) {\n            upper = true\n        } else if key == strings.ToLower(key)\
    \ {\n            lower = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return upper || lower\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_u4bh13h_test.go:29:19: undefined: strings

    /tmp/tmp_u4bh13h_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            upper = false\n      \
    \      break\n        }\n    }\n    if upper {\n        return true\n    }\n \
    \   var lower bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else {\n            lower = false\n \
    \           break\n        }\n    }\n    if lower {\n        return true\n   \
    \ }\n    return false\n}\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate\
    \ := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw7drl6k_test.go:28:17: undefined: strings

    /tmp/tmpjw7drl6k_test.go:40:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if is_upper == false && k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else if is_upper == true && k == strings.ToLower(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw96emmm0_test.go:28:38: undefined: strings

    /tmp/tmpw96emmm0_test.go:30:44: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            is_lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_lower || is_upper\n}\n\nfunc TestCheck_Dict_Case(t\
    \ *testing.T) {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(map[string]string{\"p\": \"pineapple\", \"b\": \"banana\"}), expected:\
    \ true },\n     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual:\
    \ candidate(map[string]string{}), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pe3gnti_test.go:29:17: undefined: strings

    /tmp/tmp4pe3gnti_test.go:31:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    upper := true\n\
    \    lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphz_b4asu_test.go:29:17: undefined: strings

    /tmp/tmphz_b4asu_test.go:32:17: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            lower_case = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCheck_Dict_Case(t *testing.T)\
    \ {\n  candidate := check_dict_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mn_xblo_test.go:26:9: lower_case declared but not used

    /tmp/tmp8mn_xblo_test.go:28:19: undefined: strings

    /tmp/tmp8mn_xblo_test.go:30:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a map, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
    \ bool {\n    if len(dict) == 0 {\n        return false\n    }\n    is_lower :=\
    \ false\n    is_upper := false\n    for key, _ := range dict {\n        if key\
    \ == strings.ToLower(key) {\n            is_lower = true\n        } else if key\
    \ == strings.ToUpper(key) {\n            is_upper = true\n        } else {\n \
    \           return false\n        }\n    }\n    return is_lower || is_upper\n\
    }\n\nfunc TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
    , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
    , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
    \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
    Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwf9d5_vp_test.go:29:19: undefined: strings

    /tmp/tmpwf9d5_vp_test.go:31:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074718
