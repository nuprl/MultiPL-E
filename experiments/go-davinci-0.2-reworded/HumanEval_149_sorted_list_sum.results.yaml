language: go_test.go
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ret []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            ret = append(ret, s)\n        }\n   \
    \ }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpi767r5dh_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpi767r5dh_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpi767r5dh_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            result = append(result, str)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6ck2td_a_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // TODO: implement this function\n    return lst\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp3_opehiq_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp3_opehiq_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp3_opehiq_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3_opehiq_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp3_opehiq_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp3_opehiq_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            res = append(res, str)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpi9zyjys1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, word := range lst\
    \ {\n        if len(word) % 2 == 0 {\n            result = append(result, word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpshqsydrx_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var even_lst []string\n    for _, str := range lst\
    \ {\n        if len(str) % 2 == 0 {\n            even_lst = append(even_lst, str)\n\
    \        }\n    }\n    return even_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpia9h72ks_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpia9h72ks_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpia9h72ks_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, word := range lst\
    \ {\n        if len(word) % 2 == 0 {\n            result = append(result, word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpshqsydrx_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Write your code here\n    return []string{}\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpngjawc5i_test.go:47: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpngjawc5i_test.go:47:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpngjawc5i_test.go:47: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpngjawc5i_test.go:47:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpngjawc5i_test.go:47: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            res = append(res, str)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpi9zyjys1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpy14bsbd9_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpy14bsbd9_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpy14bsbd9_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpy14bsbd9_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpy14bsbd9_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpy14bsbd9_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, word := range lst\
    \ {\n        if len(word) % 2 == 0 {\n            result = append(result, word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpshqsydrx_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            result = append(result, str)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6ck2td_a_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ret []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            ret = append(ret, s)\n        }\n   \
    \ }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpi767r5dh_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpi767r5dh_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpi767r5dh_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var lst_sorted []string\n    var lst_sorted_len []int\n\
    \    var lst_sorted_len_map map[int][]string\n    lst_sorted_len_map = make(map[int][]string)\n\
    \    for _, v := range lst {\n        if _, ok := lst_sorted_len_map[len(v)];\
    \ !ok {\n            lst_sorted_len_map[len(v)] = []string{v}\n            lst_sorted_len\
    \ = append(lst_sorted_len, len(v))\n        } else {\n            lst_sorted_len_map[len(v)]\
    \ = append(lst_sorted_len_map[len(v)], v)\n        }\n    }\n    for _, v := range\
    \ lst_sorted_len {\n        for _, vv := range lst_sorted_len_map[v] {\n     \
    \       lst_sorted = append(lst_sorted, vv)\n        }\n    }\n    return lst_sorted\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpf9ocuwob_test.go:63: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpf9ocuwob_test.go:63:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpf9ocuwob_test.go:63: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpf9ocuwob_test.go:63:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpf9ocuwob_test.go:63: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpf9ocuwob_test.go:63:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    var length_map = make(map[int][]string)\n\
    \    for _, str := range lst {\n        length_map[len(str)] = append(length_map[len(str)],\
    \ str)\n    }\n    for _, str_lst := range length_map {\n        for _, str :=\
    \ range str_lst {\n            result = append(result, str)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpdri27jit_test.go:56: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpdri27jit_test.go:56:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpdri27jit_test.go:56: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpdri27jit_test.go:56:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpdri27jit_test.go:56: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpdri27jit_test.go:56:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            result = append(result, str)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6ck2td_a_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  var result []string\n    var length int\n    for _, v := range lst {\n    \
    \    if length == 0 {\n            length = len(v)\n        }\n        if len(v)\
    \ == length {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmprrjwssi7_test.go:59: expected '[AI asdf school]', got '[school]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmprrjwssi7_test.go:59:\
    \ expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmprrjwssi7_test.go:59: expected '[abcd dcba]', got '[d a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmprrjwssi7_test.go:59:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmprrjwssi7_test.go:59: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // TODO: implement\n    return []string{}\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpo865d5yc_test.go:47: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpo865d5yc_test.go:47:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpo865d5yc_test.go:47: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpo865d5yc_test.go:47:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpo865d5yc_test.go:47: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            result = append(result, str)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6ck2td_a_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            result = append(result, str)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6ck2td_a_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0syi3prd_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0syi3prd_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0syi3prd_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpy14bsbd9_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpy14bsbd9_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpy14bsbd9_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpy14bsbd9_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpy14bsbd9_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpy14bsbd9_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            result = append(result, str)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6ck2td_a_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // TODO\n    return []string{}\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpmiy0u0w1_test.go:47: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpmiy0u0w1_test.go:47:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpmiy0u0w1_test.go:47: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpmiy0u0w1_test.go:47:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpmiy0u0w1_test.go:47: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ret []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            ret = append(ret, s)\n        }\n   \
    \ }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpi767r5dh_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpi767r5dh_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpi767r5dh_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Write your code here\n    return []string{}\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpngjawc5i_test.go:47: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpngjawc5i_test.go:47:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpngjawc5i_test.go:47: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpngjawc5i_test.go:47:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpngjawc5i_test.go:47: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var new_lst []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            new_lst = append(new_lst, v)\n    \
    \    }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp3soj7slj_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3soj7slj_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp3soj7slj_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // TODO: implement this function\n    return lst\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp3_opehiq_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp3_opehiq_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp3_opehiq_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3_opehiq_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp3_opehiq_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp3_opehiq_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var new_lst []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            new_lst = append(new_lst, v)\n    \
    \    }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp3soj7slj_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3soj7slj_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp3soj7slj_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            res = append(res, str)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpi9zyjys1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0syi3prd_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0syi3prd_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0syi3prd_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // TODO: Implement the function\n    return lst\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpcy1j8ge4_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpcy1j8ge4_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpcy1j8ge4_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpcy1j8ge4_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpcy1j8ge4_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpcy1j8ge4_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            result = append(result, str)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6ck2td_a_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            res = append(res, str)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpi9zyjys1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            result = append(result, str)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp6ck2td_a_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp6ck2td_a_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  var result []string\n    for _, v := range lst {\n        if len(v) % 2 ==\
    \ 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbtutawsl_test.go:55: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbtutawsl_test.go:55:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbtutawsl_test.go:55: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    var m = make(map[int][]string)\n\
    \    for _, s := range lst {\n        m[len(s)] = append(m[len(s)], s)\n    }\n\
    \    for _, v := range m {\n        result = append(result, v...)\n    }\n   \
    \ return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbt6ruexa_test.go:54: expected '[aa]', got '[a aaa aa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbt6ruexa_test.go:54:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbt6ruexa_test.go:54: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbt6ruexa_test.go:54:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpbt6ruexa_test.go:54: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbt6ruexa_test.go:54:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, word := range lst\
    \ {\n        if len(word) % 2 == 0 {\n            result = append(result, word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpshqsydrx_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, s := range lst {\n  \
    \      if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpk4_lge5w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpk4_lge5w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp67rnbcs6_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp67rnbcs6_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp67rnbcs6_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp67rnbcs6_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp67rnbcs6_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp67rnbcs6_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073735
