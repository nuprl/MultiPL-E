name: HumanEval_75_is_multiply_prime
language: go_test.go
prompt: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
  func is_multiply_prime(a int) bool {\n"
tests: "func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual:\
  \ candidate(30), expected: true },\n     { actual: candidate(8), expected: true\
  \ },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
  \ expected: true },\n     { actual: candidate(105), expected: true },\n     { actual:\
  \ candidate(126), expected: false },\n     { actual: candidate(729), expected: false\
  \ },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001),\
  \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if a < 6 {\n        return false\n    }\n    if a % 2 == 0 {\n\
    \        return is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n       \
    \ return is_multiply_prime(a / 3)\n    }\n    if a % 5 == 0 {\n        return\
    \ is_multiply_prime(a / 5)\n    }\n    return true\n}\n", "    // Write your code\
    \ here\n    return false\n}\n", "    if a < 3 {\n        return false\n    }\n\
    \n    if a % 2 == 0 {\n        return is_multiply_prime(a / 2)\n    }\n\n    for\
    \ i := 3; i < a; i += 2 {\n        if a % i == 0 {\n            return is_multiply_prime(a\
    \ / i)\n        }\n    }\n\n    return true\n}\n", "    return false\n}\n", " \
    \   if a < 3 {\n        return false\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    if a % 7 == 0 {\n        return is_multiply_prime(a / 7)\n    }\n\
    \    if a % 11 == 0 {\n        return is_multiply_prime(a / 11)\n    }\n    if\
    \ a % 13 == 0 {\n        return is_multiply_prime(a / 13)\n    }\n    if a % 17\
    \ == 0 {\n        return is_multiply_prime(a / 17)\n    }\n    if a % 19 == 0\
    \ {\n        return is_multiply_prime(a / 19)\n    }\n    if a % 23 == 0 {\n \
    \       return is_multiply_prime(a / 23)\n    }\n    if a % 29 == 0 {\n      \
    \  return is_multiply_prime(a / 29)\n    }\n    if a % 31 == 0 {\n        return\
    \ is_multiply_prime(a / 31)\n    }\n    if a % 37 == 0 {\n        return is_multiply_prime(a\
    \ / 37)\n    }\n    if a % 41 == 0 {\n        return is_multiply_prime(a / 41)\n\
    \    }\n    if a % 43 == 0 {\n        return is_multiply_prime(a / 43)\n    }\n\
    \    if a % 47 == 0 {\n        return is_multiply_prime(a / 47)\n    }\n    if\
    \ a % 53 == 0 {\n        return is_multiply_prime(a / 53)\n    }\n    if a % 59\
    \ == 0 {\n        return is_multiply_prime(a / 59)\n    }\n    if a % 61 == 0\
    \ {\n        return is_multiply_prime(a / 61)\n    }\n    if a % 67 == 0 {\n \
    \       return", "    return false\n}\n", "    return false\n}\n", "    return\
    \ false\n}\n", "    // Write your code here\n    return false\n}\n", "    return\
    \ false\n}\n", "    if a <= 1 {\n        return false\n    }\n    if a == 2 ||\
    \ a == 3 || a == 5 {\n        return true\n    }\n    if a % 2 == 0 {\n      \
    \  return is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return\
    \ is_multiply_prime(a / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a\
    \ / 5)\n    }\n    return false\n}\n", "    return false\n}\n", "    return false\n\
    }\n", "    return false\n}\n", "    return false\n}\n", "    return false\n}\n",
  "    return false\n}\n", "    for i := 2; i < a; i++ {\n        if a % i == 0 {\n\
    \            for j := 2; j < a; j++ {\n                if a % j == 0 {\n     \
    \               for k := 2; k < a; k++ {\n                        if a % k ==\
    \ 0 {\n                            return true\n                        }\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return false\n}\n", "    return false\n}\n", "    if a < 6 {\n        return\
    \ false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n      \
    \      return is_multiply_prime(a / i)\n        }\n    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
