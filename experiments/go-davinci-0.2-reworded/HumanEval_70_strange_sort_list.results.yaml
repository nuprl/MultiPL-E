language: go_test.go
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpk1y1t6nv_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpk1y1t6nv_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpk1y1t6nv_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpk1y1t6nv_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpk1y1t6nv_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpk1y1t6nv_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpk1y1t6nv_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if i\
    \ % 2 == 0 {\n            result[i] = min(lst)\n        } else {\n           \
    \ result[i] = max(lst)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8f434c8_test.go:25:25: undefined: min

    /tmp/tmpy8f434c8_test.go:27:25: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    res :=\
    \ make([]int, len(lst))\n    min := lst[0]\n    max := lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    res[0] = min\n    res[len(lst)\
    \ - 1] = max\n    for i := 1; i < len(lst) - 1; i++ {\n        if i % 2 == 0 {\n\
    \            res[i] = max\n            max = max - 1\n        } else {\n     \
    \       res[i] = min\n            min = min + 1\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpv5gdmjz9_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpv5gdmjz9_test.go:68: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpv5gdmjz9_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpv5gdmjz9_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=9) %!s(int=2) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpv5gdmjz9_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpv5gdmjz9_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=-4) %!s(int=4) %!s(int=-3) %!s(int=3) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    var result []int\n    var min, max int\n    min = lst[0]\n\
    \    max = lst[0]\n    for _, v := range lst {\n        if v < min {\n       \
    \     min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n    result = append(result, min)\n    result = append(result, max)\n \
    \   for _, v := range lst {\n        if v != min && v != max {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6pcph3d8_test.go:74: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6pcph3d8_test.go:74:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6pcph3d8_test.go:74: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp6pcph3d8_test.go:74: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6pcph3d8_test.go:74: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6pcph3d8_test.go:74:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = removeMinMax(lst, min, max)\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbj81523q_test.go:25:20: undefined: findMinMax

    /tmp/tmpbj81523q_test.go:30:15: undefined: removeMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    res := []int{min}\n    lst = append(lst[:0], lst[1:]...)\n\
    \    for len(lst) > 0 {\n        min = lst[0]\n        max = lst[0]\n        for\
    \ _, v := range lst {\n            if v < min {\n                min = v\n   \
    \         }\n            if v > max {\n                max = v\n            }\n\
    \        }\n        res = append(res, max)\n        lst = append(lst[:0], lst[1:]...)\n\
    \        for i, v := range lst {\n            if v == max {\n                lst\
    \ = append(lst[:i], lst[i+1:]...)\n                break\n            }\n    \
    \    }\n        if len(lst) > 0 {\n            res = append(res, min)\n      \
    \      lst = append(lst[:0], lst[1:]...)\n            for i, v := range lst {\n\
    \                if v == min {\n                    lst = append(lst[:i], lst[i+1:]...)\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpyjy30om8_test.go:88: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpyjy30om8_test.go:88: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyjy30om8_test.go:88:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpyjy30om8_test.go:88: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpyjy30om8_test.go:88:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpyjy30om8_test.go:88: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpyjy30om8_test.go:88: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ltsgtoo_test.go:25:20: undefined: findMinMax

    /tmp/tmp8ltsgtoo_test.go:30:15: undefined: remove

    /tmp/tmp8ltsgtoo_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpc4p6f_ke_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpc4p6f_ke_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpc4p6f_ke_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpc4p6f_ke_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    var min_index, max_index int\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if i == 0 {\n            min = lst[i]\n    \
    \        max = lst[i]\n            min_index = i\n            max_index = i\n\
    \        } else {\n            if lst[i] < min {\n                min = lst[i]\n\
    \                min_index = i\n            }\n            if lst[i] > max {\n\
    \                max = lst[i]\n                max_index = i\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    lst = append(lst[:min_index], lst[min_index+1:]...)\n    lst = append(lst[:max_index-1],\
    \ lst[max_index:]...)\n    return append(result, strange_sort_list(lst)...)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00014e030?, 0x1, 0x5})\n\
    \t/tmp/tmp81z2w8oh_test.go:45 +0x394\ncommand-line-arguments_test.strange_sort_list({0xc00014e030?,\
    \ 0x3, 0x5})\n\t/tmp/tmp81z2w8oh_test.go:46 +0x2e5\ncommand-line-arguments_test.strange_sort_list({0xc00014e030?,\
    \ 0x5, 0x5})\n\t/tmp/tmp81z2w8oh_test.go:46 +0x2e5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp81z2w8oh_test.go:57 +0xd7\ntesting.tRunner(0xc0001036c0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58bqxuq0_test.go:25:20: undefined: findMinMax

    /tmp/tmp58bqxuq0_test.go:30:15: undefined: remove

    /tmp/tmp58bqxuq0_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var new_lst []int\n    var i, j int\n\
    \    for {\n        if i == len(lst) {\n            break\n        }\n       \
    \ if lst[i] == min {\n            new_lst = append(new_lst, min)\n           \
    \ i++\n        } else {\n            break\n        }\n    }\n    for {\n    \
    \    if j == len(lst) {\n            break\n        }\n        if lst[j] == max\
    \ {\n            new_lst = append(new_lst, max)\n            j++\n        } else\
    \ {\n            break\n        }\n    }\n    if i == len(lst) || j == len(lst)\
    \ {\n        return new_lst\n    }\n    return append(new_lst, strange_sort_list(lst[i:j])...)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000162000?, 0x4, 0x4})\n\
    \t/tmp/tmptqgoqisw_test.go:63 +0x2dc\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmptqgoqisw_test.go:73 +0x77\ntesting.tRunner(0xc0001036c0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min\
    \ int\n    var max int\n    var min_idx int\n    var max_idx int\n    var res\
    \ []int\n    for i, v := range lst {\n        if i == 0 {\n            min = v\n\
    \            max = v\n            min_idx = 0\n            max_idx = 0\n     \
    \   } else {\n            if v < min {\n                min = v\n            \
    \    min_idx = i\n            }\n            if v > max {\n                max\
    \ = v\n                max_idx = i\n            }\n        }\n    }\n    res =\
    \ append(res, min)\n    res = append(res, max)\n    lst = append(lst[:min_idx],\
    \ lst[min_idx+1:]...)\n    lst = append(lst[:max_idx], lst[max_idx+1:]...)\n \
    \   res = append(res, strange_sort_list(lst)...)\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4, 0x4})\n\
    \t/tmp/tmpxjw8rzax_test.go:47 +0x35d\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpxjw8rzax_test.go:59 +0x77\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n    for _,\
    \ v := range lst {\n        if v < min {\n            min = v\n        }\n   \
    \     if v > max {\n            max = v\n        }\n    }\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpczcjktv8_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpczcjktv8_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpczcjktv8_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpczcjktv8_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpczcjktv8_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpczcjktv8_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpczcjktv8_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    var new_lst []int\n    var min, max int\n\
    \    min, max = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       new_lst = append(new_lst, v)\n        }\n    }\n    return new_lst\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpsmd7r5j8_test.go:67: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpsmd7r5j8_test.go:67:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpsmd7r5j8_test.go:67: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpsmd7r5j8_test.go:67: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpsmd7r5j8_test.go:67: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpsmd7r5j8_test.go:67:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = removeMinMax(lst, min, max)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjg31suj3_test.go:25:20: undefined: findMinMax

    /tmp/tmpjg31suj3_test.go:30:15: undefined: removeMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    var min_index, max_index int\n    var new_lst []int\n    for len(lst)\
    \ > 0 {\n        min, max = lst[0], lst[0]\n        min_index, max_index = 0,\
    \ 0\n        for i, v := range lst {\n            if v < min {\n             \
    \   min = v\n                min_index = i\n            }\n            if v >\
    \ max {\n                max = v\n                max_index = i\n            }\n\
    \        }\n        new_lst = append(new_lst, min)\n        lst = append(lst[:min_index],\
    \ lst[min_index+1:]...)\n        if min_index < max_index {\n            max_index--\n\
    \        }\n        new_lst = append(new_lst, max)\n        lst = append(lst[:max_index],\
    \ lst[max_index+1:]...)\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 19 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00014a030?, 0x5d4270?,\
    \ 0x5e3ea0?})\n\t/tmp/tmp3uuyniq0_test.go:44 +0x375\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp3uuyniq0_test.go:57 +0xd7\ntesting.tRunner(0xc0001036c0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp1y87nsc5_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp1y87nsc5_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp1y87nsc5_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp1y87nsc5_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n    for _,\
    \ v := range lst {\n        if v < min {\n            min = v\n        }\n   \
    \     if v > max {\n            max = v\n        }\n    }\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for _, v := range lst {\n        if v\
    \ != min && v != max {\n            res = append(res, v)\n        }\n    }\n \
    \   return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate :=\
    \ strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp2xft8vwn_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp2xft8vwn_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp2xft8vwn_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp2xft8vwn_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp2xft8vwn_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp2xft8vwn_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp2xft8vwn_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    var i int\n    for i = 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ min {\n            break\n        }\n    }\n    lst = append(lst[:i], lst[i+1:]...)\n\
    \    for len(lst) > 0 {\n        var min, max int\n        for i, v := range lst\
    \ {\n            if i == 0 {\n                min = v\n                max = v\n\
    \            } else {\n                if v < min {\n                    min =\
    \ v\n                }\n                if v > max {\n                    max\
    \ = v\n                }\n            }\n        }\n        new_lst = append(new_lst,\
    \ max)\n        for i, v := range lst {\n            if v == max {\n         \
    \       lst = append(lst[:i], lst[i+1:]...)\n                break\n         \
    \   }\n        }\n        new_lst = append(new_lst, min)\n        for i, v :=\
    \ range lst {\n            if v == min {\n                lst = append(lst[:i],\
    \ lst[i+1:]...)\n                break\n            }\n        }\n    }\n    return\
    \ new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp9t42tv14_test.go:99: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp9t42tv14_test.go:99:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp9t42tv14_test.go:99:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp9t42tv14_test.go:99: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp9t42tv14_test.go:99:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = minMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvaghti9i_test.go:25:20: undefined: minMax

    /tmp/tmpvaghti9i_test.go:30:15: undefined: remove

    /tmp/tmpvaghti9i_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if max != min {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhvz73bf_test.go:25:20: undefined: findMinMax

    /tmp/tmpyhvz73bf_test.go:30:15: undefined: remove

    /tmp/tmpyhvz73bf_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    result\
    \ := make([]int, len(lst))\n    result[0] = min(lst)\n    lst = remove(lst, result[0])\n\
    \    for i := 1; i < len(result); i++ {\n        if i % 2 == 1 {\n           \
    \ result[i] = max(lst)\n        } else {\n            result[i] = min(lst)\n \
    \       }\n        lst = remove(lst, result[i])\n    }\n    return result\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1_3vz02n_test.go:23:17: undefined: min

    /tmp/tmp1_3vz02n_test.go:24:11: undefined: remove

    /tmp/tmp1_3vz02n_test.go:27:25: undefined: max

    /tmp/tmp1_3vz02n_test.go:29:25: undefined: min

    /tmp/tmp1_3vz02n_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    var new_lst []int\n    var min, max int\n\
    \    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            new_lst = append(new_lst, lst[i])\n        }\n    }\n\
    \    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp163bspcm_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp163bspcm_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp163bspcm_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp163bspcm_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp163bspcm_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp163bspcm_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    res :=\
    \ []int{}\n    for len(lst) > 0 {\n        min := lst[0]\n        max := lst[0]\n\
    \        for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        res = append(res, min)\n        res = append(res,\
    \ max)\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n    }\n\
    \    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph0ko_w3n_test.go:36:15: undefined: remove

    /tmp/tmph0ko_w3n_test.go:37:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpc4p6f_ke_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpc4p6f_ke_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpc4p6f_ke_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpc4p6f_ke_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    var min_index, max_index int\n    for i, v\
    \ := range lst {\n        if i == 0 {\n            min = v\n            max =\
    \ v\n            min_index = 0\n            max_index = 0\n        } else {\n\
    \            if v < min {\n                min = v\n                min_index\
    \ = i\n            }\n            if v > max {\n                max = v\n    \
    \            max_index = i\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    if min_index < max_index {\n        result = append(result, max)\n\
    \        lst = append(lst[:min_index], lst[min_index+1:]...)\n        lst = append(lst[:max_index-1],\
    \ lst[max_index:]...)\n    } else {\n        result = append(result, max)\n  \
    \      lst = append(lst[:max_index], lst[max_index+1:]...)\n        lst = append(lst[:min_index-1],\
    \ lst[min_index:]...)\n    }\n    return append(result, strange_sort_list(lst)...)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000024390?, 0x1, 0x5})\n\
    \t/tmp/tmpgjxm00wg_test.go:50 +0x59d\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x3, 0x5})\n\t/tmp/tmpgjxm00wg_test.go:52 +0x4f0\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x5, 0x5})\n\t/tmp/tmpgjxm00wg_test.go:52 +0x4f0\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpgjxm00wg_test.go:63 +0xd7\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var new_lst\
    \ []int\n    for len(lst) > 0 {\n        min := lst[0]\n        max := lst[0]\n\
    \        min_idx := 0\n        max_idx := 0\n        for i, v := range lst {\n\
    \            if v < min {\n                min = v\n                min_idx =\
    \ i\n            }\n            if v > max {\n                max = v\n      \
    \          max_idx = i\n            }\n        }\n        new_lst = append(new_lst,\
    \ min)\n        lst = append(lst[:min_idx], lst[min_idx+1:]...)\n        if len(lst)\
    \ == 0 {\n            break\n        }\n        new_lst = append(new_lst, max)\n\
    \        lst = append(lst[:max_idx], lst[max_idx+1:]...)\n    }\n    return new_lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x5d4270?,\
    \ 0x5e3ea0?})\n\t/tmp/tmp8goolkty_test.go:44 +0x398\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp8goolkty_test.go:56 +0x77\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    if\
    \ len(lst) == 1 {\n        return lst\n    }\n    var result []int\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            result = append(result, lst[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmprmc6v_5b_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmprmc6v_5b_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmprmc6v_5b_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmprmc6v_5b_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmprmc6v_5b_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmprmc6v_5b_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] != min && lst[i] != max {\n            new_lst = append(new_lst,\
    \ lst[i])\n        }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp7tl8wnsl_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp7tl8wnsl_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp7tl8wnsl_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp7tl8wnsl_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp7tl8wnsl_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp7tl8wnsl_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp7tl8wnsl_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    if min == max {\n        return lst\n    }\n    var new_lst\
    \ []int\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n\
    \    for _, v := range lst {\n        if v != min && v != max {\n            new_lst\
    \ = append(new_lst, v)\n        }\n    }\n    return strange_sort_list(new_lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020180398\
    \ stack=[0xc020180000, 0xc040180000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 19 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201803a8 sp=0xc0201803a0 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0x0?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc020180410 sp=0xc0201803a8 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc004395740?,\
    \ 0x4, 0x44a174?})\n\t/tmp/tmpue92w25h_test.go:36 +0x8b fp=0xc020180490 sp=0xc020180410\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.strange_sort_list({0xc004395720?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpue92w25h_test.go:43 +0x177 fp=0xc020180510 sp=0xc020180490\
    \ pc=0x4ef7d7\ncommand-line-arguments_test.strange_sort_list({0xc004395700?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpue92w25h_test.go:43 +0x177 fp=0xc020180590 sp=0xc020180510\
    \ pc=0x4ef7d7\ncommand-line-arguments_test.strange_sort_list({0xc0043956e0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpue92w25h_test.go:43 +0x177 fp=0xc020180610 sp=0xc020180590\
    \ pc=0x4ef7d7\ncommand-line-arguments_test.strange_sort_list({0xc0043956c0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpue92w25h_test.go:43 +0x177 fp=0xc020180690 sp=0xc020180610\
    \ pc=0x4ef7d7\ncommand-line-arguments_test.strange_sort_list({0xc0043956a0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpue92w25h_test.go:43 +0x177 fp=0xc020180710 sp=0xc020180690\
    \ pc=0x4ef7d7\ncommand-line-arguments_test.strange_sort_list({0xc004395680?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpue92w25h_test.go:43 +0x177 fp=0xc020180790 sp=0xc020180710\
    \ pc=0x4ef7d7\ncommand-line-arguments_test.strange_sort_list({0xc004395660?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpue92w25h_test.go:43 +0x177 fp=0xc020180810 sp=0xc020180"
  timestamp: 1660074261
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var (\n\
    \        min int\n        max int\n        min_index int\n        max_index int\n\
    \        result []int\n    )\n    for i, v := range lst {\n        if i == 0 {\n\
    \            min = v\n            max = v\n            min_index = 0\n       \
    \     max_index = 0\n        } else {\n            if v < min {\n            \
    \    min = v\n                min_index = i\n            }\n            if v >\
    \ max {\n                max = v\n                max_index = i\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    if min_index < max_index {\n        result = append(result, strange_sort_list(lst[min_index+1:max_index])...)\n\
    \    } else {\n        result = append(result, strange_sort_list(lst[max_index+1:min_index])...)\n\
    \    }\n    if max_index < len(lst)-1 {\n        result = append(result, strange_sort_list(lst[max_index+1:])...)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000243a0?, 0x1, 0x3})\n\
    \t/tmp/tmp17sm1hit_test.go:51 +0x46a\ncommand-line-arguments_test.strange_sort_list({0xc000024398?,\
    \ 0x3, 0x4})\n\t/tmp/tmp17sm1hit_test.go:49 +0x19c\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x5, 0x5})\n\t/tmp/tmp17sm1hit_test.go:49 +0x19c\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp17sm1hit_test.go:67 +0xd7\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    sorted\
    \ := make([]int, len(lst))\n    sorted[0] = min(lst)\n    lst = remove(lst, sorted[0])\n\
    \    for i := 1; i < len(sorted); i += 2 {\n        sorted[i] = max(lst)\n   \
    \     lst = remove(lst, sorted[i])\n        if len(lst) == 0 {\n            break\n\
    \        }\n        sorted[i+1] = min(lst)\n        lst = remove(lst, sorted[i+1])\n\
    \    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9ekoy0f_test.go:23:17: undefined: min

    /tmp/tmpw9ekoy0f_test.go:24:11: undefined: remove

    /tmp/tmpw9ekoy0f_test.go:26:21: undefined: max

    /tmp/tmpw9ekoy0f_test.go:27:15: undefined: remove

    /tmp/tmpw9ekoy0f_test.go:31:23: undefined: min

    /tmp/tmpw9ekoy0f_test.go:32:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074260
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var new_lst\
    \ []int\n    var min, max int\n    for i := 0; i < len(lst); i++ {\n        min,\
    \ max = find_min_max(lst)\n        new_lst = append(new_lst, min)\n        new_lst\
    \ = append(new_lst, max)\n        lst = remove_min_max(lst, min, max)\n    }\n\
    \    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_rsfkasy_test.go:25:20: undefined: find_min_max

    /tmp/tmp_rsfkasy_test.go:28:15: undefined: remove_min_max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    sort_lst\
    \ := []int{}\n    sort_lst = append(sort_lst, lst[0])\n    lst = lst[1:]\n   \
    \ for len(lst) > 0 {\n        sort_lst = append(sort_lst, lst[len(lst)-1])\n \
    \       lst = lst[:len(lst)-1]\n        if len(lst) > 0 {\n            sort_lst\
    \ = append(sort_lst, lst[0])\n            lst = lst[1:]\n        }\n    }\n  \
    \  return sort_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpm53qqruc_test.go:57: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpm53qqruc_test.go:57: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            return []int{lst[1], lst[0]}\n        }\n        return\
    \ lst\n    }\n    if len(lst) == 3 {\n        if lst[0] > lst[1] {\n         \
    \   lst[0], lst[1] = lst[1], lst[0]\n        }\n        if lst[1] > lst[2] {\n\
    \            lst[1], lst[2] = lst[2], lst[1]\n        }\n        if lst[0] > lst[1]\
    \ {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    if len(lst) == 4 {\n        if lst[0] > lst[1] {\n            lst[0],\
    \ lst[1] = lst[1], lst[0]\n        }\n        if lst[2] > lst[3] {\n         \
    \   lst[2], lst[3] = lst[3], lst[2]\n        }\n        if lst[0] > lst[2] {\n\
    \            lst[0], lst[2] = lst[2], lst[0]\n        }\n        if lst[1] > lst[3]\
    \ {\n            lst[1], lst[3] = lst[3], lst[1]\n        }\n        if lst[1]\
    \ > lst[2] {\n            lst[1], lst[2] = lst[2], lst[1]\n        }\n       \
    \ return lst\n    }\n    if len(lst) == 5 {\n        if lst[0] > lst[1] {\n  \
    \          lst[0], lst[1] = lst[1], lst[0]\n        }\n        if\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpft1kdn0y_test.go:66:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpc4p6f_ke_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpc4p6f_ke_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpc4p6f_ke_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpc4p6f_ke_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    // len(lst) > 3\n    var result []int\n    var min, max\
    \ int\n    min, max = findMinMax(lst)\n    result = append(result, min)\n    result\
    \ = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            result = append(result, lst[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv6mqn9f6_test.go:34:16: undefined: findMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpxbk3sn7f_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbk3sn7f_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpxbk3sn7f_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpxbk3sn7f_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpxbk3sn7f_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbk3sn7f_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpxbk3sn7f_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp1y87nsc5_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp1y87nsc5_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp1y87nsc5_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp1y87nsc5_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] != min && lst[i] != max {\n            new_lst = append(new_lst,\
    \ lst[i])\n        }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp5iz54jme_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp5iz54jme_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp5iz54jme_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp5iz54jme_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp5iz54jme_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp5iz54jme_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp5iz54jme_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    var min_idx, max_idx int\n    var new_lst []int\n    for i := 0;\
    \ i < len(lst); i++ {\n        if i == 0 {\n            min = lst[i]\n       \
    \     max = lst[i]\n            min_idx = i\n            max_idx = i\n       \
    \ } else {\n            if lst[i] < min {\n                min = lst[i]\n    \
    \            min_idx = i\n            }\n            if lst[i] > max {\n     \
    \           max = lst[i]\n                max_idx = i\n            }\n       \
    \ }\n    }\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst,\
    \ max)\n    lst = append(lst[:min_idx], lst[min_idx+1:]...)\n    lst = append(lst[:max_idx-1],\
    \ lst[max_idx:]...)\n    new_lst = append(new_lst, strange_sort_list(lst)...)\n\
    \    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc000024390?, 0x1, 0x5})\n\
    \t/tmp/tmpaiiu187z_test.go:45 +0x394\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x3, 0x5})\n\t/tmp/tmpaiiu187z_test.go:46 +0x2e5\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x5, 0x5})\n\t/tmp/tmpaiiu187z_test.go:46 +0x2e5\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpaiiu187z_test.go:58 +0xd7\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    var res\
    \ []int\n    for len(lst) > 0 {\n        min, max := min_max(lst)\n        res\
    \ = append(res, min)\n        if min != max {\n            res = append(res, max)\n\
    \        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n \
    \   }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp963ff9nk_test.go:24:21: undefined: min_max

    /tmp/tmp963ff9nk_test.go:29:15: undefined: remove

    /tmp/tmp963ff9nk_test.go:30:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            return []int{lst[1], lst[0]}\n        }\n        return\
    \ lst\n    }\n    var new_lst []int\n    var min, max int\n    min, max = lst[0],\
    \ lst[0]\n    for _, v := range lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n    for\
    \ _, v := range lst {\n        if v != min && v != max {\n            new_lst\
    \ = append(new_lst, v)\n        }\n    }\n    return strange_sort_list(new_lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520568?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0x0?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201e0410 sp=0xc0201e03a8 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc0044019a0?,\
    \ 0x4, 0x44a174?})\n\t/tmp/tmp4pdabbv1_test.go:42 +0xde fp=0xc0201e0490 sp=0xc0201e0410\
    \ pc=0x4ef73e\ncommand-line-arguments_test.strange_sort_list({0xc004401980?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp4pdabbv1_test.go:49 +0x1c5 fp=0xc0201e0510 sp=0xc0201e0490\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc004401960?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp4pdabbv1_test.go:49 +0x1c5 fp=0xc0201e0590 sp=0xc0201e0510\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc004401940?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp4pdabbv1_test.go:49 +0x1c5 fp=0xc0201e0610 sp=0xc0201e0590\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc004401920?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp4pdabbv1_test.go:49 +0x1c5 fp=0xc0201e0690 sp=0xc0201e0610\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc004401900?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp4pdabbv1_test.go:49 +0x1c5 fp=0xc0201e0710 sp=0xc0201e0690\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc0044018e0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp4pdabbv1_test.go:49 +0x1c5 fp=0xc0201e0790 sp=0xc0201e0710\
    \ pc=0x4ef825\ncommand-line-arguments_test.strange_sort_list({0xc0044018c0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp4pdabbv1_test.go:49 +0x1c5 fp=0xc0201e0810 sp=0xc0201e07"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n       \
    \ return lst\n    }\n    var new_lst []int\n    var min, max int\n    min, max\
    \ = lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       new_lst = append(new_lst, v)\n        }\n    }\n    return strange_sort_list(new_lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020180398\
    \ stack=[0xc020180000, 0xc040180000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201803a8 sp=0xc0201803a0 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0x0?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc020180410 sp=0xc0201803a8 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc004433a80?,\
    \ 0x4, 0x44a174?})\n\t/tmp/tmp0jkhx8fz_test.go:42 +0xb5 fp=0xc020180490 sp=0xc020180410\
    \ pc=0x4ef715\ncommand-line-arguments_test.strange_sort_list({0xc004433a60?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp0jkhx8fz_test.go:49 +0x197 fp=0xc020180510 sp=0xc020180490\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc004433a40?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp0jkhx8fz_test.go:49 +0x197 fp=0xc020180590 sp=0xc020180510\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc004433a20?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp0jkhx8fz_test.go:49 +0x197 fp=0xc020180610 sp=0xc020180590\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc004433a00?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp0jkhx8fz_test.go:49 +0x197 fp=0xc020180690 sp=0xc020180610\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0044339e0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp0jkhx8fz_test.go:49 +0x197 fp=0xc020180710 sp=0xc020180690\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0044339c0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp0jkhx8fz_test.go:49 +0x197 fp=0xc020180790 sp=0xc020180710\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0044339a0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmp0jkhx8fz_test.go:49 +0x197 fp=0xc020180810 sp=0xc020180"
  timestamp: 1660074262
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            min := lst[i]\n\
    \            min_index := i\n            for j := i; j < len(lst); j++ {\n   \
    \             if lst[j] < min {\n                    min = lst[j]\n          \
    \          min_index = j\n                }\n            }\n            lst[i],\
    \ lst[min_index] = lst[min_index], lst[i]\n        } else {\n            max :=\
    \ lst[i]\n            max_index := i\n            for j := i; j < len(lst); j++\
    \ {\n                if lst[j] > max {\n                    max = lst[j]\n   \
    \                 max_index = j\n                }\n            }\n          \
    \  lst[i], lst[max_index] = lst[max_index], lst[i]\n        }\n    }\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp1y87nsc5_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp1y87nsc5_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp1y87nsc5_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp1y87nsc5_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    if len(lst) == 4 {\n        return []int{lst[0], lst[3],\
    \ lst[1], lst[2]}\n    }\n    if len(lst) == 5 {\n        return []int{lst[0],\
    \ lst[4], lst[1], lst[3], lst[2]}\n    }\n    if len(lst) == 6 {\n        return\
    \ []int{lst[0], lst[5], lst[1], lst[4], lst[2], lst[3]}\n    }\n    if len(lst)\
    \ == 7 {\n        return []int{lst[0], lst[6], lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]}\n    }\n    if len(lst) == 8 {\n        return []int{lst[0], lst[7],\
    \ lst[1], lst[6], lst[2], lst[5], lst[3], lst[4]}\n    }\n    if len(lst) == 9\
    \ {\n        return []int{lst[0], lst[8], lst[1], lst[7], lst[2], lst[6], lst[3],\
    \ lst[5], lst[4]}\n    }\n    if len(lst) == 10 {\n        return []int{lst[0],\
    \ lst[9], lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]}\n  \
    \  }\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpmahdaj8k_test.go:76: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpmahdaj8k_test.go:76: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    var min_index, max_index int\n    var min_found,\
    \ max_found bool\n    for len(lst) > 0 {\n        min, max = lst[0], lst[0]\n\
    \        min_index, max_index = 0, 0\n        min_found, max_found = false, false\n\
    \        for i, v := range lst {\n            if v < min {\n                min\
    \ = v\n                min_index = i\n                min_found = true\n     \
    \       }\n            if v > max {\n                max = v\n               \
    \ max_index = i\n                max_found = true\n            }\n        }\n\
    \        if min_found {\n            result = append(result, min)\n          \
    \  lst = append(lst[:min_index], lst[min_index+1:]...)\n        }\n        if\
    \ max_found {\n            result = append(result, max)\n            lst = append(lst[:max_index],\
    \ lst[max_index+1:]...)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074273
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, val := range lst {\n    \
    \    if val < min {\n            min = val\n        }\n        if val > max {\n\
    \            max = val\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for _, val := range lst {\n    \
    \    if val != min && val != max {\n            result = append(result, val)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpxyhd13h6_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxyhd13h6_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpxyhd13h6_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpxyhd13h6_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpxyhd13h6_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxyhd13h6_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpxyhd13h6_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074261
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var sorted\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        sorted = append(sorted, min)\n        if min != max {\n            sorted\
    \ = append(sorted, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxmlussrb_test.go:25:20: undefined: findMinMax

    /tmp/tmpxmlussrb_test.go:30:15: undefined: remove

    /tmp/tmpxmlussrb_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpxbk3sn7f_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbk3sn7f_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpxbk3sn7f_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpxbk3sn7f_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpxbk3sn7f_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbk3sn7f_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpxbk3sn7f_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ continue\n        }\n        res = append(res, lst[i])\n    }\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n    \
    \        continue\n        }\n        res = append(res, lst[i])\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpu1_ohyea_test.go:71: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpu1_ohyea_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpu1_ohyea_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpu1_ohyea_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpu1_ohyea_test.go:71: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpu1_ohyea_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpu1_ohyea_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=-5) %!s(int=-5)]'\n "
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] == min || lst[i] == max {\n            continue\n        }\n  \
    \      res = append(res, lst[i])\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpbcqg9py__test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpbcqg9py__test.go:66:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpbcqg9py__test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpbcqg9py__test.go:66: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpbcqg9py__test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpbcqg9py__test.go:66:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpbcqg9py__test.go:66: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp14o9w5n2_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp14o9w5n2_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp14o9w5n2_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp14o9w5n2_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp14o9w5n2_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp14o9w5n2_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp14o9w5n2_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    var min_idx, max_idx int\n    var new_lst []int\n    for len(lst)\
    \ > 0 {\n        min, max = lst[0], lst[0]\n        min_idx, max_idx = 0, 0\n\
    \        for i, v := range lst {\n            if v < min {\n                min\
    \ = v\n                min_idx = i\n            }\n            if v > max {\n\
    \                max = v\n                max_idx = i\n            }\n       \
    \ }\n        new_lst = append(new_lst, min)\n        lst = append(lst[:min_idx],\
    \ lst[min_idx+1:]...)\n        if len(lst) > 0 {\n            new_lst = append(new_lst,\
    \ max)\n            lst = append(lst[:max_idx], lst[max_idx+1:]...)\n        }\n\
    \    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x5d4270?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpmn9mrh80_test.go:42 +0x387\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpmn9mrh80_test.go:55 +0x77\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    for i, v := range lst {\n    \
    \    if i == 0 || i == 1 {\n            continue\n        }\n        if v == min\
    \ || v == max {\n            continue\n        }\n        new_lst = append(new_lst,\
    \ v)\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpa87nxxj0_test.go:72: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpa87nxxj0_test.go:72: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpa87nxxj0_test.go:72:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpa87nxxj0_test.go:72: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpa87nxxj0_test.go:72:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpa87nxxj0_test.go:72:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpa87nxxj0_test.go:72: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmpa87nxxj0_test.go:72: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    result\
    \ := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if i\
    \ % 2 == 0 {\n            result[i] = min(lst)\n        } else {\n           \
    \ result[i] = max(lst)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8f434c8_test.go:25:25: undefined: min

    /tmp/tmpy8f434c8_test.go:27:25: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    res := []int{min}\n    if min == max {\n        return res\n\
    \    }\n    lst = append(lst[:0], lst[1:]...)\n    res = append(res, max)\n  \
    \  lst = append(lst[:0], lst[1:]...)\n    for len(lst) > 0 {\n        min = lst[0]\n\
    \        max = lst[0]\n        for _, v := range lst {\n            if v < min\
    \ {\n                min = v\n            }\n            if v > max {\n      \
    \          max = v\n            }\n        }\n        res = append(res, min)\n\
    \        lst = append(lst[:0], lst[1:]...)\n        if len(lst) > 0 {\n      \
    \      res = append(res, max)\n            lst = append(lst[:0], lst[1:]...)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp3l66ind9_test.go:81: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp3l66ind9_test.go:81: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp3l66ind9_test.go:81: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp3l66ind9_test.go:81:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp3l66ind9_test.go:81:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp3l66ind9_test.go:81:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=5)\
    \ %!s(int=8) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp3l66ind9_test.go:81: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    var lst_min, lst_max []int\n    for _, v := range lst {\n        if\
    \ v == min {\n            continue\n        }\n        if v == max {\n       \
    \     continue\n        }\n        if v < max {\n            lst_min = append(lst_min,\
    \ v)\n        } else {\n            lst_max = append(lst_max, v)\n        }\n\
    \    }\n    result = append(result, strange_sort_list(lst_max)...)\n    result\
    \ = append(result, max)\n    result = append(result, strange_sort_list(lst_min)...)\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpofhc0boh_test.go:79: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n    \
    \    tmpofhc0boh_test.go:79: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpofhc0boh_test.go:79:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpofhc0boh_test.go:79:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpofhc0boh_test.go:79:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp14o9w5n2_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp14o9w5n2_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp14o9w5n2_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp14o9w5n2_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp14o9w5n2_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp14o9w5n2_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp14o9w5n2_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074262
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var res []int\n    var i, j int\n\
    \    for {\n        if i == len(lst) {\n            break\n        }\n       \
    \ if lst[i] == min {\n            res = append(res, min)\n            i++\n  \
    \      }\n        if j == len(lst) {\n            break\n        }\n        if\
    \ lst[j] == max {\n            res = append(res, max)\n            j++\n     \
    \   }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074275
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp1y87nsc5_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp1y87nsc5_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp1y87nsc5_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp1y87nsc5_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp1y87nsc5_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ltsgtoo_test.go:25:20: undefined: findMinMax

    /tmp/tmp8ltsgtoo_test.go:30:15: undefined: remove

    /tmp/tmp8ltsgtoo_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    if min == max {\n        return lst\n    }\n    var res\
    \ []int\n    res = append(res, min)\n    for i := 0; i < len(lst); i++ {\n   \
    \     if lst[i] == min {\n            continue\n        }\n        res = append(res,\
    \ lst[i])\n    }\n    res = append(res, max)\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] == max {\n            continue\n        }\n        res\
    \ = append(res, lst[i])\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpachah3ep_test.go:74: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpachah3ep_test.go:74: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpachah3ep_test.go:74: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpachah3ep_test.go:74: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n    \
    \    tmpachah3ep_test.go:74: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpachah3ep_test.go:74:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = find_min_max(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove_min_max(lst, min, max)\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_1y3dfo_test.go:25:20: undefined: find_min_max

    /tmp/tmp4_1y3dfo_test.go:30:15: undefined: remove_min_max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    min, max = lst[0], lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6l1rfev0_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6l1rfev0_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6l1rfev0_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp6l1rfev0_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6l1rfev0_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6l1rfev0_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp6l1rfev0_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    var i int\n    for i = 0; i < len(lst); i++ {\n        if lst[i] ==\
    \ min {\n            break\n        }\n    }\n    lst = append(lst[:i], lst[i+1:]...)\n\
    \    for len(lst) > 0 {\n        if len(lst) == 1 {\n            new_lst = append(new_lst,\
    \ lst[0])\n            break\n        }\n        min = lst[0]\n        max = lst[0]\n\
    \        for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        new_lst = append(new_lst, max)\n        for i =\
    \ 0; i < len(lst); i++ {\n            if lst[i] == max {\n                break\n\
    \            }\n        }\n        lst = append(lst[:i], lst[i+1:]...)\n     \
    \   new_lst = append(new_lst, min)\n        for i = 0; i < len(lst); i++ {\n \
    \           if lst[i] == min {\n                break\n            }\n       \
    \ }\n        lst = append(lst[:i], lst[i+1:]...)\n    }\n    return new_lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for i := 0; i < len(lst); i++ {\n        if\
    \ i == 0 {\n            min = lst[i]\n            max = lst[i]\n        } else\
    \ {\n            if lst[i] < min {\n                min = lst[i]\n           \
    \ }\n            if lst[i] > max {\n                max = lst[i]\n           \
    \ }\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if i % 2 ==\
    \ 0 {\n            result = append(result, min)\n        } else {\n          \
    \  result = append(result, max)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpnvgh0adz_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpnvgh0adz_test.go:68: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpnvgh0adz_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpnvgh0adz_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpnvgh0adz_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpnvgh0adz_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    var min_index, max_index int\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if i == 0 {\n            min = lst[i]\n    \
    \        max = lst[i]\n            min_index = i\n            max_index = i\n\
    \        } else {\n            if lst[i] < min {\n                min = lst[i]\n\
    \                min_index = i\n            }\n            if lst[i] > max {\n\
    \                max = lst[i]\n                max_index = i\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    if min_index == max_index\
    \ {\n        return result\n    }\n    result = append(result, max)\n    var new_lst\
    \ []int\n    for i := 0; i < len(lst); i++ {\n        if i != min_index && i !=\
    \ max_index {\n            new_lst = append(new_lst, lst[i])\n        }\n    }\n\
    \    return append(result, strange_sort_list(new_lst)...)\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpy6r8u1mw_test.go:77: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpy6r8u1mw_test.go:77: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ltsgtoo_test.go:25:20: undefined: findMinMax

    /tmp/tmp8ltsgtoo_test.go:30:15: undefined: remove

    /tmp/tmp8ltsgtoo_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    res :=\
    \ make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if i % 2\
    \ == 0 {\n            res[i] = min(lst)\n        } else {\n            res[i]\
    \ = max(lst)\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl137rwsp_test.go:25:22: undefined: min

    /tmp/tmpl137rwsp_test.go:27:22: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp14o9w5n2_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp14o9w5n2_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp14o9w5n2_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp14o9w5n2_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp14o9w5n2_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp14o9w5n2_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp14o9w5n2_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n       \
    \ return lst\n    }\n    var result []int\n    var min, max int\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if i == 0 {\n            min = lst[i]\n    \
    \        max = lst[i]\n        } else {\n            if lst[i] < min {\n     \
    \           min = lst[i]\n            }\n            if lst[i] > max {\n     \
    \           max = lst[i]\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmprgwk8p74_test.go:77: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmprgwk8p74_test.go:77:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmprgwk8p74_test.go:77: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmprgwk8p74_test.go:77: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmprgwk8p74_test.go:77: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmprgwk8p74_test.go:77:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 1; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpzarvoaz2_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpzarvoaz2_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpzarvoaz2_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpzarvoaz2_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpzarvoaz2_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpzarvoaz2_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpzarvoaz2_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var result []int\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            result = append(result, min)\n \
    \       } else {\n            result = append(result, max)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpio1yl2xs_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpio1yl2xs_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpio1yl2xs_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpio1yl2xs_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpio1yl2xs_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpio1yl2xs_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n           \
    \ continue\n        }\n        res = append(res, lst[i])\n    }\n    res = append(res,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n    \
    \        continue\n        }\n        res = append(res, lst[i])\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpun_xjo1s_test.go:71: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmpun_xjo1s_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpun_xjo1s_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpun_xjo1s_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpun_xjo1s_test.go:71: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpun_xjo1s_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpun_xjo1s_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=-5) %!s(int=-5)]'\nF"
  timestamp: 1660074263
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpwkxo8t8p_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpwkxo8t8p_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpwkxo8t8p_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpwkxo8t8p_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpwkxo8t8p_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpwkxo8t8p_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmppep9tzvx_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmppep9tzvx_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmppep9tzvx_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmppep9tzvx_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmppep9tzvx_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmppep9tzvx_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmppep9tzvx_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074263
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    var min_idx, max_idx int\n    var res []int\n    for len(lst) >\
    \ 0 {\n        min = lst[0]\n        max = lst[0]\n        min_idx = 0\n     \
    \   max_idx = 0\n        for i, v := range lst {\n            if v < min {\n \
    \               min = v\n                min_idx = i\n            }\n        \
    \    if v > max {\n                max = v\n                max_idx = i\n    \
    \        }\n        }\n        res = append(res, min)\n        lst = append(lst[:min_idx],\
    \ lst[min_idx+1:]...)\n        if len(lst) > 0 {\n            res = append(res,\
    \ max)\n            lst = append(lst[:max_idx], lst[max_idx+1:]...)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x5d4270?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpv0mz53hv_test.go:44 +0x387\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpv0mz53hv_test.go:57 +0x77\ntesting.tRunner(0xc0001a01a0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ != min && lst[i] != max {\n            res = append(res, lst[i])\n        }\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpc4p6f_ke_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpc4p6f_ke_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpc4p6f_ke_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpc4p6f_ke_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpc4p6f_ke_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) <= 1 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n   \
    \ return strange_sort_list(lst[1:len(lst)-1])\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170338\
    \ stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.mallocgc(0x50?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc020170348 sp=0xc020170340 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0xc003054078?, 0x0?, 0x0?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201703b0 sp=0xc020170348 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc003054078?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp_jfji4xm_test.go:33 +0xc5 fp=0xc020170418 sp=0xc0201703b0\
    \ pc=0x4ef725\ncommand-line-arguments_test.strange_sort_list({0xc003054070?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp_jfji4xm_test.go:34 +0xfb fp=0xc020170480 sp=0xc020170418\
    \ pc=0x4ef75b\ncommand-line-arguments_test.strange_sort_list({0xc003054068?, 0x0?,\
    \ 0x1000000000000?})\n\t/tmp/tmp_jfji4xm_test.go:34 +0xfb fp=0xc0201704e8 sp=0xc020170480\
    \ pc=0x4ef75b\ncommand-line-arguments_test.strange_sort_list({0xc003054060?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmp_jfji4xm_test.go:34 +0xfb fp=0xc020170550 sp=0xc0201704e8\
    \ pc=0x4ef75b\ncommand-line-arguments_test.strange_sort_list({0xc003054058?, 0xc003054028?,\
    \ 0x0?})\n\t/tmp/tmp_jfji4xm_test.go:34 +0xfb fp=0xc0201705b8 sp=0xc020170550\
    \ pc=0x4ef75b\ncommand-line-arguments_test.strange_sort_list({0xc003054028?, 0x4?,\
    \ 0x41636d?})\n\t/tmp/tmp_jfji4xm_test.go:34 +0xfb fp=0xc020170620 sp=0xc0201705b8\
    \ pc=0x4ef75b\ncommand-line-arguments_test.strange_sort_list({0xc003054020?, 0x40c47e?,\
    \ 0x2b5be2697848?})\n\t/tmp/tmp_jfji4xm_test.go:34 +0xfb fp=0xc020170688 sp=0xc020170620\
    \ pc=0x4ef75b\ncommand-line-arguments_test.strange_sort_list({0xc003054018?, 0x0?,\
    \ 0x1010000000000?})\n\t/tmp/tmp_jfji4xm_test.go:34 +0xfb fp=0xc020"
  timestamp: 1660074265
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58bqxuq0_test.go:25:20: undefined: findMinMax

    /tmp/tmp58bqxuq0_test.go:30:15: undefined: remove

    /tmp/tmp58bqxuq0_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 1; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp28c93q8b_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp28c93q8b_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp28c93q8b_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp28c93q8b_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp28c93q8b_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp28c93q8b_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp28c93q8b_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    var remaining []int\n    for _,\
    \ v := range lst {\n        if v != min && v != max {\n            remaining =\
    \ append(remaining, v)\n        }\n    }\n    return append(result, strange_sort_list(remaining)...)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpb1ixpim3_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n    \
    \    tmpb1ixpim3_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpb1ixpim3_test.go:69:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb1ixpim3_test.go:69:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpb1ixpim3_test.go:69:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var sorted\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        sorted = append(sorted, min)\n        if min != max {\n            sorted\
    \ = append(sorted, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxmlussrb_test.go:25:20: undefined: findMinMax

    /tmp/tmpxmlussrb_test.go:30:15: undefined: remove

    /tmp/tmpxmlussrb_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074261
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return []int{}\n    }\n    if\
    \ len(lst) == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n       \
    \ if lst[0] > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n\
    \        return lst\n    }\n    res := make([]int, len(lst))\n    res[0] = lst[0]\n\
    \    res[len(lst)-1] = lst[len(lst)-1]\n    for i := 1; i < len(lst)-1; i++ {\n\
    \        if i % 2 == 0 {\n            res[i] = lst[len(lst)-1-i/2]\n        }\
    \ else {\n            res[i] = lst[i/2+1]\n        }\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpbowmqlew_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpbowmqlew_test.go:65: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpbowmqlew_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpbowmqlew_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=8) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpbowmqlew_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpbowmqlew_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58bqxuq0_test.go:25:20: undefined: findMinMax

    /tmp/tmp58bqxuq0_test.go:30:15: undefined: remove

    /tmp/tmp58bqxuq0_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n    for _,\
    \ v := range lst {\n        if v < min {\n            min = v\n        }\n   \
    \     if v > max {\n            max = v\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpk5xx9mxa_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpk5xx9mxa_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpk5xx9mxa_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpk5xx9mxa_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpk5xx9mxa_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpk5xx9mxa_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpk5xx9mxa_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ltsgtoo_test.go:25:20: undefined: findMinMax

    /tmp/tmp8ltsgtoo_test.go:30:15: undefined: remove

    /tmp/tmp8ltsgtoo_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    for _, v := range lst {\n    \
    \    if v != min && v != max {\n            new_lst = append(new_lst, v)\n   \
    \     }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpmjgcvzfe_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpmjgcvzfe_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpmjgcvzfe_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpmjgcvzfe_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpmjgcvzfe_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpmjgcvzfe_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpmjgcvzfe_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpvur24lq4_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvur24lq4_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpvur24lq4_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpvur24lq4_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpvur24lq4_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvur24lq4_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpvur24lq4_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    var result []int\n    result = append(result, min)\n   \
    \ result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if\
    \ lst[i] != min && lst[i] != max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpawdi7dx6_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpawdi7dx6_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpawdi7dx6_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpawdi7dx6_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpawdi7dx6_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpawdi7dx6_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpawdi7dx6_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    var lst2 []int\n    var lst3 []int\n    for _, v := range\
    \ lst {\n        if v == min || v == max {\n            lst2 = append(lst2, v)\n\
    \        } else {\n            lst3 = append(lst3, v)\n        }\n    }\n    if\
    \ len(lst2) == len(lst) {\n        return lst\n    }\n    if len(lst2) % 2 ==\
    \ 0 {\n        lst2 = append(lst2, strange_sort_list(lst3)...)\n    } else {\n\
    \        lst2 = append(lst2, strange_sort_list(lst3)[1:]...)\n        lst2 = append(lst2,\
    \ strange_sort_list(lst3)[0])\n    }\n    return lst2\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmppiwep0jk_test.go:74: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=9) %!s(int=1) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmppiwep0jk_test.go:74: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58bqxuq0_test.go:25:20: undefined: findMinMax

    /tmp/tmp58bqxuq0_test.go:30:15: undefined: remove

    /tmp/tmp58bqxuq0_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = minMax(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14d31uos_test.go:25:20: undefined: minMax

    /tmp/tmp14d31uos_test.go:30:15: undefined: remove

    /tmp/tmp14d31uos_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    var lst_min, lst_max []int\n    for _, v := range lst {\n        if\
    \ v != min {\n            if v < max {\n                lst_min = append(lst_min,\
    \ v)\n            } else {\n                lst_max = append(lst_max, v)\n   \
    \         }\n        }\n    }\n    for i := 0; i < len(lst_max); i++ {\n     \
    \   if i % 2 == 0 {\n            new_lst = append(new_lst, lst_max[i])\n     \
    \   } else {\n            new_lst = append(new_lst, lst_min[i])\n        }\n \
    \   }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpv2m4vxrf_test.go:79: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpv2m4vxrf_test.go:79: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpv2m4vxrf_test.go:79: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpv2m4vxrf_test.go:79: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpv2m4vxrf_test.go:79: expected\
    \ '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpv2m4vxrf_test.go:79:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpv2m4vxrf_test.go:79: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for {\n        min, max = min_max(lst)\n  \
    \      result = append(result, min)\n        lst = remove(lst, min)\n        if\
    \ len(lst) == 0 {\n            break\n        }\n        result = append(result,\
    \ max)\n        lst = remove(lst, max)\n        if len(lst) == 0 {\n         \
    \   break\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_oejfr0_test.go:25:20: undefined: min_max

    /tmp/tmp5_oejfr0_test.go:27:15: undefined: remove

    /tmp/tmp5_oejfr0_test.go:32:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for i := 0; i < len(lst); i++ {\n        min\
    \ = lst[0]\n        max = lst[0]\n        for j := 0; j < len(lst); j++ {\n  \
    \          if lst[j] < min {\n                min = lst[j]\n            }\n  \
    \          if lst[j] > max {\n                max = lst[j]\n            }\n  \
    \      }\n        result = append(result, min)\n        result = append(result,\
    \ max)\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n    }\n\
    \    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpye4czbjj_test.go:37:15: undefined: remove

    /tmp/tmpye4czbjj_test.go:38:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    res := []int{lst[0]}\n    lst = lst[1:]\n    for len(lst)\
    \ > 0 {\n        min := lst[0]\n        min_idx := 0\n        max := lst[0]\n\
    \        max_idx := 0\n        for i, v := range lst {\n            if v < min\
    \ {\n                min = v\n                min_idx = i\n            }\n   \
    \         if v > max {\n                max = v\n                max_idx = i\n\
    \            }\n        }\n        if len(lst) % 2 == 0 {\n            res = append(res,\
    \ min)\n            lst = append(lst[:min_idx], lst[min_idx+1:]...)\n        }\
    \ else {\n            res = append(res, max)\n            lst = append(lst[:max_idx],\
    \ lst[max_idx+1:]...)\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpwo1xh163_test.go:80: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpwo1xh163_test.go:80:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpwo1xh163_test.go:80: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=1) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpwo1xh163_test.go:80: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    var result []int\n    var min, max int\n\
    \    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for _, v := range lst {\n        if v != min && v != max {\n     \
    \       result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpdd6u4acu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpdd6u4acu_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpdd6u4acu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpdd6u4acu_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpdd6u4acu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpdd6u4acu_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    if len(lst) == 4 {\n        return []int{lst[0], lst[3],\
    \ lst[1], lst[2]}\n    }\n    if len(lst) == 5 {\n        return []int{lst[0],\
    \ lst[4], lst[1], lst[3], lst[2]}\n    }\n    if len(lst) == 6 {\n        return\
    \ []int{lst[0], lst[5], lst[1], lst[4], lst[2], lst[3]}\n    }\n    if len(lst)\
    \ == 7 {\n        return []int{lst[0], lst[6], lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]}\n    }\n    if len(lst) == 8 {\n        return []int{lst[0], lst[7],\
    \ lst[1], lst[6], lst[2], lst[5], lst[3], lst[4]}\n    }\n    if len(lst) == 9\
    \ {\n        return []int{lst[0], lst[8], lst[1], lst[7], lst[2], lst[6], lst[3],\
    \ lst[5], lst[4]}\n    }\n    if len(lst) == 10 {\n        return []int{lst[0],\
    \ lst[9], lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]}\n  \
    \  }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpe97foklx_test.go:76: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpe97foklx_test.go:76: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp63ec36hc_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp63ec36hc_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp63ec36hc_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp63ec36hc_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp63ec36hc_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp63ec36hc_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp63ec36hc_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074265
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n       \
    \ return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    if min == max {\n        return\
    \ lst\n    }\n    var new_lst []int\n    new_lst = append(new_lst, min)\n    for\
    \ i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            continue\n\
    \        }\n        new_lst = append(new_lst, lst[i])\n    }\n    new_lst = append(new_lst,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n    \
    \        continue\n        }\n        new_lst = append(new_lst, lst[i])\n    }\n\
    \    return strange_sort_list(new_lst)\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074278
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    if min == max {\n        return lst\n    }\n    res := []int{min}\n\
    \    lst = append(lst[:0], lst[1:]...)\n    for len(lst) > 0 {\n        max =\
    \ lst[0]\n        max_i := 0\n        for i, v := range lst {\n            if\
    \ v > max {\n                max = v\n                max_i = i\n            }\n\
    \        }\n        res = append(res, max)\n        lst = append(lst[:max_i],\
    \ lst[max_i+1:]...)\n        min = lst[0]\n        min_i := 0\n        for i,\
    \ v := range lst {\n            if v < min {\n                min = v\n      \
    \          min_i = i\n            }\n        }\n        res = append(res, min)\n\
    \        lst = append(lst[:min_i], lst[min_i+1:]...)\n    }\n    return res\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x4, 0x4})\n\
    \t/tmp/tmpps5l_09d_test.go:48 +0x4c6\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpps5l_09d_test.go:69 +0x77\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    sorted\
    \ := make([]int, len(lst))\n    min := lst[0]\n    max := lst[0]\n    for _, v\
    \ := range lst {\n        if v < min {\n            min = v\n        }\n     \
    \   if v > max {\n            max = v\n        }\n    }\n    sorted[0] = min\n\
    \    sorted[len(lst) - 1] = max\n    for i := 1; i < len(lst) - 1; i++ {\n   \
    \     if i % 2 == 0 {\n            sorted[i] = lst[len(lst) - 1 - i / 2]\n   \
    \     } else {\n            sorted[i] = lst[i / 2 + 1]\n        }\n    }\n   \
    \ return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp3jdsrfn5_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp3jdsrfn5_test.go:66: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp3jdsrfn5_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp3jdsrfn5_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp3jdsrfn5_test.go:66:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp3jdsrfn5_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    // Find\
    \ min and max\n    min, max := lst[0], lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    // Create new list\n    new_lst :=\
    \ make([]int, len(lst))\n    new_lst[0] = min\n    new_lst[len(lst)-1] = max\n\
    \    // Fill the list\n    for i := 1; i < len(lst)-1; i++ {\n        if i % 2\
    \ == 0 {\n            new_lst[i] = max\n        } else {\n            new_lst[i]\
    \ = min\n        }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpiy49u8uk_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpiy49u8uk_test.go:68: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=9) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpiy49u8uk_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpiy49u8uk_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpiy49u8uk_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8)\
    \ %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpiy49u8uk_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            return []int{lst[1], lst[0]}\n        }\n        return\
    \ lst\n    }\n    if len(lst) == 3 {\n        if lst[0] > lst[1] {\n         \
    \   lst[0], lst[1] = lst[1], lst[0]\n        }\n        if lst[1] > lst[2] {\n\
    \            lst[1], lst[2] = lst[2], lst[1]\n        }\n        if lst[0] > lst[1]\
    \ {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    if len(lst) == 4 {\n        if lst[0] > lst[1] {\n            lst[0],\
    \ lst[1] = lst[1], lst[0]\n        }\n        if lst[2] > lst[3] {\n         \
    \   lst[2], lst[3] = lst[3], lst[2]\n        }\n        if lst[0] > lst[2] {\n\
    \            lst[0], lst[2] = lst[2], lst[0]\n        }\n        if lst[1] > lst[3]\
    \ {\n            lst[1], lst[3] = lst[3], lst[1]\n        }\n        if lst[1]\
    \ > lst[2] {\n            lst[1], lst[2] = lst[2], lst[1]\n        }\n       \
    \ return lst\n    }\n    if len(lst) == 5 {\n        if lst[0] > lst[1] {\n  \
    \          lst[0], lst[1] = lst[1], lst[0]\n        }\n        if\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpft1kdn0y_test.go:66:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = min_max(lst)\n\
    \        result = append(result, min)\n        lst = remove(lst, min)\n      \
    \  if len(lst) > 0 {\n            result = append(result, max)\n            lst\
    \ = remove(lst, max)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkh9dybw_test.go:25:20: undefined: min_max

    /tmp/tmppkh9dybw_test.go:27:15: undefined: remove

    /tmp/tmppkh9dybw_test.go:30:19: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = minMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvaghti9i_test.go:25:20: undefined: minMax

    /tmp/tmpvaghti9i_test.go:30:15: undefined: remove

    /tmp/tmpvaghti9i_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    var min_index, max_index int\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if i == 0 {\n            min = lst[i]\n    \
    \        max = lst[i]\n            min_index = i\n            max_index = i\n\
    \        } else {\n            if lst[i] < min {\n                min = lst[i]\n\
    \                min_index = i\n            }\n            if lst[i] > max {\n\
    \                max = lst[i]\n                max_index = i\n            }\n\
    \        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    lst = append(lst[:min_index], lst[min_index+1:]...)\n    lst = append(lst[:max_index-1],\
    \ lst[max_index:]...)\n    if len(lst) == 0 {\n        return result\n    }\n\
    \    if len(lst) == 1 {\n        result = append(result, lst[0])\n        return\
    \ result\n    }\n    return append(result, strange_sort_list(lst)...)\n}\n\nfunc\
    \ TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0001620a0?, 0x4, 0x4})\n\
    \t/tmp/tmprlky6h7n_test.go:45 +0x43c\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmprlky6h7n_test.go:67 +0x1f7\ntesting.tRunner(0xc0001036c0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ltsgtoo_test.go:25:20: undefined: findMinMax

    /tmp/tmp8ltsgtoo_test.go:30:15: undefined: remove

    /tmp/tmp8ltsgtoo_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    for len(lst) > 0 {\n        min := lst[0]\n        max := lst[0]\n\
    \        for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        res = append(res, min)\n        if min != max {\n\
    \            res = append(res, max)\n        }\n        lst = remove(lst, min)\n\
    \        lst = remove(lst, max)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ba8t4cv_test.go:38:15: undefined: remove

    /tmp/tmp2ba8t4cv_test.go:39:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    min, max = lst[0], lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    result = append(result,\
    \ min)\n    for len(lst) > 1 {\n        if lst[0] == min {\n            lst =\
    \ lst[1:]\n        }\n        if lst[len(lst)-1] == max {\n            lst = lst[:len(lst)-1]\n\
    \        }\n        min, max = lst[0], lst[0]\n        for _, v := range lst {\n\
    \            if v < min {\n                min = v\n            }\n          \
    \  if v > max {\n                max = v\n            }\n        }\n        result\
    \ = append(result, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0, 0x4, 0x5e3ea0?})\n\
    \t/tmp/tmp9p3gt0x1_test.go:41 +0x19e\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmp9p3gt0x1_test.go:62 +0x77\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    if len(lst) == 4 {\n        return []int{lst[0], lst[3],\
    \ lst[1], lst[2]}\n    }\n    if len(lst) == 5 {\n        return []int{lst[0],\
    \ lst[4], lst[1], lst[3], lst[2]}\n    }\n    if len(lst) == 6 {\n        return\
    \ []int{lst[0], lst[5], lst[1], lst[4], lst[2], lst[3]}\n    }\n    if len(lst)\
    \ == 7 {\n        return []int{lst[0], lst[6], lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]}\n    }\n    if len(lst) == 8 {\n        return []int{lst[0], lst[7],\
    \ lst[1], lst[6], lst[2], lst[5], lst[3], lst[4]}\n    }\n    if len(lst) == 9\
    \ {\n        return []int{lst[0], lst[8], lst[1], lst[7], lst[2], lst[6], lst[3],\
    \ lst[5], lst[4]}\n    }\n    if len(lst) == 10 {\n        return []int{lst[0],\
    \ lst[9], lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]}\n  \
    \  }\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpmahdaj8k_test.go:76: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpmahdaj8k_test.go:76: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: null
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    var i, j int\n\
    \    for {\n        if i < len(lst) {\n            if lst[i] == min {\n      \
    \          result = append(result, min)\n                i++\n            }\n\
    \        }\n        if j < len(lst) {\n            if lst[j] == max {\n      \
    \          result = append(result, max)\n                j++\n            }\n\
    \        }\n        if i >= len(lst) && j >= len(lst) {\n            break\n \
    \       }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074279
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    min, max = min_max(lst)\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    lst = remove(lst, min)\n    lst = remove(lst,\
    \ max)\n    for len(lst) > 0 {\n        min, max = min_max(lst)\n        res =\
    \ append(res, min)\n        res = append(res, max)\n        lst = remove(lst,\
    \ min)\n        lst = remove(lst, max)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33u2iut7_test.go:24:16: undefined: min_max

    /tmp/tmp33u2iut7_test.go:27:11: undefined: remove

    /tmp/tmp33u2iut7_test.go:28:11: undefined: remove

    /tmp/tmp33u2iut7_test.go:30:20: undefined: min_max

    /tmp/tmp33u2iut7_test.go:33:15: undefined: remove

    /tmp/tmp33u2iut7_test.go:34:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            return []int{lst[1], lst[0]}\n        }\n        return\
    \ lst\n    }\n    if len(lst) == 3 {\n        if lst[0] > lst[1] {\n         \
    \   lst[0], lst[1] = lst[1], lst[0]\n        }\n        if lst[1] > lst[2] {\n\
    \            lst[1], lst[2] = lst[2], lst[1]\n        }\n        if lst[0] > lst[1]\
    \ {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    if len(lst) == 4 {\n        if lst[0] > lst[1] {\n            lst[0],\
    \ lst[1] = lst[1], lst[0]\n        }\n        if lst[2] > lst[3] {\n         \
    \   lst[2], lst[3] = lst[3], lst[2]\n        }\n        if lst[0] > lst[2] {\n\
    \            lst[0], lst[2] = lst[2], lst[0]\n        }\n        if lst[1] > lst[3]\
    \ {\n            lst[1], lst[3] = lst[3], lst[1]\n        }\n        if lst[1]\
    \ > lst[2] {\n            lst[1], lst[2] = lst[2], lst[1]\n        }\n       \
    \ return lst\n    }\n    if len(lst) == 5 {\n        if lst[0] > lst[1] {\n  \
    \          lst[0], lst[1] = lst[1], lst[0]\n        }\n        if\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpft1kdn0y_test.go:66:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var result []int\n    var i, j int\n   \
    \ for i, j = 0, len(lst) - 1; i <= j; i, j = i + 1, j - 1 {\n        result =\
    \ append(result, min)\n        if i != j {\n            result = append(result,\
    \ max)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpxmiatuml_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxmiatuml_test.go:64: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpxmiatuml_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxmiatuml_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxmiatuml_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpxmiatuml_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for i, v := range lst {\n        if i == 0\
    \ {\n            min = v\n            max = v\n        } else {\n            if\
    \ v < min {\n                min = v\n            }\n            if v > max {\n\
    \                max = v\n            }\n        }\n    }\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp10xojvm9_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp10xojvm9_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp10xojvm9_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp10xojvm9_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp10xojvm9_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp10xojvm9_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp10xojvm9_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    var new_lst []int\n    new_lst = append(new_lst, min)\n\
    \    new_lst = append(new_lst, max)\n    for i := 0; i < len(lst); i++ {\n   \
    \     if lst[i] != min && lst[i] != max {\n            new_lst = append(new_lst,\
    \ lst[i])\n        }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpefb329gf_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpefb329gf_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpefb329gf_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpefb329gf_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpefb329gf_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpefb329gf_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpefb329gf_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var new_lst []int\n    for i := 0;\
    \ i < len(lst); i++ {\n        if i % 2 == 0 {\n            new_lst = append(new_lst,\
    \ min)\n        } else {\n            new_lst = append(new_lst, max)\n       \
    \ }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpxlgujasy_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxlgujasy_test.go:68: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpxlgujasy_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxlgujasy_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxlgujasy_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpxlgujasy_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n       \
    \ return lst\n    }\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    var new_lst\
    \ []int\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n\
    \    for _, v := range lst {\n        if v != min && v != max {\n            new_lst\
    \ = append(new_lst, v)\n        }\n    }\n    return strange_sort_list(new_lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201603a8 sp=0xc0201603a0 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0x0?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc020160410 sp=0xc0201603a8 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc0042e0d40?,\
    \ 0x4, 0x44a174?})\n\t/tmp/tmpqa4ysamc_test.go:43 +0xb5 fp=0xc020160490 sp=0xc020160410\
    \ pc=0x4ef715\ncommand-line-arguments_test.strange_sort_list({0xc0042e0d20?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpqa4ysamc_test.go:50 +0x197 fp=0xc020160510 sp=0xc020160490\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042e0d00?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpqa4ysamc_test.go:50 +0x197 fp=0xc020160590 sp=0xc020160510\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042e0ce0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpqa4ysamc_test.go:50 +0x197 fp=0xc020160610 sp=0xc020160590\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042e0cc0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpqa4ysamc_test.go:50 +0x197 fp=0xc020160690 sp=0xc020160610\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042e0ca0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpqa4ysamc_test.go:50 +0x197 fp=0xc020160710 sp=0xc020160690\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042e0c80?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpqa4ysamc_test.go:50 +0x197 fp=0xc020160790 sp=0xc020160710\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042e0c60?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpqa4ysamc_test.go:50 +0x197 fp=0xc020160810 sp=0xc020160"
  timestamp: 1660074268
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58bqxuq0_test.go:25:20: undefined: findMinMax

    /tmp/tmp58bqxuq0_test.go:30:15: undefined: remove

    /tmp/tmp58bqxuq0_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    // PATCH\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpz_1kgqzp_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpz_1kgqzp_test.go:44: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpz_1kgqzp_test.go:44: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpz_1kgqzp_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpz_1kgqzp_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpz_1kgqzp_test.go:44: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58bqxuq0_test.go:25:20: undefined: findMinMax

    /tmp/tmp58bqxuq0_test.go:30:15: undefined: remove

    /tmp/tmp58bqxuq0_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    var result []int\n    var min, max int\n    min = lst[0]\n\
    \    max = lst[0]\n    for _, v := range lst {\n        if v > max {\n       \
    \     max = v\n        }\n        if v < min {\n            min = v\n        }\n\
    \    }\n    result = append(result, min)\n    result = append(result, max)\n \
    \   for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i] != max\
    \ {\n            result = append(result, lst[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp_tq6jeb8_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp_tq6jeb8_test.go:71:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp_tq6jeb8_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp_tq6jeb8_test.go:71: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp_tq6jeb8_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp_tq6jeb8_test.go:71:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for i := 0; i < len(lst); i++ {\n        if\
    \ i == 0 {\n            min = lst[i]\n            max = lst[i]\n        } else\
    \ {\n            if lst[i] < min {\n                min = lst[i]\n           \
    \ }\n            if lst[i] > max {\n                max = lst[i]\n           \
    \ }\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6h1oj6y0_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6h1oj6y0_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6h1oj6y0_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp6h1oj6y0_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6h1oj6y0_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6h1oj6y0_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp6h1oj6y0_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n    for _,\
    \ v := range lst {\n        if v < min {\n            min = v\n        }\n   \
    \     if v > max {\n            max = v\n        }\n    }\n    result = append(result,\
    \ min)\n    for len(lst) > 1 {\n        if min == max {\n            break\n \
    \       }\n        min = lst[0]\n        max = lst[0]\n        for _, v := range\
    \ lst {\n            if v < min {\n                min = v\n            }\n  \
    \          if v > max {\n                max = v\n            }\n        }\n \
    \       result = append(result, max)\n        lst = remove(lst, max)\n       \
    \ min = lst[0]\n        max = lst[0]\n        for _, v := range lst {\n      \
    \      if v < min {\n                min = v\n            }\n            if v\
    \ > max {\n                max = v\n            }\n        }\n        result =\
    \ append(result, min)\n        lst = remove(lst, min)\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_fog3zm_test.go:50:15: undefined: remove

    /tmp/tmp7_fog3zm_test.go:62:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    var result []int\n    result = append(result, min)\n   \
    \ result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n        if\
    \ lst[i] != min && lst[i] != max {\n            result = append(result, lst[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpawdi7dx6_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpawdi7dx6_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpawdi7dx6_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpawdi7dx6_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpawdi7dx6_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpawdi7dx6_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpawdi7dx6_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    min, max = lst[0], lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    var min_index, max_index int\n \
    \   for i, v := range lst {\n        if v == min {\n            min_index = i\n\
    \        }\n        if v == max {\n            max_index = i\n        }\n    }\n\
    \    var lst_min, lst_max []int\n    for i, v := range lst {\n        if i !=\
    \ min_index && i != max_index {\n            lst_min = append(lst_min, v)\n  \
    \      }\n    }\n    for i, v := range lst {\n        if i != min_index && i !=\
    \ max_index {\n            lst_max = append(lst_max, v)\n        }\n    }\n  \
    \  for i := 0; i < len(lst_min); i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, lst_min[i])\n        } else {\n            result = append(result,\
    \ lst_max[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpxdn37wql_test.go:86: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxdn37wql_test.go:86:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpxdn37wql_test.go:86: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpxdn37wql_test.go:86: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxdn37wql_test.go:86: expected\
    \ '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4)\
    \ %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpxdn37wql_test.go:86: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxdn37wql_test.go:86:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] != min {\n           \
    \ res = append(res, lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] != max {\n            res = append(res, lst[i])\n     \
    \   }\n    }\n    res = append(res, max)\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp_40xj9cg_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n\
    \        tmp_40xj9cg_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8)\
    \ %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp_40xj9cg_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp_40xj9cg_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1)\
    \ %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp_40xj9cg_test.go:69: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp_40xj9cg_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp_40xj9cg_test.go:69:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=-5) %!s(int=-5) %!s(int=5)]'\n "
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    min, max = lst[0], lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6l1rfev0_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6l1rfev0_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6l1rfev0_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp6l1rfev0_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6l1rfev0_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6l1rfev0_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp6l1rfev0_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    var min_index, max_index int\n    var result []int\n    for len(lst)\
    \ > 0 {\n        min, max = lst[0], lst[0]\n        min_index, max_index = 0,\
    \ 0\n        for i, v := range lst {\n            if v < min {\n             \
    \   min = v\n                min_index = i\n            }\n            if v >\
    \ max {\n                max = v\n                max_index = i\n            }\n\
    \        }\n        result = append(result, min)\n        lst = append(lst[:min_index],\
    \ lst[min_index+1:]...)\n        if len(lst) > 0 {\n            result = append(result,\
    \ max)\n            lst = append(lst[:max_index], lst[max_index+1:]...)\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x5d4270?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpaqabmb8h_test.go:42 +0x387\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpaqabmb8h_test.go:55 +0x77\ntesting.tRunner(0xc0001924e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    var min_idx, max_idx int\n    for i, v := range lst {\n       \
    \ if i == 0 {\n            min = v\n            max = v\n            min_idx =\
    \ 0\n            max_idx = 0\n        } else {\n            if v < min {\n   \
    \             min = v\n                min_idx = i\n            }\n          \
    \  if v > max {\n                max = v\n                max_idx = i\n      \
    \      }\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    var new_lst_idx int\n    new_lst_idx\
    \ = 2\n    for i := 0; i < len(lst); i++ {\n        if i == min_idx || i == max_idx\
    \ {\n            continue\n        }\n        new_lst = append(new_lst, lst[i])\n\
    \        new_lst_idx++\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp2qfrfnu4_test.go:77: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp2qfrfnu4_test.go:77:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp2qfrfnu4_test.go:77: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp2qfrfnu4_test.go:77: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp2qfrfnu4_test.go:77: expected\
    \ '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4)\
    \ %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmp2qfrfnu4_test.go:77: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp2qfrfnu4_test.go:77:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    min = lst[0]\n    max = lst[0]\n    for _,\
    \ v := range lst {\n        if v < min {\n            min = v\n        }\n   \
    \     if v > max {\n            max = v\n        }\n    }\n    var min_index,\
    \ max_index int\n    for i, v := range lst {\n        if v == min {\n        \
    \    min_index = i\n        }\n        if v == max {\n            max_index =\
    \ i\n        }\n    }\n    var min_list, max_list []int\n    for i, v := range\
    \ lst {\n        if i != min_index && i != max_index {\n            min_list =\
    \ append(min_list, v)\n        }\n    }\n    for i, v := range lst {\n       \
    \ if i != min_index && i != max_index {\n            max_list = append(max_list,\
    \ v)\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 0; i < len(min_list); i++ {\n        result = append(result,\
    \ min_list[i])\n        result = append(result, max_list[i])\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp7teib6an_test.go:84: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp7teib6an_test.go:84:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp7teib6an_test.go:84:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp7teib6an_test.go:84:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7)\
    \ %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmp7teib6an_test.go:84: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmp7teib6an_test.go:84: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5)\
    \ %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp7teib6an_test.go:84: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num_"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min,\
    \ max := lst[0], lst[0]\n    for _, v := range lst {\n        if v < min {\n \
    \           min = v\n        }\n        if v > max {\n            max = v\n  \
    \      }\n    }\n    if min == max {\n        return lst\n    }\n    res := []int{min}\n\
    \    for len(lst) > 0 {\n        if len(lst) == 1 {\n            res = append(res,\
    \ lst[0])\n            break\n        }\n        res = append(res, max)\n    \
    \    res = append(res, min)\n        lst = lst[1:]\n        lst = lst[:len(lst)-1]\n\
    \        if len(lst) == 0 {\n            break\n        }\n        min, max =\
    \ lst[0], lst[0]\n        for _, v := range lst {\n            if v < min {\n\
    \                min = v\n            }\n            if v > max {\n          \
    \      max = v\n            }\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpfdmv7atd_test.go:81: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=3) %!s(int=2)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpfdmv7atd_test.go:81:\
    \ expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpfdmv7atd_test.go:81: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n    \
    \    tmpfdmv7atd_test.go:81: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmpfdmv7atd_test.go:81: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=7) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=5) %!s(int=4)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpfdmv7atd_test.go:81:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        min := lst[i]\n        min_index := i\n \
    \       max := lst[i]\n        max_index := i\n        for j := i + 1; j < len(lst);\
    \ j++ {\n            if lst[j] < min {\n                min = lst[j]\n       \
    \         min_index = j\n            }\n            if lst[j] > max {\n      \
    \          max = lst[j]\n                max_index = j\n            }\n      \
    \  }\n        if min_index != i {\n            lst[i], lst[min_index] = lst[min_index],\
    \ lst[i]\n        }\n        if max_index != i {\n            lst[i], lst[max_index]\
    \ = lst[max_index], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpe8stbdjy_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpe8stbdjy_test.go:68: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpe8stbdjy_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpe8stbdjy_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=8) %!s(int=1) %!s(int=5) %!s(int=7) %!s(int=6)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpe8stbdjy_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4)\
    \ %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpe8stbdjy_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for i := 0; i < len(lst); i++ {\n        if\
    \ i == 0 {\n            min = lst[i]\n            max = lst[i]\n        } else\
    \ {\n            if lst[i] < min {\n                min = lst[i]\n           \
    \ }\n            if lst[i] > max {\n                max = lst[i]\n           \
    \ }\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            result = append(result, lst[i])\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp6h1oj6y0_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6h1oj6y0_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp6h1oj6y0_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp6h1oj6y0_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp6h1oj6y0_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6h1oj6y0_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp6h1oj6y0_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074266
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpxbk3sn7f_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbk3sn7f_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpxbk3sn7f_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpxbk3sn7f_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpxbk3sn7f_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbk3sn7f_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpxbk3sn7f_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    var new_lst []int\n    var min_index int\n    var max_index\
    \ int\n    min_index = 0\n    max_index = len(lst) - 1\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 0 {\n            new_lst = append(new_lst, lst[min_index])\n\
    \            min_index++\n        } else {\n            new_lst = append(new_lst,\
    \ lst[max_index])\n            max_index--\n        }\n    }\n    return new_lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp272ra4an_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmp272ra4an_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n       \
    \ return lst\n    }\n    for i := 0; i < len(lst); i++ {\n        if i % 2 ==\
    \ 0 {\n            min := lst[i]\n            min_index := i\n            for\
    \ j := i; j < len(lst); j++ {\n                if lst[j] < min {\n           \
    \         min = lst[j]\n                    min_index = j\n                }\n\
    \            }\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n\
    \        } else {\n            max := lst[i]\n            max_index := i\n   \
    \         for j := i; j < len(lst); j++ {\n                if lst[j] > max {\n\
    \                    max = lst[j]\n                    max_index = j\n       \
    \         }\n            }\n            lst[i], lst[max_index] = lst[max_index],\
    \ lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var result []int\n    var i int\n    for\
    \ i = 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ min)\n        } else {\n            result = append(result, max)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp5_cyv7oq_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp5_cyv7oq_test.go:65: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp5_cyv7oq_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp5_cyv7oq_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp5_cyv7oq_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)\
    \ %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp5_cyv7oq_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            return []int{lst[1], lst[0]}\n        }\n        return\
    \ lst\n    }\n    if len(lst) == 3 {\n        if lst[0] > lst[1] {\n         \
    \   lst[0], lst[1] = lst[1], lst[0]\n        }\n        if lst[1] > lst[2] {\n\
    \            lst[1], lst[2] = lst[2], lst[1]\n        }\n        if lst[0] > lst[1]\
    \ {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    if len(lst) == 4 {\n        if lst[0] > lst[1] {\n            lst[0],\
    \ lst[1] = lst[1], lst[0]\n        }\n        if lst[2] > lst[3] {\n         \
    \   lst[2], lst[3] = lst[3], lst[2]\n        }\n        if lst[0] > lst[2] {\n\
    \            lst[0], lst[2] = lst[2], lst[0]\n        }\n        if lst[1] > lst[3]\
    \ {\n            lst[1], lst[3] = lst[3], lst[1]\n        }\n        if lst[1]\
    \ > lst[2] {\n            lst[1], lst[2] = lst[2], lst[1]\n        }\n       \
    \ return lst\n    }\n    if len(lst) == 5 {\n        if lst[0] > lst[1] {\n  \
    \          lst[0], lst[1] = lst[1], lst[0]\n        }\n        if\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpft1kdn0y_test.go:66:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    min, max = find_min_max(lst)\n    result =\
    \ append(result, min)\n    result = append(result, max)\n    for i := 0; i < len(lst)\
    \ - 2; i++ {\n        min, max = find_min_max(lst)\n        result = append(result,\
    \ min)\n        result = append(result, max)\n    }\n    return result\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnvoh44i_test.go:24:16: undefined: find_min_max

    /tmp/tmppnvoh44i_test.go:28:20: undefined: find_min_max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var i,\
    \ j int\n    for i = 0; i < len(lst); i++ {\n        for j = i + 1; j < len(lst);\
    \ j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j],\
    \ lst[i]\n            }\n        }\n    }\n    var result []int\n    for i = 0;\
    \ i < len(lst); i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ lst[i])\n        } else {\n            result = append([]int{lst[i]}, result...)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpgj8gpgd4_test.go:62: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpgj8gpgd4_test.go:62: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=8)\
    \ %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmpgj8gpgd4_test.go:62: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpgj8gpgd4_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=7) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpgj8gpgd4_test.go:62:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=6) %!s(int=4) %!s(int=2) %!s(int=1)\
    \ %!s(int=3) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpgj8gpgd4_test.go:62: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=2)\
    \ %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        result = append(result, min)\n        if len(lst) > 1 {\n           \
    \ result = append(result, max)\n        }\n        lst = remove(lst, min)\n  \
    \      lst = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4cel4tej_test.go:25:20: undefined: findMinMax

    /tmp/tmp4cel4tej_test.go:30:15: undefined: remove

    /tmp/tmp4cel4tej_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = lst[0],\
    \ lst[0]\n        for _, v := range lst {\n            if v < min {\n        \
    \        min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        res = append(res, min)\n        res =\
    \ append(res, max)\n        lst = remove(lst, min)\n        lst = remove(lst,\
    \ max)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n\
    \  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1n86y1az_test.go:36:15: undefined: remove

    /tmp/tmp1n86y1az_test.go:37:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    if len(lst) == 4 {\n        return []int{lst[0], lst[3],\
    \ lst[1], lst[2]}\n    }\n    if len(lst) == 5 {\n        return []int{lst[0],\
    \ lst[4], lst[1], lst[3], lst[2]}\n    }\n    if len(lst) == 6 {\n        return\
    \ []int{lst[0], lst[5], lst[1], lst[4], lst[2], lst[3]}\n    }\n    if len(lst)\
    \ == 7 {\n        return []int{lst[0], lst[6], lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]}\n    }\n    if len(lst) == 8 {\n        return []int{lst[0], lst[7],\
    \ lst[1], lst[6], lst[2], lst[5], lst[3], lst[4]}\n    }\n    if len(lst) == 9\
    \ {\n        return []int{lst[0], lst[8], lst[1], lst[7], lst[2], lst[6], lst[3],\
    \ lst[5], lst[4]}\n    }\n    if len(lst) == 10 {\n        return []int{lst[0],\
    \ lst[9], lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]}\n  \
    \  }\n    return []int{}\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpmahdaj8k_test.go:76: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=1) %!s(int=6) %!s(int=9)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpmahdaj8k_test.go:76: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=2) %!s(int=5)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = removeMinMax(lst, min, max)\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbj81523q_test.go:25:20: undefined: findMinMax

    /tmp/tmpbj81523q_test.go:30:15: undefined: removeMinMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    res :=\
    \ make([]int, len(lst))\n    min := lst[0]\n    max := lst[0]\n    for _, v :=\
    \ range lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    res[0] = min\n    res[len(lst)\
    \ - 1] = max\n    if len(lst) == 2 {\n        return res\n    }\n    return append(res,\
    \ strange_sort_list(lst[1:len(lst) - 1])...)\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0000243a0?, 0x1, 0x3})\n\
    \t/tmp/tmppp7sz_5q_test.go:38 +0x15d\ncommand-line-arguments_test.strange_sort_list({0xc000024398?,\
    \ 0x3, 0x4})\n\t/tmp/tmppp7sz_5q_test.go:38 +0xba\ncommand-line-arguments_test.strange_sort_list({0xc000024390?,\
    \ 0x5, 0x5})\n\t/tmp/tmppp7sz_5q_test.go:38 +0xba\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmppp7sz_5q_test.go:49 +0xd7\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n       \
    \ return lst\n    }\n    var min, max int\n    min, max = lst[0], lst[0]\n   \
    \ for _, v := range lst {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n    var new_lst\
    \ []int\n    new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n\
    \    for _, v := range lst {\n        if v != min && v != max {\n            new_lst\
    \ = append(new_lst, v)\n        }\n    }\n    return strange_sort_list(new_lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.mallocgc(0x8?, 0x0?, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:909\
    \ +0x91d fp=0xc0201603a8 sp=0xc0201603a0 pc=0x40cf1d\nruntime.growslice(0x0?,\
    \ {0x0?, 0x44a174?, 0x20?}, 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc020160410 sp=0xc0201603a8 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc0042f4c00?,\
    \ 0x4, 0x44a174?})\n\t/tmp/tmpmvpuhrye_test.go:42 +0xb5 fp=0xc020160490 sp=0xc020160410\
    \ pc=0x4ef715\ncommand-line-arguments_test.strange_sort_list({0xc0042f4be0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpmvpuhrye_test.go:49 +0x197 fp=0xc020160510 sp=0xc020160490\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042f4bc0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpmvpuhrye_test.go:49 +0x197 fp=0xc020160590 sp=0xc020160510\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042f4ba0?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpmvpuhrye_test.go:49 +0x197 fp=0xc020160610 sp=0xc020160590\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042f4b80?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpmvpuhrye_test.go:49 +0x197 fp=0xc020160690 sp=0xc020160610\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042f4b60?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpmvpuhrye_test.go:49 +0x197 fp=0xc020160710 sp=0xc020160690\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042f4b40?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpmvpuhrye_test.go:49 +0x197 fp=0xc020160790 sp=0xc020160710\
    \ pc=0x4ef7f7\ncommand-line-arguments_test.strange_sort_list({0xc0042f4b20?, 0x4,\
    \ 0x44a174?})\n\t/tmp/tmpmvpuhrye_test.go:49 +0x197 fp=0xc020160810 sp=0xc020160"
  timestamp: 1660074270
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var new_lst\
    \ []int\n    var min_index int\n    var max_index int\n    for len(lst) > 0 {\n\
    \        min_index = 0\n        max_index = 0\n        for i, v := range lst {\n\
    \            if v < lst[min_index] {\n                min_index = i\n        \
    \    }\n            if v > lst[max_index] {\n                max_index = i\n \
    \           }\n        }\n        new_lst = append(new_lst, lst[min_index])\n\
    \        lst = append(lst[:min_index], lst[min_index+1:]...)\n        if len(lst)\
    \ > 0 {\n            new_lst = append(new_lst, lst[max_index])\n            lst\
    \ = append(lst[:max_index], lst[max_index+1:]...)\n        }\n    }\n    return\
    \ new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out\
    \ of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of\
    \ range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc00001a2e0?, 0x5d4290?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpl8zmkax7_test.go:39 +0x3ae\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpl8zmkax7_test.go:53 +0x77\ntesting.tRunner(0xc0001a0340, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = findMinMax(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ltsgtoo_test.go:25:20: undefined: findMinMax

    /tmp/tmp8ltsgtoo_test.go:30:15: undefined: remove

    /tmp/tmp8ltsgtoo_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074257
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        return []int{lst[0],\
    \ lst[1]}\n    }\n    if len(lst) == 3 {\n        return []int{lst[0], lst[2],\
    \ lst[1]}\n    }\n    if len(lst) == 4 {\n        return []int{lst[0], lst[3],\
    \ lst[1], lst[2]}\n    }\n    if len(lst) == 5 {\n        return []int{lst[0],\
    \ lst[4], lst[1], lst[3], lst[2]}\n    }\n    if len(lst) == 6 {\n        return\
    \ []int{lst[0], lst[5], lst[1], lst[4], lst[2], lst[3]}\n    }\n    if len(lst)\
    \ == 7 {\n        return []int{lst[0], lst[6], lst[1], lst[5], lst[2], lst[4],\
    \ lst[3]}\n    }\n    if len(lst) == 8 {\n        return []int{lst[0], lst[7],\
    \ lst[1], lst[6], lst[2], lst[5], lst[3], lst[4]}\n    }\n    if len(lst) == 9\
    \ {\n        return []int{lst[0], lst[8], lst[1], lst[7], lst[2], lst[6], lst[3],\
    \ lst[5], lst[4]}\n    }\n    if len(lst) == 10 {\n        return []int{lst[0],\
    \ lst[9], lst[1], lst[8], lst[2], lst[7], lst[3], lst[6], lst[4], lst[5]}\n  \
    \  }\n    if len(lst) == 11 {\n        return []int{lst[0], lst\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpci5gk8p__test.go:53:33: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074267
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 1; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpvur24lq4_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvur24lq4_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpvur24lq4_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmpvur24lq4_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpvur24lq4_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvur24lq4_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmpvur24lq4_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074264
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    sorted\
    \ := make([]int, len(lst))\n    sorted[0] = lst[0]\n    lst = lst[1:]\n    for\
    \ i := 1; i < len(sorted); i++ {\n        if i % 2 == 1 {\n            sorted[i]\
    \ = max(lst)\n        } else {\n            sorted[i] = min(lst)\n        }\n\
    \    }\n    return sorted\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy6mhloeq_test.go:27:25: undefined: max

    /tmp/tmpy6mhloeq_test.go:29:25: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    var res []int\n    res = append(res, min)\n    res = append(res,\
    \ max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] != min && lst[i]\
    \ != max {\n            res = append(res, lst[i])\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp63ec36hc_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp63ec36hc_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp63ec36hc_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n    \
    \    tmp63ec36hc_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp63ec36hc_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp63ec36hc_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp63ec36hc_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074265
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = lst[0],\
    \ lst[0]\n        for _, v := range lst {\n            if v < min {\n        \
    \        min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        res = append(res, min)\n        if min\
    \ != max {\n            res = append(res, max)\n        }\n        lst = remove(lst,\
    \ min)\n        lst = remove(lst, max)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgrvrib_g_test.go:38:15: undefined: remove

    /tmp/tmpgrvrib_g_test.go:39:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    var min_index, max_index int\n    for i, v := range lst {\n   \
    \     if v > max {\n            max = v\n            max_index = i\n        }\n\
    \        if v < min {\n            min = v\n            min_index = i\n      \
    \  }\n    }\n    lst[min_index] = max\n    lst[max_index] = min\n    return lst\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmplufjc5dq_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmplufjc5dq_test.go:60: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmplufjc5dq_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmplufjc5dq_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmplufjc5dq_test.go:60:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=0) %!s(int=5)\
    \ %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n\
    \        tmplufjc5dq_test.go:60: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7)\
    \ %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmplufjc5dq_test.go:60: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=5) %!s(int=5) %!s(int=-5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmplufjc5dq_test.go:60:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            min := lst[i]\n\
    \            min_index := i\n            for j := i; j < len(lst); j++ {\n   \
    \             if lst[j] < min {\n                    min = lst[j]\n          \
    \          min_index = j\n                }\n            }\n            lst[i],\
    \ lst[min_index] = lst[min_index], lst[i]\n        } else {\n            max :=\
    \ lst[i]\n            max_index := i\n            for j := i; j < len(lst); j++\
    \ {\n                if lst[j] > max {\n                    max = lst[j]\n   \
    \                 max_index = j\n                }\n            }\n          \
    \  lst[i], lst[max_index] = lst[max_index], lst[i]\n        }\n    }\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074260
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n       \
    \ return lst\n    }\n    // find min and max\n    min, max := lst[0], lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    // remove\
    \ min and max\n    lst = append(lst[:0], lst[1:]...)\n    lst = append(lst[:len(lst)-1],\
    \ lst[len(lst):]...)\n    // sort\n    for i := 0; i < len(lst); i++ {\n     \
    \   if i % 2 == 0 {\n            lst[i] = min\n            min++\n        } else\
    \ {\n            lst[i] = max\n            max--\n        }\n    }\n    return\
    \ lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpplcudktf_test.go:78: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpplcudktf_test.go:78: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpplcudktf_test.go:78: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmpplcudktf_test.go:78: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=2) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpplcudktf_test.go:78:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpplcudktf_test.go:78:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3)\
    \ %!s(int=6)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n    \
    \    tmpplcudktf_test.go:78: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5)\
    \ %!s(int=-4) %!s(int=4) %!s(int=-3) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    for len(lst) > 0 {\n        min, max := find_min_max(lst)\n     \
    \   result = append(result, min)\n        if max != min {\n            result\
    \ = append(result, max)\n        }\n        lst = remove_min_max(lst, min, max)\n\
    \    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9snk4lu_test.go:24:21: undefined: find_min_max

    /tmp/tmpd9snk4lu_test.go:29:15: undefined: remove_min_max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    for i, v := range lst {\n    \
    \    if i == 0 || i == 1 {\n            continue\n        }\n        if v == min\
    \ || v == max {\n            continue\n        }\n        new_lst = append(new_lst,\
    \ v)\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmpa87nxxj0_test.go:72: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpa87nxxj0_test.go:72: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpa87nxxj0_test.go:72:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpa87nxxj0_test.go:72: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpa87nxxj0_test.go:72:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpa87nxxj0_test.go:72:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n\
    \        tmpa87nxxj0_test.go:72: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8\
    \ (0.00s)\n        tmpa87nxxj0_test.go:72: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074262
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    var result []int\n    var min, max int\n\
    \    for len(lst) > 0 {\n        min, max = find_min_max(lst)\n        result\
    \ = append(result, min)\n        if min != max {\n            result = append(result,\
    \ max)\n        }\n        lst = remove_min_max(lst, min, max)\n    }\n    return\
    \ result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx0agd_xw_test.go:28:20: undefined: find_min_max

    /tmp/tmpx0agd_xw_test.go:33:15: undefined: remove_min_max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) < 2 {\n        return lst\n    }\n    if len(lst)\
    \ == 2 {\n        if lst[0] > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n\
    \        }\n        return lst\n    }\n    var min, max int\n    var min_i, max_i\
    \ int\n    for i, v := range lst {\n        if i == 0 {\n            min = v\n\
    \            max = v\n            min_i = i\n            max_i = i\n        }\
    \ else {\n            if v < min {\n                min = v\n                min_i\
    \ = i\n            }\n            if v > max {\n                max = v\n    \
    \            max_i = i\n            }\n        }\n    }\n    var new_lst []int\n\
    \    new_lst = append(new_lst, min)\n    new_lst = append(new_lst, max)\n    for\
    \ i, v := range lst {\n        if i != min_i && i != max_i {\n            new_lst\
    \ = append(new_lst, v)\n        }\n    }\n    return strange_sort_list(new_lst)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.(*mcache).nextFree(0x2ab449734108?,\
    \ 0x9?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:876 +0x205\
    \ fp=0xc0201e0398 sp=0xc0201e0390 pc=0x40c5e5\nruntime.mallocgc(0x20, 0x0, 0x0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1085 +0x4e5 fp=0xc0201e0410\
    \ sp=0xc0201e0398 pc=0x40cae5\nruntime.growslice(0xc0000c6800?, {0xc007f7a2b0?,\
    \ 0x0?, 0x0?}, 0xc0201e0500?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:272\
    \ +0x4ac fp=0xc0201e0478 sp=0xc0201e0410 pc=0x44a0ec\ncommand-line-arguments_test.strange_sort_list({0xc007f79fe0?,\
    \ 0x4, 0x0?})\n\t/tmp/tmpuq1zzffs_test.go:52 +0x1b5 fp=0xc0201e0510 sp=0xc0201e0478\
    \ pc=0x4ef815\ncommand-line-arguments_test.strange_sort_list({0xc007f79fc0?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpuq1zzffs_test.go:55 +0x1f8 fp=0xc0201e05a8 sp=0xc0201e0510\
    \ pc=0x4ef858\ncommand-line-arguments_test.strange_sort_list({0xc007f79fa0?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpuq1zzffs_test.go:55 +0x1f8 fp=0xc0201e0640 sp=0xc0201e05a8\
    \ pc=0x4ef858\ncommand-line-arguments_test.strange_sort_list({0xc007f79f80?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpuq1zzffs_test.go:55 +0x1f8 fp=0xc0201e06d8 sp=0xc0201e0640\
    \ pc=0x4ef858\ncommand-line-arguments_test.strange_sort_list({0xc007f79f60?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpuq1zzffs_test.go:55 +0x1f8 fp=0xc0201e0770 sp=0xc0201e06d8\
    \ pc=0x4ef858\ncommand-line-arguments_test.strange_sort_list({0xc007f79f40?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpuq1zzffs_test.go:55 +0x1f8 fp=0xc0201e0808 sp=0xc0201e0770\
    \ pc=0x4ef858\ncommand-line-arguments_test.strange_sort_list({0xc007f79f20?, 0x4,\
    \ 0x0?})\n\t/tmp/tmpuq1zzffs_test.go:55 +0x1f8 fp=0xc0201e08a0 sp=0xc0201e0808\
    \ pc=0x"
  timestamp: 1660074271
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = min_max(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7kw4i1pl_test.go:25:20: undefined: min_max

    /tmp/tmp7kw4i1pl_test.go:30:15: undefined: remove

    /tmp/tmp7kw4i1pl_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            return []int{lst[1], lst[0]}\n        }\n        return\
    \ lst\n    }\n    // find min and max\n    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    // remove\
    \ min and max\n    var new_lst []int\n    for _, v := range lst {\n        if\
    \ v != min && v != max {\n            new_lst = append(new_lst, v)\n        }\n\
    \    }\n    // recursion\n    return append([]int{min, max}, strange_sort_list(new_lst)...)\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__4\
    \ (0.00s)\n        tmpw8mg76kf_test.go:74: expected '[%!s(int=5) %!s(int=5) %!s(int=5)\
    \ %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmpw8mg76kf_test.go:74: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074269
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = min_max(lst)\n\
    \        result = append(result, min)\n        if min != max {\n            result\
    \ = append(result, max)\n        }\n        lst = remove(lst, min)\n        lst\
    \ = remove(lst, max)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp76jv8cbu_test.go:25:20: undefined: min_max

    /tmp/tmp76jv8cbu_test.go:30:15: undefined: remove

    /tmp/tmp76jv8cbu_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            return []int{lst[1], lst[0]}\n        }\n        return\
    \ lst\n    }\n    if len(lst) == 3 {\n        if lst[0] > lst[1] {\n         \
    \   lst[0], lst[1] = lst[1], lst[0]\n        }\n        if lst[1] > lst[2] {\n\
    \            lst[1], lst[2] = lst[2], lst[1]\n        }\n        if lst[0] > lst[1]\
    \ {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n        return lst\n\
    \    }\n    if len(lst) == 4 {\n        if lst[0] > lst[1] {\n            lst[0],\
    \ lst[1] = lst[1], lst[0]\n        }\n        if lst[2] > lst[3] {\n         \
    \   lst[2], lst[3] = lst[3], lst[2]\n        }\n        if lst[0] > lst[2] {\n\
    \            lst[0], lst[2] = lst[2], lst[0]\n        }\n        if lst[1] > lst[3]\
    \ {\n            lst[1], lst[3] = lst[3], lst[1]\n        }\n        if lst[1]\
    \ > lst[2] {\n            lst[1], lst[2] = lst[2], lst[1]\n        }\n       \
    \ return lst\n    }\n    if len(lst) == 5 {\n        if lst[0] > lst[1] {\n  \
    \          lst[0], lst[1] = lst[1], lst[0]\n        }\n        if\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpft1kdn0y_test.go:66:6: expected ''('', found TestStrange_Sort_List

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074259
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min\
    \ int\n    var max int\n    var min_idx int\n    var max_idx int\n    var idx\
    \ int\n    var result []int\n    var lst_len int\n    lst_len = len(lst)\n   \
    \ for i := 0; i < lst_len; i++ {\n        min = lst[0]\n        max = lst[0]\n\
    \        min_idx = 0\n        max_idx = 0\n        for idx, val := range lst {\n\
    \            if val < min {\n                min = val\n                min_idx\
    \ = idx\n            }\n            if val > max {\n                max = val\n\
    \                max_idx = idx\n            }\n        }\n        result = append(result,\
    \ min)\n        lst = append(lst[:min_idx], lst[min_idx+1:]...)\n        if len(lst)\
    \ == 0 {\n            break\n        }\n        result = append(result, max)\n\
    \        lst = append(lst[:max_idx], lst[max_idx+1:]...)\n    }\n    return result\n\
    }\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgffq43zs_test.go:26:9: idx declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    var min, max int\n    min = lst[0]\n\
    \    max = lst[0]\n    for _, v := range lst {\n        if v < min {\n       \
    \     min = v\n        }\n        if v > max {\n            max = v\n        }\n\
    \    }\n    var res []int\n    res = append(res, min)\n    res = append(res, max)\n\
    \    for _, v := range lst {\n        if v != min && v != max {\n            res\
    \ = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpabwgkge__test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpabwgkge__test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpabwgkge__test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpabwgkge__test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpabwgkge__test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpabwgkge__test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    var min_lst, max_lst []int\n \
    \   for _, v := range lst {\n        if v == min || v == max {\n            continue\n\
    \        }\n        if v < max {\n            min_lst = append(min_lst, v)\n \
    \       } else {\n            max_lst = append(max_lst, v)\n        }\n    }\n\
    \    for i := 0; i < len(min_lst) && i < len(max_lst); i++ {\n        new_lst\
    \ = append(new_lst, min_lst[i])\n        new_lst = append(new_lst, max_lst[i])\n\
    \    }\n    if len(min_lst) > len(max_lst) {\n        new_lst = append(new_lst,\
    \ min_lst[len(max_lst):]...)\n    } else if len(min_lst) < len(max_lst) {\n  \
    \      new_lst = append(new_lst, max_lst[len(min_lst):]...)\n    }\n    return\
    \ new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpp0wvft62_test.go:83: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpp0wvft62_test.go:83:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpp0wvft62_test.go:83: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpp0wvft62_test.go:83: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpp0wvft62_test.go:83: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpp0wvft62_test.go:83:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpp0wvft62_test.go:83: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    if len(lst) == 2 {\n        if lst[0]\
    \ > lst[1] {\n            lst[0], lst[1] = lst[1], lst[0]\n        }\n       \
    \ return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range\
    \ lst {\n        if v < min {\n            min = v\n        }\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n \
    \   lst = append(lst, max)\n    return strange_sort_list(lst[2:])\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0338\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204e8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.growslice(0x4fd700?, {0xc0060c4260?,\
    \ 0x4?, 0x4?}, 0x5?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:166\
    \ +0x6b7 fp=0xc0201e0348 sp=0xc0201e0340 pc=0x44a2f7\ncommand-line-arguments_test.strange_sort_list({0xc0060c4260?,\
    \ 0x4, 0x0?})\n\t/tmp/tmpecs28r3n_test.go:41 +0xb3 fp=0xc0201e03b0 sp=0xc0201e0348\
    \ pc=0x4ef713\ncommand-line-arguments_test.strange_sort_list({0xc0060c4250?, 0xc0060c4220?,\
    \ 0x1000000000000?})\n\t/tmp/tmpecs28r3n_test.go:43 +0x128 fp=0xc0201e0418 sp=0xc0201e03b0\
    \ pc=0x4ef788\ncommand-line-arguments_test.strange_sort_list({0xc0060c4220?, 0x4?,\
    \ 0x0?})\n\t/tmp/tmpecs28r3n_test.go:43 +0x128 fp=0xc0201e0480 sp=0xc0201e0418\
    \ pc=0x4ef788\ncommand-line-arguments_test.strange_sort_list({0xc0060c4210?, 0xc0060c41e0?,\
    \ 0x1000000000000?})\n\t/tmp/tmpecs28r3n_test.go:43 +0x128 fp=0xc0201e04e8 sp=0xc0201e0480\
    \ pc=0x4ef788\ncommand-line-arguments_test.strange_sort_list({0xc0060c41e0?, 0x4?,\
    \ 0x0?})\n\t/tmp/tmpecs28r3n_test.go:43 +0x128 fp=0xc0201e0550 sp=0xc0201e04e8\
    \ pc=0x4ef788\ncommand-line-arguments_test.strange_sort_list({0xc0060c41d0?, 0xc0060c41a0?,\
    \ 0x1000000000000?})\n\t/tmp/tmpecs28r3n_test.go:43 +0x128 fp=0xc0201e05b8 sp=0xc0201e0550\
    \ pc=0x4ef788\ncommand-line-arguments_test.strange_sort_list({0xc0060c41a0?, 0x4?,\
    \ 0x0?})\n\t/tmp/tmpecs28r3n_test.go:43 +0x128 fp=0xc0201e0620 sp=0xc0201e05b8\
    \ pc=0x4ef788\ncommand-line-arguments_test.strange_sort_list({0xc0060c4190?, 0xc0060c4160?,\
    \ 0x1000000000000?})\n\t/tmp/tmpecs28r3n_test.go:43 +0x128 fp=0xc0201e0688 sp=0xc0201e0620\
    \ pc=0x4ef788\ncommand-line-arguments_test.strange_sort_list({0xc0060c4160?, 0x4?,\
    \ 0x0?})\n"
  timestamp: 1660074270
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    lst =\
    \ append(lst, lst[0])\n    lst = lst[1:]\n    return lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmppdvfzp_d_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmppdvfzp_d_test.go:48: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmppdvfzp_d_test.go:48: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmppdvfzp_d_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmppdvfzp_d_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmppdvfzp_d_test.go:48: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = min_max(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7kw4i1pl_test.go:25:20: undefined: min_max

    /tmp/tmp7kw4i1pl_test.go:30:15: undefined: remove

    /tmp/tmp7kw4i1pl_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    for len(lst) > 0 {\n        min := lst[0]\n        max := lst[0]\n\
    \        for _, v := range lst {\n            if v < min {\n                min\
    \ = v\n            }\n            if v > max {\n                max = v\n    \
    \        }\n        }\n        res = append(res, min)\n        if min != max {\n\
    \            res = append(res, max)\n        }\n        lst = remove(lst, min)\n\
    \        lst = remove(lst, max)\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ba8t4cv_test.go:38:15: undefined: remove

    /tmp/tmp2ba8t4cv_test.go:39:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074265
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min, max = lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v < min {\n            min = v\n        }\n        if v > max {\n      \
    \      max = v\n        }\n    }\n    var res []int\n    res = append(res, min)\n\
    \    res = append(res, max)\n    for _, v := range lst {\n        if v != min\
    \ && v != max {\n            res = append(res, v)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpwtbnc_io_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpwtbnc_io_test.go:64:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpwtbnc_io_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpwtbnc_io_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpwtbnc_io_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpwtbnc_io_test.go:64:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpwtbnc_io_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    var min_index,\
    \ max_index int\n    for i, v := range lst {\n        if v == min {\n        \
    \    min_index = i\n        }\n        if v == max {\n            max_index =\
    \ i\n        }\n    }\n    if min_index < max_index {\n        result = append(result,\
    \ min)\n        result = append(result, max)\n    } else {\n        result = append(result,\
    \ max)\n        result = append(result, min)\n    }\n    var new_lst []int\n \
    \   for i, v := range lst {\n        if i != min_index && i != max_index {\n \
    \           new_lst = append(new_lst, v)\n        }\n    }\n    return append(result,\
    \ strange_sort_list(new_lst)...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpta2pnehx_test.go:83: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)\
    \ %!s(int=7)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n    \
    \    tmpta2pnehx_test.go:83: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4)\
    \ %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=3)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpta2pnehx_test.go:83:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=9) %!s(int=1) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpta2pnehx_test.go:83:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpta2pnehx_test.go:83:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpta2pnehx_test.go:83:\
    \ expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    sorted\
    \ := make([]int, len(lst))\n    sorted[0] = min(lst)\n    lst = remove(lst, sorted[0])\n\
    \    for i := 1; i < len(sorted); i++ {\n        if i % 2 == 1 {\n           \
    \ sorted[i] = max(lst)\n        } else {\n            sorted[i] = min(lst)\n \
    \       }\n        lst = remove(lst, sorted[i])\n    }\n    return sorted\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpti7kaz6q_test.go:23:17: undefined: min

    /tmp/tmpti7kaz6q_test.go:24:11: undefined: remove

    /tmp/tmpti7kaz6q_test.go:27:25: undefined: max

    /tmp/tmpti7kaz6q_test.go:29:25: undefined: min

    /tmp/tmpti7kaz6q_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    min = lst[0]\n    max = lst[0]\n    for _, v := range lst {\n \
    \       if v < min {\n            min = v\n        }\n        if v > max {\n \
    \           max = v\n        }\n    }\n    var new_lst []int\n    new_lst = append(new_lst,\
    \ min)\n    new_lst = append(new_lst, max)\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] != min && lst[i] != max {\n            new_lst = append(new_lst,\
    \ lst[i])\n        }\n    }\n    return new_lst\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp5iz54jme_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp5iz54jme_test.go:65:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp5iz54jme_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp5iz54jme_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp5iz54jme_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp5iz54jme_test.go:65:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp5iz54jme_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 0
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            min := lst[i]\n\
    \            min_idx := i\n            for j := i + 1; j < len(lst); j++ {\n \
    \               if lst[j] < min {\n                    min = lst[j]\n        \
    \            min_idx = j\n                }\n            }\n            lst[i],\
    \ lst[min_idx] = lst[min_idx], lst[i]\n        } else {\n            max := lst[i]\n\
    \            max_idx := i\n            for j := i + 1; j < len(lst); j++ {\n \
    \               if lst[j] > max {\n                    max = lst[j]\n        \
    \            max_idx = j\n                }\n            }\n            lst[i],\
    \ lst[max_idx] = lst[max_idx], lst[i]\n        }\n    }\n    return lst\n}\n\n\
    func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var res []int\n    res = append(res,\
    \ min)\n    res = append(res, max)\n    for i := 0; i < len(lst); i++ {\n    \
    \    if lst[i] != min && lst[i] != max {\n            res = append(res, lst[i])\n\
    \        }\n    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmp822zjq3b_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp822zjq3b_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmp822zjq3b_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074260
- exit_code: 2
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var res\
    \ []int\n    var min, max int\n    for len(lst) > 0 {\n        min, max = min_max(lst)\n\
    \        res = append(res, min)\n        if min != max {\n            res = append(res,\
    \ max)\n        }\n        lst = remove(lst, min)\n        lst = remove(lst, max)\n\
    \    }\n    return res\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7kw4i1pl_test.go:25:20: undefined: min_max

    /tmp/tmp7kw4i1pl_test.go:30:15: undefined: remove

    /tmp/tmp7kw4i1pl_test.go:31:15: undefined: remove

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074268
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    var min_index, max_index int\n    for i, v := range lst {\n   \
    \     if i == 0 {\n            min = v\n            max = v\n            min_index\
    \ = 0\n            max_index = 0\n        } else {\n            if v < min {\n\
    \                min = v\n                min_index = i\n            }\n     \
    \       if v > max {\n                max = v\n                max_index = i\n\
    \            }\n        }\n    }\n    if min_index < max_index {\n        lst\
    \ = append(lst[:min_index], lst[min_index+1:]...)\n        lst = append(lst[:max_index-1],\
    \ lst[max_index:]...)\n    } else {\n        lst = append(lst[:max_index], lst[max_index+1:]...)\n\
    \        lst = append(lst[:min_index-1], lst[min_index:]...)\n    }\n    return\
    \ append([]int{min, max}, strange_sort_list(lst)...)\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc0001d8000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0001b8030?, 0x1, 0x20?})\n\
    \t/tmp/tmpxgli5y4f_test.go:46 +0x418\ncommand-line-arguments_test.strange_sort_list({0xc0001b8030?,\
    \ 0x3, 0x2b5c33054a68?})\n\t/tmp/tmpxgli5y4f_test.go:48 +0x372\ncommand-line-arguments_test.strange_sort_list({0xc0001b8030?,\
    \ 0x5, 0x5e3ea0?})\n\t/tmp/tmpxgli5y4f_test.go:48 +0x372\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpxgli5y4f_test.go:59 +0xd7\ntesting.tRunner(0xc000199040, 0x529168)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    if len(lst)\
    \ == 1 {\n        return lst\n    }\n    var result []int\n    var min, max int\n\
    \    var min_index, max_index int\n    for i := 0; i < len(lst); i++ {\n     \
    \   if i == 0 {\n            min = lst[i]\n            max = lst[i]\n        \
    \    min_index = i\n            max_index = i\n        } else {\n            if\
    \ lst[i] < min {\n                min = lst[i]\n                min_index = i\n\
    \            }\n            if lst[i] > max {\n                max = lst[i]\n\
    \                max_index = i\n            }\n        }\n    }\n    result =\
    \ append(result, min)\n    result = append(result, max)\n    lst = append(lst[:min_index],\
    \ lst[min_index+1:]...)\n    lst = append(lst[:max_index-1], lst[max_index:]...)\n\
    \    result = append(result, strange_sort_list(lst)...)\n    return result\n}\n\
    \nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
    \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
    \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
    \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected:\
    \ []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected:\
    \ []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8,\
    \ 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}),\
    \ expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc0001d8000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0001d60a0?, 0x4, 0x4})\n\
    \t/tmp/tmpm_v1jr7u_test.go:48 +0x3aa\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpm_v1jr7u_test.go:64 +0x1f7\ntesting.tRunner(0xc0001991e0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min :=\
    \ lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    if min == max {\n        return lst\n    }\n    var result\
    \ []int\n    var min_lst []int\n    var max_lst []int\n    for _, v := range lst\
    \ {\n        if v == min {\n            continue\n        }\n        if v == max\
    \ {\n            continue\n        }\n        if v < max {\n            min_lst\
    \ = append(min_lst, v)\n        } else {\n            max_lst = append(max_lst,\
    \ v)\n        }\n    }\n    for {\n        if len(min_lst) == 0 && len(max_lst)\
    \ == 0 {\n            break\n        }\n        if len(min_lst) > 0 {\n      \
    \      result = append(result, min_lst[0])\n            min_lst = min_lst[1:]\n\
    \        }\n        if len(max_lst) > 0 {\n            result = append(result,\
    \ max_lst[len(max_lst)-1])\n            max_lst = max_lst[:len(max_lst)-1]\n \
    \       }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ max)\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n \
    \ candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp14_s265i_test.go:90: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp14_s265i_test.go:90: expected\
    \ '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2\
    \ (0.00s)\n        tmp14_s265i_test.go:90: expected '[%!s(int=1) %!s(int=5) %!s(int=2)\
    \ %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp14_s265i_test.go:90:\
    \ expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]',\
    \ got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp14_s265i_test.go:90:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7\
    \ (0.00s)\n        tmp14_s265i_test.go:90: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5)\
    \ %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []int\n    var min int\n    var max int\n    var min_index int\n    var max_index\
    \ int\n    var min_found bool\n    var max_found bool\n    for i := 0; i < len(lst);\
    \ i++ {\n        min = lst[0]\n        max = lst[0]\n        min_found = false\n\
    \        max_found = false\n        for j := 0; j < len(lst); j++ {\n        \
    \    if lst[j] < min {\n                min = lst[j]\n                min_index\
    \ = j\n                min_found = true\n            }\n            if lst[j]\
    \ > max {\n                max = lst[j]\n                max_index = j\n     \
    \           max_found = true\n            }\n        }\n        if min_found {\n\
    \            result = append(result, min)\n            lst = append(lst[:min_index],\
    \ lst[min_index+1:]...)\n        }\n        if max_found {\n            result\
    \ = append(result, max)\n            lst = append(lst[:max_index], lst[max_index+1:]...)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T)\
    \ {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0\
    \ (0.00s)\n        tmp255ort5u_test.go:79: expected '[%!s(int=1) %!s(int=4) %!s(int=2)\
    \ %!s(int=3)]', got '[%!s(int=4) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmp255ort5u_test.go:79: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=8) %!s(int=7)]'\n    --- FAIL:\
    \ TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp255ort5u_test.go:79: expected\
    \ '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n\
    \        tmp255ort5u_test.go:79: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8)\
    \ %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=8) %!s(int=7)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp255ort5u_test.go:79:\
    \ expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp255ort5u_test.go:79:\
    \ expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6)\
    \ %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp255ort5u_test.go:79:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5)\
    \ %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n    \
    \    tmp255ort5u_test.go:79: expected '[%!s(int=111111)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var new_lst\
    \ []int\n    var min, max int\n    var min_idx, max_idx int\n    for len(lst)\
    \ > 0 {\n        min = lst[0]\n        max = lst[0]\n        min_idx = 0\n   \
    \     max_idx = 0\n        for i, v := range lst {\n            if v < min {\n\
    \                min = v\n                min_idx = i\n            }\n       \
    \     if v > max {\n                max = v\n                max_idx = i\n   \
    \         }\n        }\n        new_lst = append(new_lst, min)\n        if len(lst)\
    \ > 1 {\n            new_lst = append(new_lst, max)\n        }\n        lst =\
    \ append(lst[:min_idx], lst[min_idx+1:]...)\n        if len(lst) > 1 {\n     \
    \       lst = append(lst[:max_idx-1], lst[max_idx:]...)\n        }\n    }\n  \
    \  return new_lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate\
    \ := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6,\
    \ 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5,\
    \ 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5,\
    \ 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}),\
    \ expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0,\
    \ 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n    \
    \ { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strange_sort_list({0xc0001620a0?, 0x5d4290?,\
    \ 0x5e3ea0?})\n\t/tmp/tmpk7rynyga_test.go:46 +0x39c\ncommand-line-arguments_test.TestStrange_Sort_List(0x0?)\n\
    \t/tmp/tmpk7rynyga_test.go:63 +0x1f7\ntesting.tRunner(0xc0001036c0, 0x5290e8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074269
- exit_code: 1
  program: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
    \ is when you start with the minimum value,\n// then maximum of the remaining\
    \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1,\
    \ 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n\
    // []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// PATCH list\nfunc strange_sort_list(lst\
    \ []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    var min,\
    \ max int\n    for i, v := range lst {\n        if i == 0 {\n            min =\
    \ v\n            max = v\n        } else {\n            if v < min {\n       \
    \         min = v\n            }\n            if v > max {\n                max\
    \ = v\n            }\n        }\n    }\n    var result []int\n    result = append(result,\
    \ min)\n    result = append(result, max)\n    for i := 0; i < len(lst); i++ {\n\
    \        if lst[i] != min && lst[i] != max {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t\
    \ *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n  \
    \   { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7}\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2,\
    \ 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
    \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
    \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7,\
    \ 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected:\
    \ []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}),\
    \ expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__1\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6)\
    \ %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8)]'\n\
    \    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5)\
    \ %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6\
    \ (0.00s)\n        tmpqhfoypcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2)\
    \ %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    ---\
    \ FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqhfoypcu_test.go:68:\
    \ expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n\
    \        tmpqhfoypcu_test.go:68: expected '[%!s(int=111111)]', got '[%!s(int=111111)\
    \ %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074258
