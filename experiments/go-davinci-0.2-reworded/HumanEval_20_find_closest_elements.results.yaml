language: go_test.go
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    var difference float64\n    for i := 0; i <\
    \ len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n \
    \           difference = numbers[j] - numbers[i]\n            if closest_difference\
    \ == 0 || closest_difference > difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8lq55kvx_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8lq55kvx_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8lq55kvx_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8lq55kvx_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ smallest_difference float64\n    var current_difference float64\n    var previous_number\
    \ float64\n    var current_number float64\n\n    for _, current_number = range\
    \ numbers {\n        if previous_number != 0 {\n            current_difference\
    \ = current_number - previous_number\n            if smallest_difference == 0\
    \ || current_difference < smallest_difference {\n                smallest_difference\
    \ = current_difference\n                closest_elements = []interface{}{previous_number,\
    \ current_number}\n            }\n        }\n        previous_number = current_number\n\
    \    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp3hiny6a5_test.go:52: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp3hiny6a5_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp3hiny6a5_test.go:52: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp3hiny6a5_test.go:52: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    var diff float64\n    var smaller_number float64\n\
    \    var larger_number float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] <\
    \ numbers[j] {\n                smaller_number = numbers[i]\n                larger_number\
    \ = numbers[j]\n            } else {\n                smaller_number = numbers[j]\n\
    \                larger_number = numbers[i]\n            }\n            diff =\
    \ larger_number - smaller_number\n            if closest_diff == 0 || diff < closest_diff\
    \ {\n                closest_diff = diff\n                closest_elements = []interface{}{smaller_number,\
    \ larger_number}\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpuula25ru_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var smallest_difference\
    \ float64\n    var smallest_difference_index int\n\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i+1] - numbers[i]\n        if i ==\
    \ 0 || difference < smallest_difference {\n            smallest_difference = difference\n\
    \            smallest_difference_index = i\n        }\n    }\n\n    closest =\
    \ append(closest, numbers[smallest_difference_index])\n    closest = append(closest,\
    \ numbers[smallest_difference_index+1])\n\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp2uid04fu_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp2uid04fu_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp2uid04fu_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp2uid04fu_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = 0.0\n    var current_difference float64 = 0.0\n\
    \    var current_element float64 = 0.0\n    var previous_element float64 = 0.0\n\
    \n    for i, current_element := range numbers {\n        if i == 0 {\n       \
    \     previous_element = current_element\n            continue\n        }\n\n\
    \        current_difference = current_element - previous_element\n        if closest_difference\
    \ == 0.0 || current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{previous_element,\
    \ current_element}\n        }\n\n        previous_element = current_element\n\
    \    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1lntkiqr_test.go:18:9: current_element declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closestDiff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closestDiff == 0 || diff < closestDiff {\n                closestDiff\
    \ = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpiibfcd9j_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpiibfcd9j_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpiibfcd9j_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpiibfcd9j_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_difference float64 = numbers[1] - numbers[0]\n    var\
    \ closest_numbers []interface{} = []interface{}{numbers[0], numbers[1]}\n    for\
    \ i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_numbers = []interface{}{numbers[i], numbers[j]}\n     \
    \       }\n        }\n    }\n    return closest_numbers\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpb35t4g1o_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpb35t4g1o_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpb35t4g1o_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpb35t4g1o_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ smallest_difference float64\n    var smallest_difference_index int\n    for\
    \ i := 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] -\
    \ numbers[i]\n        if i == 0 || difference < smallest_difference {\n      \
    \      smallest_difference = difference\n            smallest_difference_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[smallest_difference_index])\n\
    \    closest_elements = append(closest_elements, numbers[smallest_difference_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp5dwemefl_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp5dwemefl_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp5dwemefl_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp5dwemefl_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var result []interface{}\n    var minDiff float64\
    \ = numbers[1] - numbers[0]\n    var minDiffIndex int = 0\n    for i := 1; i <\
    \ len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n     \
    \   if diff < minDiff {\n            minDiff = diff\n            minDiffIndex\
    \ = i\n        }\n    }\n    result = append(result, numbers[minDiffIndex])\n\
    \    result = append(result, numbers[minDiffIndex + 1])\n    return result\n}\n\
    \nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index int =\
    \ 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i +\
    \ 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes\
    \ []int = []int{0, 1}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            if numbers[j] - numbers[i]\
    \ < closest_difference {\n                closest_difference = numbers[j] - numbers[i]\n\
    \                closest_elements_indexes = []int{i, j}\n            }\n     \
    \   }\n    }\n    closest_elements = append(closest_elements, numbers[closest_elements_indexes[0]])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_indexes[1]])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpli8bfqcq_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpli8bfqcq_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpli8bfqcq_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpli8bfqcq_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var smallest_diff\
    \ float64 = numbers[1] - numbers[0]\n    var smallest_diff_pair []float64 = []float64{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < smallest_diff {\n            smallest_diff\
    \ = diff\n            smallest_diff_pair = []float64{numbers[i], numbers[i + 1]}\n\
    \        }\n    }\n    closest_pair = append(closest_pair, smallest_diff_pair[0])\n\
    \    closest_pair = append(closest_pair, smallest_diff_pair[1])\n    return closest_pair\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpfa4b47xd_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpfa4b47xd_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpfa4b47xd_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpfa4b47xd_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    var current_difference float64\n    for i := 1; i < len(numbers)\
    \ - 1; i++ {\n        current_difference = numbers[i + 1] - numbers[i]\n     \
    \   if current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvr_43yso_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvr_43yso_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvr_43yso_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvr_43yso_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var diff float64\n\
    \    var closest_diff float64\n    var closest_index int\n\n    for i, number\
    \ := range numbers {\n        if i == 0 {\n            closest_diff = number -\
    \ numbers[i+1]\n            closest_index = i\n        } else if i == len(numbers)\
    \ - 1 {\n            diff = numbers[i-1] - number\n            if diff < closest_diff\
    \ {\n                closest_diff = diff\n                closest_index = i\n\
    \            }\n        } else {\n            diff = number - numbers[i+1]\n \
    \           if diff < closest_diff {\n                closest_diff = diff\n  \
    \              closest_index = i\n            }\n        }\n    }\n\n    closest\
    \ = append(closest, numbers[closest_index])\n    closest = append(closest, numbers[closest_index+1])\n\
    \n    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpeejqbz6h_test.go:62: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=2) %!s(float64=3.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpeejqbz6h_test.go:62: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=2) %!s(float64=5.9)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpeejqbz6h_test.go:62: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpeejqbz6h_test.go:62: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmpeejqbz6h_test.go:62: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[%!s(float64=1.1) %!s(float64=2.2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var smallestDifference\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < smallestDifference {\n            smallestDifference = difference\n      \
    \      closest = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n\
    \    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc1x000df_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc1x000df_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc1x000df_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc1x000df_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i +\
    \ 1; j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n\
    \            if closest_distance == 0.0 || distance < closest_distance {\n   \
    \             closest_distance = distance\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp5a6ila6g_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp5a6ila6g_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp5a6ila6g_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp5a6ila6g_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_difference float64 = numbers[1]\
    \ - numbers[0]\n    var closest_elements []interface{} = []interface{}{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            difference := numbers[j] - numbers[i]\n\
    \            if difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpffcj286o_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpffcj286o_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpffcj286o_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpffcj286o_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ smallest_difference float64\n    var difference float64\n    var first_number\
    \ float64\n    var second_number float64\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ = numbers[j] - numbers[i]\n            if difference < 0 {\n               \
    \ difference = difference * -1\n            }\n            if i == 0 && j == 1\
    \ {\n                smallest_difference = difference\n                first_number\
    \ = numbers[i]\n                second_number = numbers[j]\n            } else\
    \ if difference < smallest_difference {\n                smallest_difference =\
    \ difference\n                first_number = numbers[i]\n                second_number\
    \ = numbers[j]\n            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ first_number, second_number)\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpgy_4fyyb_test.go:59: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers); i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpjipmepgo_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpjipmepgo_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpjipmepgo_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpjipmepgo_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_numbers []interface{}\n    var closest_difference\
    \ float64\n    var difference float64\n    var smaller_number float64\n    var\
    \ larger_number float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n     \
    \   for j := i + 1; j < len(numbers); j++ {\n            if numbers[i] < numbers[j]\
    \ {\n                smaller_number = numbers[i]\n                larger_number\
    \ = numbers[j]\n            } else {\n                smaller_number = numbers[j]\n\
    \                larger_number = numbers[i]\n            }\n            difference\
    \ = larger_number - smaller_number\n            if closest_difference == 0 ||\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_numbers = []interface{}{smaller_number, larger_number}\n\
    \            }\n        }\n    }\n    return closest_numbers\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpwr03sx5w_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ smallest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < smallest_difference {\n            smallest_difference = difference\n    \
    \        closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n      \
    \  }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpzlfb0y7s_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpzlfb0y7s_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpzlfb0y7s_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpzlfb0y7s_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = 0.0\n    var diff float64 = 0.0\n    for i := 0; i <\
    \ len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n     \
    \       diff = numbers[j] - numbers[i]\n            if closest_diff == 0.0 ||\
    \ diff < closest_diff {\n                closest_diff = diff\n               \
    \ closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n  \
    \      }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpji29f0mm_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpji29f0mm_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpji29f0mm_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpji29f0mm_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    var diff float64\n    var diff_abs float64\n    var\
    \ first_number float64\n    var second_number float64\n\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        first_number = numbers[i]\n        second_number = numbers[i\
    \ + 1]\n        diff = second_number - first_number\n        diff_abs = diff\n\
    \        if diff < 0 {\n            diff_abs = diff * -1\n        }\n        if\
    \ i == 0 || diff_abs < closest_diff {\n            closest_diff = diff_abs\n \
    \           closest_elements = []interface{}{first_number, second_number}\n  \
    \      }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpp_6v96ov_test.go:56: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpp_6v96ov_test.go:56: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpp_6v96ov_test.go:56: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=1) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < closest_difference {\n\
    \            closest_difference = difference\n            closest_index = i\n\
    \        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var minDiff float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if diff < 0\
    \ {\n                diff = -diff\n            }\n            if i == 0 && j ==\
    \ 1 {\n                minDiff = diff\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            } else if diff < minDiff {\n                minDiff\
    \ = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpu2kd_fk9_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_distance float64 = 0.0\n    var distance float64 = 0.0\n    var smaller_number\
    \ float64 = 0.0\n    var larger_number float64 = 0.0\n\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            distance\
    \ = numbers[j] - numbers[i]\n            if distance < 0 {\n                distance\
    \ = distance * -1\n            }\n            if closest_distance == 0.0 || distance\
    \ < closest_distance {\n                closest_distance = distance\n        \
    \        smaller_number = numbers[i]\n                larger_number = numbers[j]\n\
    \            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ smaller_number)\n    closest_elements = append(closest_elements, larger_number)\n\
    \n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvq6j1syr_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvq6j1syr_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers); i++ {\n      \
    \  for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = 0.0\n    var current_difference float64 = 0.0\n\
    \    var current_element float64 = 0.0\n    var previous_element float64 = 0.0\n\
    \n    for i, number := range numbers {\n        if i == 0 {\n            previous_element\
    \ = number\n            continue\n        }\n        current_element = number\n\
    \        current_difference = current_element - previous_element\n        if i\
    \ == 1 {\n            closest_difference = current_difference\n            closest_elements\
    \ = []interface{}{previous_element, current_element}\n        } else if current_difference\
    \ < closest_difference {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{previous_element, current_element}\n\
    \        }\n        previous_element = current_element\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmplhbfqsz6_test.go:57: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmplhbfqsz6_test.go:57: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmplhbfqsz6_test.go:57: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmplhbfqsz6_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ min_diff float64 = numbers[1] - numbers[0]\n    var min_index int = 0\n    for\
    \ i := 1; i < len(numbers) - 1; i++ {\n        if numbers[i + 1] - numbers[i]\
    \ < min_diff {\n            min_diff = numbers[i + 1] - numbers[i]\n         \
    \   min_index = i\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[min_index])\n    closest_elements = append(closest_elements, numbers[min_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpolifsmvn_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpolifsmvn_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpolifsmvn_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpolifsmvn_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    // TODO: Implement me!\n    return []interface{}{}\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpyopl9v0y_test.go:36: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1 (0.00s)\n    \
    \    tmpyopl9v0y_test.go:36: expected '[%!s(float64=5) %!s(float64=5.9)]', got\
    \ '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2 (0.00s)\n        tmpyopl9v0y_test.go:36:\
    \ expected '[%!s(float64=2) %!s(float64=2.2)]', got '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpyopl9v0y_test.go:36: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4 (0.00s)\n    \
    \    tmpyopl9v0y_test.go:36: expected '[%!s(float64=2.2) %!s(float64=3.1)]', got\
    \ '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i, number := range numbers {\n        for\
    \ j, number2 := range numbers {\n            if i != j {\n                difference\
    \ := number - number2\n                if difference < 0 {\n                 \
    \   difference = -difference\n                }\n                if closest_difference\
    \ == 0 || difference < closest_difference {\n                    closest_difference\
    \ = difference\n                    closest_elements = []interface{}{number, number2}\n\
    \                }\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbqlrxl3s_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbqlrxl3s_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=2) %!s(float64=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index int =\
    \ 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i +\
    \ 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var minDiff float64 = numbers[1] - numbers[0]\n    var minDiffIndex\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < minDiff {\n            minDiff = diff\n\
    \            minDiffIndex = i\n        }\n    }\n    return []interface{}{numbers[minDiffIndex],\
    \ numbers[minDiffIndex + 1]}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpxqwavo0y_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpxqwavo0y_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpxqwavo0y_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpxqwavo0y_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        if numbers[i + 1] - numbers[i] < closest_difference {\n\
    \            closest_difference = numbers[i + 1] - numbers[i]\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp2tomp49b_test.go:43: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp2tomp49b_test.go:43: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp2tomp49b_test.go:43: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp2tomp49b_test.go:43: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers); i++ {\n      \
    \  for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    var difference float64\n    var smaller_number\
    \ float64\n    var larger_number float64\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        difference = numbers[i + 1] - numbers[i]\n        if i ==\
    \ 0 || difference < closest_difference {\n            closest_difference = difference\n\
    \            smaller_number = numbers[i]\n            larger_number = numbers[i\
    \ + 1]\n        }\n    }\n\n    closest_elements = append(closest_elements, smaller_number)\n\
    \    closest_elements = append(closest_elements, larger_number)\n\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6vv7yias_test.go:53: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6vv7yias_test.go:53: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6vv7yias_test.go:53: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6vv7yias_test.go:53: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var diff float64\
    \ = numbers[1] - numbers[0]\n    closest = append(closest, numbers[0])\n    closest\
    \ = append(closest, numbers[1])\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        if numbers[i+1] - numbers[i] < diff {\n            diff = numbers[i+1]\
    \ - numbers[i]\n            closest[0] = numbers[i]\n            closest[1] =\
    \ numbers[i+1]\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpfnqf5ero_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpfnqf5ero_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpfnqf5ero_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpfnqf5ero_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_diff == 0 || diff < closest_diff {\n                closest_diff\
    \ = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_difference\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n\
    \    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpoplbtvbz_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpoplbtvbz_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpoplbtvbz_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpoplbtvbz_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_difference float64 = numbers[1] - numbers[0]\n    var\
    \ closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n   \
    \ for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpkp5knd5o_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpkp5knd5o_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpkp5knd5o_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpkp5knd5o_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_pair = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var result []interface{}\n    var minDiff float64\
    \ = numbers[1] - numbers[0]\n    var minDiffIndex int = 0\n    for i := 1; i <\
    \ len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n     \
    \   if diff < minDiff {\n            minDiff = diff\n            minDiffIndex\
    \ = i\n        }\n    }\n    result = append(result, numbers[minDiffIndex])\n\
    \    result = append(result, numbers[minDiffIndex + 1])\n    return result\n}\n\
    \nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    var difference float64\n    var first_number\
    \ float64\n    var second_number float64\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        first_number = numbers[i]\n        second_number = numbers[i\
    \ + 1]\n        difference = second_number - first_number\n        if i == 0 {\n\
    \            closest_difference = difference\n            closest_elements = []interface{}{first_number,\
    \ second_number}\n        } else if difference < closest_difference {\n      \
    \      closest_difference = difference\n            closest_elements = []interface{}{first_number,\
    \ second_number}\n        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp5t3qmfbu_test.go:54: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp5t3qmfbu_test.go:54: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp5t3qmfbu_test.go:54: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp5t3qmfbu_test.go:54: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n       \
    \     if closest_diff == 0 || diff < closest_diff {\n                closest_diff\
    \ = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvb4mpc76_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvb4mpc76_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvb4mpc76_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvb4mpc76_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i, number := range numbers {\n        for _, other_number\
    \ := range numbers[i+1:] {\n            diff := number - other_number\n      \
    \      if diff < 0 {\n                diff = -diff\n            }\n          \
    \  if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{number, other_number}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpl09w5ixp_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpl09w5ixp_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_diff == 0 || diff < closest_diff {\n                closest_diff\
    \ = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var diff float64\n\
    \    var minDiff float64\n    var minDiffIndex int\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        diff = numbers[i + 1] - numbers[i]\n        if i == 0 ||\
    \ diff < minDiff {\n            minDiff = diff\n            minDiffIndex = i\n\
    \        }\n    }\n    closest = append(closest, numbers[minDiffIndex])\n    closest\
    \ = append(closest, numbers[minDiffIndex + 1])\n    return closest\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpj3iq6e03_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpj3iq6e03_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpj3iq6e03_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpj3iq6e03_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_numbers []float64\
    \ = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_numbers = []float64{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ closest_numbers[0])\n    closest_elements = append(closest_elements, closest_numbers[1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp86w_z8ok_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp86w_z8ok_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp86w_z8ok_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp86w_z8ok_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < closest_difference {\n\
    \            closest_difference = difference\n            closest_index = i\n\
    \        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        if numbers[i +\
    \ 1] - numbers[i] < closest_difference {\n            closest_difference = numbers[i\
    \ + 1] - numbers[i]\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    var diff float64\n    var diff_abs float64\n    var\
    \ diff_abs_min float64\n    var i int\n    var j int\n    var number_1 float64\n\
    \    var number_2 float64\n\n    if len(numbers) < 2 {\n        return closest_elements\n\
    \    }\n\n    diff_abs_min = numbers[1] - numbers[0]\n    closest_elements = []interface{}{numbers[0],\
    \ numbers[1]}\n\n    for i = 0; i < len(numbers) - 1; i++ {\n        number_1\
    \ = numbers[i]\n        for j = i + 1; j < len(numbers); j++ {\n            number_2\
    \ = numbers[j]\n            diff = number_2 - number_1\n            diff_abs =\
    \ diff\n            if diff_abs < 0 {\n                diff_abs = -diff_abs\n\
    \            }\n            if diff_abs < diff_abs_min {\n                diff_abs_min\
    \ = diff_abs\n                closest_elements = []interface{}{number_1, number_2}\n\
    \            }\n        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6e_w1v0_test.go:16:9: closest_diff declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_pair == nil || diff < closest_diff {\n                closest_pair\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = 0.0\n    var closest_index int = 0\n    for i :=\
    \ 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n\
    \        if closest_difference == 0.0 || difference < closest_difference {\n \
    \           closest_difference = difference\n            closest_index = i\n \
    \       }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpskvii73a_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpskvii73a_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpskvii73a_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpskvii73a_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    var difference float64\n    var smaller_number\
    \ float64\n    var larger_number float64\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if numbers[i]\
    \ < numbers[j] {\n                smaller_number = numbers[i]\n              \
    \  larger_number = numbers[j]\n            } else {\n                smaller_number\
    \ = numbers[j]\n                larger_number = numbers[i]\n            }\n  \
    \          difference = larger_number - smaller_number\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{smaller_number,\
    \ larger_number}\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptfxa_q8q_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_numbers []interface{}\n    var closest_distance\
    \ float64 = 0.0\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n\
    \            if closest_distance == 0.0 || distance < closest_distance {\n   \
    \             closest_distance = distance\n                closest_numbers = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_numbers\n}\n\
    \nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpz8jo4hko_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpz8jo4hko_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpz8jo4hko_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpz8jo4hko_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_pair []interface{}\n    var closest_diff float64 = numbers[1]\
    \ - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_pair = []interface{}{numbers[i], numbers[i + 1]}\n\
    \        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpk0abffac_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpk0abffac_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpk0abffac_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpk0abffac_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_difference float64 = numbers[1] - numbers[0]\n    var\
    \ closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n   \
    \ for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            difference := numbers[j] - numbers[i]\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = []interface{}{numbers[i], numbers[j]}\n    \
    \        }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpkp5knd5o_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpkp5knd5o_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpkp5knd5o_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpkp5knd5o_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = 1.0\n    var difference float64\n\n    for i :=\
    \ 0; i < len(numbers) - 1; i++ {\n        difference = numbers[i+1] - numbers[i]\n\
    \        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_elements = []interface{}{numbers[i], numbers[i+1]}\n\
    \        }\n    }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpjiggl95u_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpjiggl95u_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpjiggl95u_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpjiggl95u_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_pair []interface{}\n    var closest_distance float64 =\
    \ -1\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j <\
    \ len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n     \
    \       if closest_distance == -1 || distance < closest_distance {\n         \
    \       closest_pair = []interface{}{numbers[i], numbers[j]}\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp12ijact8_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp12ijact8_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp12ijact8_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp12ijact8_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_distance float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            distance\
    \ := numbers[j] - numbers[i]\n            if distance < closest_distance {\n \
    \               closest_distance = distance\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc3hn5n24_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc3hn5n24_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc3hn5n24_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc3hn5n24_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_distance float64 = 0\n    for i := 0; i < len(numbers); i++ {\n    \
    \    for j := i + 1; j < len(numbers); j++ {\n            distance := numbers[j]\
    \ - numbers[i]\n            if closest_distance == 0 || distance < closest_distance\
    \ {\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpdncxbpwo_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpdncxbpwo_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpdncxbpwo_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpdncxbpwo_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ min_difference float64 = numbers[1] - numbers[0]\n    var min_difference_elements\
    \ []interface{} = []interface{}{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < min_difference {\n            min_difference = difference\n            min_difference_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return min_difference_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9sxs3t45_test.go:15:9: closest_elements declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_elements_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_elements_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_elements_index])\n    closest_elements\
    \ = append(closest_elements, numbers[closest_elements_index + 1])\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpdm9vj9hj_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpdm9vj9hj_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpdm9vj9hj_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpdm9vj9hj_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var smallest_difference\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < smallest_difference {\n            smallest_difference = difference\n    \
    \        closest = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n\
    \    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpq6dbxt9v_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpq6dbxt9v_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpq6dbxt9v_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpq6dbxt9v_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    if len(numbers)\
    \ < 2 {\n        return closest_elements\n    }\n    var smallest_difference float64\
    \ = numbers[1] - numbers[0]\n    var smallest_difference_elements []interface{}\
    \ = []interface{}{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if difference < smallest_difference\
    \ {\n                smallest_difference = difference\n                smallest_difference_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return smallest_difference_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp2j121rs6_test.go:50: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp2j121rs6_test.go:50: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp2j121rs6_test.go:50: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp2j121rs6_test.go:50: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_diff float64 = numbers[1] - numbers[0]\n\
    \    var closest_numbers []interface{} = []interface{}{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < closest_diff {\n            closest_diff = diff\n\
    \            closest_numbers = []interface{}{numbers[i], numbers[i + 1]}\n   \
    \     }\n    }\n    return closest_numbers\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp_32yg98i_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp_32yg98i_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp_32yg98i_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp_32yg98i_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var minDiff float64\
    \ = numbers[1] - numbers[0]\n    var minDiffIndex int = 0\n    for i := 1; i <\
    \ len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n     \
    \   if diff < minDiff {\n            minDiff = diff\n            minDiffIndex\
    \ = i\n        }\n    }\n    closest = append(closest, numbers[minDiffIndex])\n\
    \    closest = append(closest, numbers[minDiffIndex + 1])\n    return closest\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp53sxm5_x_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp53sxm5_x_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp53sxm5_x_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp53sxm5_x_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index int =\
    \ 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i +\
    \ 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_elements []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64\n    for i, _ := range numbers {\n        if i == 0 {\n            closest_pair\
    \ = []interface{}{numbers[i], numbers[i+1]}\n            closest_diff = numbers[i+1]\
    \ - numbers[i]\n        } else if i == len(numbers) - 1 {\n            break\n\
    \        } else {\n            diff := numbers[i+1] - numbers[i]\n           \
    \ if diff < closest_diff {\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[i+1]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpisp4vmwv_test.go:51: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpisp4vmwv_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpisp4vmwv_test.go:51: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpisp4vmwv_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ min_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < min_difference {\n            min_difference = difference\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpnewzxnbc_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpnewzxnbc_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpnewzxnbc_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpnewzxnbc_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_distance float64\n    for i := 0; i < len(numbers) - 1; i++ {\n    \
    \    for j := i + 1; j < len(numbers); j++ {\n            distance := numbers[j]\
    \ - numbers[i]\n            if closest_distance == 0 || distance < closest_distance\
    \ {\n                closest_elements = []interface{}{numbers[i], numbers[j]}\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpsargr1p1_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpsargr1p1_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpsargr1p1_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpsargr1p1_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index int =\
    \ 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i +\
    \ 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_numbers []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    var closest_numbers_index int = 0\n \
    \   for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < closest_diff {\n            closest_diff = diff\n\
    \            closest_numbers_index = i\n        }\n    }\n    closest_numbers\
    \ = append(closest_numbers, numbers[closest_numbers_index])\n    closest_numbers\
    \ = append(closest_numbers, numbers[closest_numbers_index + 1])\n    return closest_numbers\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp8f6tp3eo_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp8f6tp3eo_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp8f6tp3eo_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp8f6tp3eo_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var diff float64\
    \ = numbers[1] - numbers[0]\n    closest = append(closest, numbers[0])\n    closest\
    \ = append(closest, numbers[1])\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        if numbers[i + 1] - numbers[i] < diff {\n            diff = numbers[i\
    \ + 1] - numbers[i]\n            closest[0] = numbers[i]\n            closest[1]\
    \ = numbers[i + 1]\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpieqv7bgc_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpieqv7bgc_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpieqv7bgc_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpieqv7bgc_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_distance float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        if numbers[i+1] - numbers[i] < closest_distance {\n    \
    \        closest_elements = []interface{}{numbers[i], numbers[i+1]}\n        \
    \    closest_distance = numbers[i+1] - numbers[i]\n        }\n    }\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpf6o5vhq3_test.go:43: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpf6o5vhq3_test.go:43: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpf6o5vhq3_test.go:43: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpf6o5vhq3_test.go:43: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index int =\
    \ 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i +\
    \ 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ smallest_difference float64 = numbers[1] - numbers[0]\n    var smallest_difference_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < smallest_difference {\n\
    \            smallest_difference = difference\n            smallest_difference_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[smallest_difference_index])\n\
    \    closest_elements = append(closest_elements, numbers[smallest_difference_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp68osjjhd_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp68osjjhd_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp68osjjhd_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp68osjjhd_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < closest_difference {\n\
    \            closest_difference = difference\n            closest_index = i\n\
    \        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var smallestDifference\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < smallestDifference {\n            smallestDifference = difference\n      \
    \      closest = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n\
    \    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc1x000df_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc1x000df_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc1x000df_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc1x000df_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64 = -1.0\n    for i := 0; i < len(numbers); i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n\
    \            if closest_distance == -1.0 || distance < closest_distance {\n  \
    \              closest_distance = distance\n                closest_pair = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest_pair\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmplxw_vmzx_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmplxw_vmzx_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmplxw_vmzx_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmplxw_vmzx_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closestDiff\
    \ float64\n    for i, number := range numbers {\n        for j, number2 := range\
    \ numbers {\n            if i != j {\n                diff := number - number2\n\
    \                if diff < 0 {\n                    diff = -diff\n           \
    \     }\n                if closestDiff == 0 || diff < closestDiff {\n       \
    \             closestDiff = diff\n                    closest = []interface{}{number,\
    \ number2}\n                }\n            }\n        }\n    }\n    return closest\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpacol9_db_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpacol9_db_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=2) %!s(float64=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers); i++ {\n      \
    \  for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp21kqxvir_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var diff float64\n\
    \    var minDiff float64\n\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff = numbers[j] - numbers[i]\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     closest = []interface{}{numbers[i], numbers[j]}\n            }\n       \
    \ }\n    }\n\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmprsrs30f9_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmprsrs30f9_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmprsrs30f9_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmprsrs30f9_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4\
    \ (0.00s)\n        tmprsrs30f9_test.go:49: expected '[%!s(float64=2.2) %!s(float64=3.1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    // TODO: Implement me!\n    return []interface{}{}\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpyopl9v0y_test.go:36: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1 (0.00s)\n    \
    \    tmpyopl9v0y_test.go:36: expected '[%!s(float64=5) %!s(float64=5.9)]', got\
    \ '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2 (0.00s)\n        tmpyopl9v0y_test.go:36:\
    \ expected '[%!s(float64=2) %!s(float64=2.2)]', got '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpyopl9v0y_test.go:36: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4 (0.00s)\n    \
    \    tmpyopl9v0y_test.go:36: expected '[%!s(float64=2.2) %!s(float64=3.1)]', got\
    \ '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_distance float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        distance := numbers[i + 1] - numbers[i]\n        if distance\
    \ < closest_distance {\n            closest_distance = distance\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpgixbuf_9_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpgixbuf_9_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpgixbuf_9_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpgixbuf_9_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_elements []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      difference := numbers[i + 1] - numbers[i]\n        if i == 0 || difference\
    \ < closest_difference {\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n            closest_difference = difference\n        }\n  \
    \  }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmps5wpkvsw_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmps5wpkvsw_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmps5wpkvsw_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmps5wpkvsw_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_diff float64 = numbers[1] - numbers[0]\n    var closest_numbers\
    \ []interface{} = []interface{}{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if\
    \ diff := numbers[j] - numbers[i]; diff < closest_diff {\n                closest_diff\
    \ = diff\n                closest_numbers = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest_numbers\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpfj4hbfj0_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpfj4hbfj0_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpfj4hbfj0_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpfj4hbfj0_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpfpfsox9h_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes\
    \ []int = []int{0, 1}\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff\
    \ := numbers[i + 1] - numbers[i]\n        if diff < closest_diff {\n         \
    \   closest_diff = diff\n            closest_elements_indexes = []int{i, i + 1}\n\
    \        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_elements_indexes[0]])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_indexes[1]])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp5irwxr8v_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp5irwxr8v_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp5irwxr8v_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp5irwxr8v_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        if numbers[i+1] - numbers[i] < closest_difference {\n  \
    \          closest_difference = numbers[i+1] - numbers[i]\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i+1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp2up3k8d7_test.go:43: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp2up3k8d7_test.go:43: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp2up3k8d7_test.go:43: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp2up3k8d7_test.go:43: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        if numbers[i +\
    \ 1] - numbers[i] < closest_difference {\n            closest_difference = numbers[i\
    \ + 1] - numbers[i]\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index int =\
    \ 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i +\
    \ 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        if numbers[i+1] - numbers[i] < closest_difference {\n  \
    \          closest_difference = numbers[i+1] - numbers[i]\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i+1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp2up3k8d7_test.go:43: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp2up3k8d7_test.go:43: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp2up3k8d7_test.go:43: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp2up3k8d7_test.go:43: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_difference float64 = numbers[1] - numbers[0]\n    var\
    \ closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n   \
    \ for i := 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1]\
    \ - numbers[i]\n        if difference < closest_difference {\n            closest_difference\
    \ = difference\n            closest_elements = []interface{}{numbers[i], numbers[i\
    \ + 1]}\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpiwl5g4_x_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpiwl5g4_x_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpiwl5g4_x_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpiwl5g4_x_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64 = 0.0\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0.0 || diff < closest_diff {\n               \
    \ closest_diff = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvyouvk5f_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvyouvk5f_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvyouvk5f_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvyouvk5f_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ min_diff float64 = numbers[1] - numbers[0]\n    var min_diff_elements []float64\
    \ = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < min_diff {\n\
    \            min_diff = diff\n            min_diff_elements = []float64{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ min_diff_elements[0])\n    closest_elements = append(closest_elements, min_diff_elements[1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var result []interface{}\n    var minDiff float64\n\
    \    var minDiffIndex int\n    for i := 0; i < len(numbers) - 1; i++ {\n     \
    \   diff := numbers[i+1] - numbers[i]\n        if i == 0 || diff < minDiff {\n\
    \            minDiff = diff\n            minDiffIndex = i\n        }\n    }\n\
    \    result = append(result, numbers[minDiffIndex])\n    result = append(result,\
    \ numbers[minDiffIndex+1])\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvspp2mmn_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvspp2mmn_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvspp2mmn_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvspp2mmn_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    var difference float64\n    var smaller_number\
    \ float64\n    var larger_number float64\n\n    for i := 0; i < len(numbers) -\
    \ 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ = numbers[j] - numbers[i]\n            if difference < 0 {\n               \
    \ difference = -difference\n            }\n            if closest_difference ==\
    \ 0 || difference < closest_difference {\n                closest_difference =\
    \ difference\n                smaller_number = numbers[i]\n                larger_number\
    \ = numbers[j]\n            }\n        }\n    }\n\n    closest_elements = append(closest_elements,\
    \ smaller_number)\n    closest_elements = append(closest_elements, larger_number)\n\
    \n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbft1s6fc_test.go:58: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbft1s6fc_test.go:58: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var result []interface{}\n    var minDiff float64\n\
    \    var minDiffIndex int\n    for i := 0; i < len(numbers) - 1; i++ {\n     \
    \   diff := numbers[i + 1] - numbers[i]\n        if i == 0 || diff < minDiff {\n\
    \            minDiff = diff\n            minDiffIndex = i\n        }\n    }\n\
    \    result = append(result, numbers[minDiffIndex])\n    result = append(result,\
    \ numbers[minDiffIndex + 1])\n    return result\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpn0fe2eme_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpn0fe2eme_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpn0fe2eme_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpn0fe2eme_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var diff float64\
    \ = numbers[1] - numbers[0]\n    closest = append(closest, numbers[0])\n    closest\
    \ = append(closest, numbers[1])\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        if (numbers[i+1] - numbers[i]) < diff {\n            diff = numbers[i+1]\
    \ - numbers[i]\n            closest = []interface{}{numbers[i], numbers[i+1]}\n\
    \        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6zl05qmo_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6zl05qmo_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6zl05qmo_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6zl05qmo_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var minDiff float64\
    \ = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     diff := numbers[i + 1] - numbers[i]\n        if diff < minDiff {\n     \
    \       minDiff = diff\n            closest = []interface{}{numbers[i], numbers[i\
    \ + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpcvl2c0uu_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpcvl2c0uu_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpcvl2c0uu_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpcvl2c0uu_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < closest_difference {\n\
    \            closest_difference = difference\n            closest_index = i\n\
    \        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n       \
    \     if closest_pair == nil || diff < closest_diff {\n                closest_pair\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpy6gzcb68_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpy6gzcb68_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpy6gzcb68_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpy6gzcb68_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff\
    \ := numbers[i + 1] - numbers[i]\n        if i == 0 || diff < closest_diff {\n\
    \            closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n  \
    \          closest_diff = diff\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpq24nk9l4_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpq24nk9l4_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpq24nk9l4_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpq24nk9l4_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var minDiff float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i+1] - numbers[i]\n\
    \        if i == 0 || diff < minDiff {\n            minDiff = diff\n         \
    \   closest = []interface{}{numbers[i], numbers[i+1]}\n        }\n    }\n    return\
    \ closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmphmjzwaa4_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmphmjzwaa4_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmphmjzwaa4_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmphmjzwaa4_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        difference := numbers[i + 1] - numbers[i]\n        if difference\
    \ < closest_difference {\n            closest_difference = difference\n      \
    \      closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp4i3970bw_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64\n    for i, number := range numbers {\n        if i == 0 {\n       \
    \     closest = []interface{}{number, number}\n            closest_diff = numbers[i+1]\
    \ - number\n        } else if i == len(numbers) - 1 {\n            if closest_diff\
    \ > number - numbers[i-1] {\n                closest = []interface{}{numbers[i-1],\
    \ number}\n            }\n        } else {\n            if closest_diff > number\
    \ - numbers[i-1] {\n                closest = []interface{}{numbers[i-1], number}\n\
    \                closest_diff = number - numbers[i-1]\n            }\n       \
    \     if closest_diff > numbers[i+1] - number {\n                closest = []interface{}{number,\
    \ numbers[i+1]}\n                closest_diff = numbers[i+1] - number\n      \
    \      }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpq32qy2vt_test.go:56: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpq32qy2vt_test.go:56: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpq32qy2vt_test.go:56: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpq32qy2vt_test.go:56: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    var diff float64\n    var smaller_number float64\n\
    \    var larger_number float64\n\n    for i := 0; i < len(numbers) - 1; i++ {\n\
    \        for j := i + 1; j < len(numbers); j++ {\n            diff = numbers[j]\
    \ - numbers[i]\n            if diff < 0 {\n                diff = diff * -1\n\
    \            }\n            if i == 0 && j == 1 {\n                closest_diff\
    \ = diff\n                smaller_number = numbers[i]\n                larger_number\
    \ = numbers[j]\n            } else if diff < closest_diff {\n                closest_diff\
    \ = diff\n                smaller_number = numbers[i]\n                larger_number\
    \ = numbers[j]\n            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ smaller_number)\n    closest_elements = append(closest_elements, larger_number)\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp_zep8dje_test.go:60: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_pair = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var current float64\n\
    \    var next float64\n    var diff float64\n    var closestDiff float64\n   \
    \ for i := 0; i < len(numbers) - 1; i++ {\n        current = numbers[i]\n    \
    \    next = numbers[i + 1]\n        diff = next - current\n        if i == 0 {\n\
    \            closestDiff = diff\n            closest = []interface{}{current,\
    \ next}\n        } else if diff < closestDiff {\n            closestDiff = diff\n\
    \            closest = []interface{}{current, next}\n        }\n    }\n    return\
    \ closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate :=\
    \ find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpupu73a_y_test.go:52: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpupu73a_y_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpupu73a_y_test.go:52: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpupu73a_y_test.go:52: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_difference float64 = numbers[1] - numbers[0]\n    var\
    \ closest_elements []interface{} = []interface{}{numbers[0], numbers[1]}\n   \
    \ for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            if difference := numbers[j] - numbers[i]; difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpgoees2zz_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpgoees2zz_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpgoees2zz_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpgoees2zz_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ smallest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        if numbers[i + 1] - numbers[i] < smallest_difference {\n\
    \            smallest_difference = numbers[i + 1] - numbers[i]\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpv5yctp2n_test.go:43: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpv5yctp2n_test.go:43: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpv5yctp2n_test.go:43: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpv5yctp2n_test.go:43: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    var difference float64\n    for i, number :=\
    \ range numbers {\n        if i == 0 {\n            closest_difference = numbers[i+1]\
    \ - number\n            closest_elements = []interface{}{number, numbers[i+1]}\n\
    \        } else if i == len(numbers) - 1 {\n            difference = number -\
    \ numbers[i-1]\n            if difference < closest_difference {\n           \
    \     closest_difference = difference\n                closest_elements = []interface{}{numbers[i-1],\
    \ number}\n            }\n        } else {\n            difference = numbers[i+1]\
    \ - number\n            if difference < closest_difference {\n               \
    \ closest_difference = difference\n                closest_elements = []interface{}{number,\
    \ numbers[i+1]}\n            }\n            difference = number - numbers[i-1]\n\
    \            if difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{numbers[i-1],\
    \ number}\n            }\n        }\n    }\n    return closest_elements\n}\n\n\
    func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6ayh5w3s_test.go:61: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6ayh5w3s_test.go:61: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6ayh5w3s_test.go:61: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6ayh5w3s_test.go:61: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_elements_indexes\
    \ []int = []int{0, 1}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j] -\
    \ numbers[i]\n            if difference < closest_difference {\n             \
    \   closest_difference = difference\n                closest_elements_indexes\
    \ = []int{i, j}\n            }\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[0]])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_elements_indexes[1]])\n    return closest_elements\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpsdgett_l_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpsdgett_l_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpsdgett_l_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpsdgett_l_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest_pair = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptndmlwvy_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    var diff float64\n    var diff_abs float64\n    var\
    \ i int\n    var j int\n    var l int\n    var n int\n    var n_len int\n    var\
    \ n_len_minus_1 int\n    var n_len_minus_2 int\n    var n_minus_1 int\n    var\
    \ n_plus_1 float64\n    var n_plus_2 float64\n    var n_plus_3 float64\n    var\
    \ n_plus_4 float64\n    var n_plus_5 float64\n    var n_plus_6 float64\n    var\
    \ n_plus_7 float64\n    var n_plus_8 float64\n    var n_plus_9 float64\n    var\
    \ n_plus_10 float64\n    var n_plus_11 float64\n    var n_plus_12 float64\n  \
    \  var n_plus_13 float64\n    var n_plus_14 float64\n    var n_plus_15 float64\n\
    \    var n_plus_16 float64\n    var n_plus_17 float64\n    var n_plus_18 float64\n\
    \    var n_plus_19 float64\n    var n_plus_20 float64\n    var n_plus_21 float64\n\
    \    var n_plus_22 float64\n    var n_plus_23 float64\n    var n_plus_24 float64\n\
    \    var n_plus_25 float64\n    var n_plus_26 float64\n    var n_plus_27 float64\n\
    \    var n_plus_28 float64\n    var n_plus_29 float64\n    var n_plus_30 float64\n\
    \    var n_plus_31 float64\n    var n_plus_32 float64\n    var n_plus_33 float64\n\
    \    var n_plus_34 float64\n    var n_plus_35 float64\n    var n_plus_36 float64\n\
    \    var n_plus_37 float64\n    var n_plus_38 float64\n    var n_plus_39 float64\n\
    \    var n_plus_40 float64\n    var n_plus_41 float64\n    var n_plus_42 float64\n\
    \nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq8o39g10_test.go:70:6: expected ''('', found TestFind_Closest_Elements

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_elements []interface{}\n    var min_diff float64 = numbers[1]\
    \ - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < min_diff {\n            min_diff = diff\n\
    \            closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n  \
    \      }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmphp2geysu_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmphp2geysu_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmphp2geysu_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmphp2geysu_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        if numbers[i + 1] - numbers[i] < closest_difference {\n\
    \            closest_difference = numbers[i + 1] - numbers[i]\n            closest_elements\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp2tomp49b_test.go:43: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp2tomp49b_test.go:43: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp2tomp49b_test.go:43: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp2tomp49b_test.go:43: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    // TODO: Implement this function\n    return\
    \ []interface{}{}\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp45y092uy_test.go:36: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1 (0.00s)\n    \
    \    tmp45y092uy_test.go:36: expected '[%!s(float64=5) %!s(float64=5.9)]', got\
    \ '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2 (0.00s)\n        tmp45y092uy_test.go:36:\
    \ expected '[%!s(float64=2) %!s(float64=2.2)]', got '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp45y092uy_test.go:36: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[]'\n    --- FAIL: TestFind_Closest_Elements/test_num__4 (0.00s)\n    \
    \    tmp45y092uy_test.go:36: expected '[%!s(float64=2.2) %!s(float64=3.1)]', got\
    \ '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_distance\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n \
    \           if closest_pair == nil || distance < closest_distance {\n        \
    \        closest_pair = []interface{}{numbers[i], numbers[j]}\n              \
    \  closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp366yggqt_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp366yggqt_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp366yggqt_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp366yggqt_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_elements_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i\
    \ + 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_elements_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_elements_index])\n    closest_elements\
    \ = append(closest_elements, numbers[closest_elements_index + 1])\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpdm9vj9hj_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpdm9vj9hj_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpdm9vj9hj_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpdm9vj9hj_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    var closest_elements []interface{}\n    var closest_distance float64\
    \ = numbers[1] - numbers[0]\n    var closest_index int = 0\n    for i := 1; i\
    \ < len(numbers) - 1; i++ {\n        if numbers[i+1] - numbers[i] < closest_distance\
    \ {\n            closest_distance = numbers[i+1] - numbers[i]\n            closest_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index+1])\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpdpy87ncf_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpdpy87ncf_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpdpy87ncf_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpdpy87ncf_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < closest_difference {\n\
    \            closest_difference = difference\n            closest_index = i\n\
    \        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_pair []interface{}\n    var closest_diff float64 = numbers[1]\
    \ - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j :=\
    \ i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if diff < closest_diff {\n                closest_diff = diff\n \
    \               closest_pair = []interface{}{numbers[i], numbers[j]}\n       \
    \     }\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpl_ff_kgd_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpl_ff_kgd_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpl_ff_kgd_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpl_ff_kgd_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = 0.0\n    var current_difference float64 = 0.0\n\
    \    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            current_difference = numbers[j] - numbers[i]\n          \
    \  if closest_difference == 0.0 || current_difference < closest_difference {\n\
    \                closest_difference = current_difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpr7jq7pmj_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpr7jq7pmj_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpr7jq7pmj_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpr7jq7pmj_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i, number := range numbers {\n        for j, number2\
    \ := range numbers {\n            if i == j {\n                continue\n    \
    \        }\n            diff := number - number2\n            if diff < 0 {\n\
    \                diff = -diff\n            }\n            if closest_diff == 0\
    \ || diff < closest_diff {\n                closest_diff = diff\n            \
    \    closest_elements = []interface{}{number, number2}\n            }\n      \
    \  }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpjgror96t_test.go:52: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpjgror96t_test.go:52: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=2) %!s(float64=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_diff == 0 || diff < closest_diff {\n                closest_diff\
    \ = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers); i++ {\n        for j\
    \ := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpjipmepgo_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpjipmepgo_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpjipmepgo_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpjipmepgo_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ min_diff float64 = numbers[1] - numbers[0]\n    var min_index int = 0\n    for\
    \ i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff {\n            min_diff = diff\n            min_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[min_index])\n\
    \    closest_elements = append(closest_elements, numbers[min_index + 1])\n   \
    \ return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n\
    \  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpyb4nfqox_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpyb4nfqox_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpyb4nfqox_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpyb4nfqox_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var min_diff float64 = numbers[1] - numbers[0]\n    var min_diff_pair\
    \ []interface{} = []interface{}{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if\
    \ numbers[j] - numbers[i] < min_diff {\n                min_diff = numbers[j]\
    \ - numbers[i]\n                min_diff_pair = []interface{}{numbers[i], numbers[j]}\n\
    \            }\n        }\n    }\n    return min_diff_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp490rp8jh_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp490rp8jh_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp490rp8jh_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp490rp8jh_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = 0.0\n    var current_difference float64 = 0.0\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        current_difference = numbers[i\
    \ + 1] - numbers[i]\n        if i == 0 {\n            closest_difference = current_difference\n\
    \            closest_elements = []interface{}{numbers[i], numbers[i + 1]}\n  \
    \      } else if current_difference < closest_difference {\n            closest_difference\
    \ = current_difference\n            closest_elements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp50i8h0gu_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp50i8h0gu_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp50i8h0gu_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp50i8h0gu_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var result []interface{}\n    var minDiff float64\
    \ = numbers[1] - numbers[0]\n    var minDiffIndex int = 0\n    for i := 1; i <\
    \ len(numbers) - 1; i++ {\n        diff := numbers[i + 1] - numbers[i]\n     \
    \   if diff < minDiff {\n            minDiff = diff\n            minDiffIndex\
    \ = i\n        }\n    }\n    result = append(result, numbers[minDiffIndex])\n\
    \    result = append(result, numbers[minDiffIndex + 1])\n    return result\n}\n\
    \nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpr9ar1rpy_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i := 0; i < len(numbers) - 1; i++ {\n  \
    \      for j := i + 1; j < len(numbers); j++ {\n            difference := numbers[j]\
    \ - numbers[i]\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpqh377yg6_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        if numbers[i +\
    \ 1] - numbers[i] < closest_difference {\n            closest_difference = numbers[i\
    \ + 1] - numbers[i]\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpo9hgivn7_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ smallest_difference float64\n    var smallest_difference_index int\n    for\
    \ i := 0; i < len(numbers) - 1; i++ {\n        difference := numbers[i + 1] -\
    \ numbers[i]\n        if i == 0 || difference < smallest_difference {\n      \
    \      smallest_difference = difference\n            smallest_difference_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[smallest_difference_index])\n\
    \    closest_elements = append(closest_elements, numbers[smallest_difference_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp5dwemefl_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp5dwemefl_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp5dwemefl_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp5dwemefl_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    var difference float64\n    var first_number\
    \ float64\n    var second_number float64\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        first_number = numbers[i]\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            second_number = numbers[j]\n            difference = second_number\
    \ - first_number\n            if closest_difference == 0 || difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = []interface{}{first_number, second_number}\n            }\n        }\n   \
    \ }\n\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpbktgfq4g_test.go:53: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbktgfq4g_test.go:53: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpbktgfq4g_test.go:53: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbktgfq4g_test.go:53: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    if len(numbers)\
    \ < 2 {\n        return closest_elements\n    }\n    var closest_difference float64\
    \ = numbers[1] - numbers[0]\n    closest_elements = []interface{}{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[j] - numbers[i] < closest_difference\
    \ {\n                closest_difference = numbers[j] - numbers[i]\n          \
    \      closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmphsrtii0l_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmphsrtii0l_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmphsrtii0l_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmphsrtii0l_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closestDistance\
    \ float64\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j\
    \ < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n   \
    \         if closestDistance == 0 || distance < closestDistance {\n          \
    \      closestDistance = distance\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmprm2t6dtp_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmprm2t6dtp_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmprm2t6dtp_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmprm2t6dtp_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var diff float64\n\
    \    var smallestDiff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n \
    \       for j := i + 1; j < len(numbers); j++ {\n            diff = numbers[j]\
    \ - numbers[i]\n            if diff < smallestDiff || smallestDiff == 0 {\n  \
    \              smallestDiff = diff\n                closest = []interface{}{numbers[i],\
    \ numbers[j]}\n            }\n        }\n    }\n    return closest\n}\n\nfunc\
    \ TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmeruj6c9_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmeruj6c9_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmeruj6c9_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmeruj6c9_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ smallest_difference float64 = numbers[1] - numbers[0]\n    var smallest_difference_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < smallest_difference {\n\
    \            smallest_difference = difference\n            smallest_difference_index\
    \ = i\n        }\n    }\n    closest_elements = append(closest_elements, numbers[smallest_difference_index])\n\
    \    closest_elements = append(closest_elements, numbers[smallest_difference_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp68osjjhd_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp68osjjhd_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp68osjjhd_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp68osjjhd_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var minDiff float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if i == 0 || diff < minDiff {\n            minDiff = diff\n\
    \            closest = []interface{}{numbers[i], numbers[i + 1]}\n        }\n\
    \    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmprj039ru8_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmprj039ru8_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmprj039ru8_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmprj039ru8_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    var diff float64\n    for i := 0; i <\
    \ len(numbers) - 1; i++ {\n        diff = numbers[i + 1] - numbers[i]\n      \
    \  if diff < closest_diff {\n            closest_diff = diff\n            closest_pair\
    \ = []interface{}{numbers[i], numbers[i + 1]}\n        }\n    }\n    return closest_pair\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpuncuejoc_test.go:45: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpuncuejoc_test.go:45: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpuncuejoc_test.go:45: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpuncuejoc_test.go:45: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index int =\
    \ 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i +\
    \ 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_elements_index\
    \ int = 0\n    for i := 0; i < len(numbers) - 1; i++ {\n        if numbers[i +\
    \ 1] - numbers[i] < closest_difference {\n            closest_difference = numbers[i\
    \ + 1] - numbers[i]\n            closest_elements_index = i\n        }\n    }\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_elements_index\
    \ + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp1uq_13wt_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp1uq_13wt_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp1uq_13wt_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp1uq_13wt_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < closest_difference {\n\
    \            closest_difference = difference\n            closest_index = i\n\
    \        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index int =\
    \ 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i +\
    \ 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_distance float64\n    for i := 0; i < len(numbers); i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            distance := numbers[j] - numbers[i]\n\
    \            if closest_distance == 0 || distance < closest_distance {\n     \
    \           closest_elements = []interface{}{numbers[i], numbers[j]}\n       \
    \         closest_distance = distance\n            }\n        }\n    }\n    return\
    \ closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate\
    \ := find_closest_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0,\
    \ 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2}),\
    \ expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvgreyrcj_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvgreyrcj_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvgreyrcj_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvgreyrcj_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_pair == nil || diff < closest_diff {\n                closest_pair\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var minDiff float64\
    \ = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++ {\n   \
    \     diff := numbers[i + 1] - numbers[i]\n        if diff < minDiff {\n     \
    \       minDiff = diff\n            closest = []interface{}{numbers[i], numbers[i\
    \ + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpcvl2c0uu_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpcvl2c0uu_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpcvl2c0uu_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpcvl2c0uu_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for\
    \ j := i + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if closest_diff == 0 || diff < closest_diff {\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpmtt1rami_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ min_diff float64 = numbers[1] - numbers[0]\n    var min_diff_elements []float64\
    \ = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < min_diff {\n\
    \            min_diff = diff\n            min_diff_elements = []float64{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ min_diff_elements[0])\n    closest_elements = append(closest_elements, min_diff_elements[1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_pair == nil || diff < closest_diff {\n                closest_pair\
    \ = []interface{}{numbers[i], numbers[j]}\n                closest_diff = diff\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptqtptwle_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_diff float64 = numbers[1] - numbers[0]\n    var closest_index int =\
    \ 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        diff := numbers[i +\
    \ 1] - numbers[i]\n        if diff < closest_diff {\n            closest_diff\
    \ = diff\n            closest_index = i\n        }\n    }\n    closest_elements\
    \ = append(closest_elements, numbers[closest_index])\n    closest_elements = append(closest_elements,\
    \ numbers[closest_index + 1])\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpc0ol1af3_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ min_diff float64 = numbers[1] - numbers[0]\n    closest_elements = append(closest_elements,\
    \ numbers[0])\n    closest_elements = append(closest_elements, numbers[1])\n \
    \   for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < min_diff {\n            min_diff = diff\n    \
    \        closest_elements = closest_elements[:0]\n            closest_elements\
    \ = append(closest_elements, numbers[i])\n            closest_elements = append(closest_elements,\
    \ numbers[i + 1])\n        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6dv35d3w_test.go:48: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6dv35d3w_test.go:48: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6dv35d3w_test.go:48: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6dv35d3w_test.go:48: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers)\
    \ - 1; i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            difference\
    \ := numbers[j] - numbers[i]\n            if difference < closest_difference {\n\
    \                closest_difference = difference\n                closest_elements\
    \ = []interface{}{numbers[i], numbers[j]}\n            }\n        }\n    }\n \
    \   return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpday5rdr8_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpday5rdr8_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpday5rdr8_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpday5rdr8_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1;\
    \ j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n     \
    \       if closest_diff == 0 || diff < closest_diff {\n                closest_diff\
    \ = diff\n                closest = []interface{}{numbers[i], numbers[j]}\n  \
    \          }\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp0dec2x2e_test.go:46: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    min_distance := numbers[1] - numbers[0]\n  \
    \  min_distance_index := 0\n    for i := 1; i < len(numbers) - 1; i++ {\n    \
    \    if numbers[i+1] - numbers[i] < min_distance {\n            min_distance =\
    \ numbers[i+1] - numbers[i]\n            min_distance_index = i\n        }\n \
    \   }\n    return []interface{}{numbers[min_distance_index], numbers[min_distance_index+1]}\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpuzowj0mu_test.go:43: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpuzowj0mu_test.go:43: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpuzowj0mu_test.go:43: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpuzowj0mu_test.go:43: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_diff float64 = numbers[1] - numbers[0]\n\
    \    var closest_pair []interface{} = []interface{}{numbers[0], numbers[1]}\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        diff := numbers[i + 1] -\
    \ numbers[i]\n        if diff < closest_diff {\n            closest_diff = diff\n\
    \            closest_pair = []interface{}{numbers[i], numbers[i + 1]}\n      \
    \  }\n    }\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp6z0ruryh_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp6z0ruryh_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp6z0ruryh_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp6z0ruryh_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var smallest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < smallest_diff\
    \ {\n            smallest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp1fkm1u87_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp1fkm1u87_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp1fkm1u87_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp1fkm1u87_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    var closest_index\
    \ int = 0\n    for i := 1; i < len(numbers) - 1; i++ {\n        difference :=\
    \ numbers[i + 1] - numbers[i]\n        if difference < closest_difference {\n\
    \            closest_difference = difference\n            closest_index = i\n\
    \        }\n    }\n    closest_elements = append(closest_elements, numbers[closest_index])\n\
    \    closest_elements = append(closest_elements, numbers[closest_index + 1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmppxwn0av4_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest []interface{}\n    var closest_diff\
    \ float64 = numbers[1] - numbers[0]\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < closest_diff\
    \ {\n            closest_diff = diff\n            closest = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closest\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpv715ebbs_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    for i, number := range numbers {\n        for\
    \ j, number2 := range numbers {\n            if i != j {\n                difference\
    \ := number - number2\n                if difference < 0 {\n                 \
    \   difference = -difference\n                }\n                if closest_difference\
    \ == 0 || difference < closest_difference {\n                    closest_difference\
    \ = difference\n                    closest_elements = []interface{}{number, number2}\n\
    \                }\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpbqlrxl3s_test.go:51: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=5)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpbqlrxl3s_test.go:51: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=2) %!s(float64=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074327
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_pair []interface{}\n    var min_diff\
    \ float64 = numbers[1] - numbers[0]\n    var min_pair []float64 = []float64{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            diff := numbers[j] - numbers[i]\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = []float64{numbers[i], numbers[j]}\n            }\n        }\n\
    \    }\n    closest_pair = append(closest_pair, min_pair[0])\n    closest_pair\
    \ = append(closest_pair, min_pair[1])\n    return closest_pair\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpoaw8i4c1_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpoaw8i4c1_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpoaw8i4c1_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpoaw8i4c1_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_elements []interface{}\n    var closest_distance float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            distance := numbers[j] - numbers[i]\n            if closest_distance\
    \ == 0 || distance < closest_distance {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpnm5whbvm_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpnm5whbvm_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpnm5whbvm_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpnm5whbvm_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    if len(numbers) < 2 {\n        return []interface{}{}\n\
    \    }\n    var closest_elements []interface{}\n    var closest_diff float64\n\
    \    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i + 1; j < len(numbers);\
    \ j++ {\n            diff := numbers[j] - numbers[i]\n            if closest_diff\
    \ == 0 || diff < closest_diff {\n                closest_elements = []interface{}{numbers[i],\
    \ numbers[j]}\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmp_zft5xq5_test.go:49: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ min_diff float64 = numbers[1] - numbers[0]\n    var min_diff_elements []float64\
    \ = []float64{numbers[0], numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++\
    \ {\n        diff := numbers[i + 1] - numbers[i]\n        if diff < min_diff {\n\
    \            min_diff = diff\n            min_diff_elements = []float64{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    closest_elements = append(closest_elements,\
    \ min_diff_elements[0])\n    closest_elements = append(closest_elements, min_diff_elements[1])\n\
    \    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t *testing.T)\
    \ {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpvifaicw6_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64\n    var difference float64\n    var smaller_number\
    \ float64\n    var larger_number float64\n\n    for i := 0; i < len(numbers);\
    \ i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if numbers[i]\
    \ > numbers[j] {\n                larger_number = numbers[i]\n               \
    \ smaller_number = numbers[j]\n            } else {\n                larger_number\
    \ = numbers[j]\n                smaller_number = numbers[i]\n            }\n \
    \           difference = larger_number - smaller_number\n            if closest_difference\
    \ == 0 || difference < closest_difference {\n                closest_difference\
    \ = difference\n                closest_elements = []interface{}{smaller_number,\
    \ larger_number}\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\nfunc TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
    \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
    \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmptt8d36s9_test.go:57: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=3) %!s(float64=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var closest_elements []interface{}\n    var\
    \ closest_difference float64 = numbers[1] - numbers[0]\n    closest_elements =\
    \ append(closest_elements, numbers[0])\n    closest_elements = append(closest_elements,\
    \ numbers[1])\n    for i := 0; i < len(numbers) - 1; i++ {\n        for j := i\
    \ + 1; j < len(numbers); j++ {\n            if numbers[j] - numbers[i] < closest_difference\
    \ {\n                closest_difference = numbers[j] - numbers[i]\n          \
    \      closest_elements = []interface{}{numbers[i], numbers[j]}\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpx7d2vqpl_test.go:47: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpx7d2vqpl_test.go:47: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpx7d2vqpl_test.go:47: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpx7d2vqpl_test.go:47: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n// other and return them in order\
    \ (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
    \ []float64) []interface{} {\n    var smallestDifference float64 = numbers[1]\
    \ - numbers[0]\n    var closestElements []interface{} = []interface{}{numbers[0],\
    \ numbers[1]}\n    for i := 0; i < len(numbers) - 1; i++ {\n        difference\
    \ := numbers[i + 1] - numbers[i]\n        if difference < smallestDifference {\n\
    \            smallestDifference = difference\n            closestElements = []interface{}{numbers[i],\
    \ numbers[i + 1]}\n        }\n    }\n    return closestElements\n}\n\nfunc TestFind_Closest_Elements(t\
    \ *testing.T) {\n  candidate := find_closest_elements\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), expected: []interface{}{3.9,\
    \ 4.0} },\n     { actual: candidate([]float64{1.0, 2.0, 5.9, 4.0, 5.0}), expected:\
    \ []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0, 2.0} },\n     { actual:\
    \ candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected: []interface{}{2.2,\
    \ 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFind_Closest_Elements (0.00s)\n    --- FAIL: TestFind_Closest_Elements/test_num__0\
    \ (0.00s)\n        tmpwan8nfqe_test.go:44: expected '[%!s(float64=3.9) %!s(float64=4)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__1\
    \ (0.00s)\n        tmpwan8nfqe_test.go:44: expected '[%!s(float64=5) %!s(float64=5.9)]',\
    \ got '[%!s(float64=5.9) %!s(float64=4)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__2\
    \ (0.00s)\n        tmpwan8nfqe_test.go:44: expected '[%!s(float64=2) %!s(float64=2.2)]',\
    \ got '[%!s(float64=5) %!s(float64=2.2)]'\n    --- FAIL: TestFind_Closest_Elements/test_num__3\
    \ (0.00s)\n        tmpwan8nfqe_test.go:44: expected '[%!s(float64=2) %!s(float64=2)]',\
    \ got '[%!s(float64=5) %!s(float64=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074336
